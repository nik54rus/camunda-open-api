<?php
/**
 * HistoricDecisionInstanceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * HistoricDecisionInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoricDecisionInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteAsync
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricDecisionInstancesDto $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BatchDto
     */
    public function deleteAsync($body = null)
    {
        list($response) = $this->deleteAsyncWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BatchDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->deleteAsyncRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAsyncAsync
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncAsync($body = null)
    {
        return $this->deleteAsyncAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAsyncAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAsyncAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->deleteAsyncRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAsync'
     *
     * @param  \Swagger\Client\Model\DeleteHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteAsyncRequest($body = null)
    {

        $resourcePath = '/history/decision-instance/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDecisionInstance
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricDecisionInstanceDto
     */
    public function getHistoricDecisionInstance($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        list($response) = $this->getHistoricDecisionInstanceWithHttpInfo($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization);
        return $response;
    }

    /**
     * Operation getHistoricDecisionInstanceWithHttpInfo
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricDecisionInstanceDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDecisionInstanceWithHttpInfo($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricDecisionInstanceDto';
        $request = $this->getHistoricDecisionInstanceRequest($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricDecisionInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDecisionInstanceAsync
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstanceAsync($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        return $this->getHistoricDecisionInstanceAsyncWithHttpInfo($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDecisionInstanceAsyncWithHttpInfo
     *
     * Get Historic Decision Instance
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstanceAsyncWithHttpInfo($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricDecisionInstanceDto';
        $request = $this->getHistoricDecisionInstanceRequest($id, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDecisionInstance'
     *
     * @param  string $id The id of the historic decision instance to be retrieved. (required)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricDecisionInstanceRequest($id, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricDecisionInstance'
            );
        }

        $resourcePath = '/history/decision-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_inputs !== null) {
            $queryParams['includeInputs'] = ObjectSerializer::toQueryValue($include_inputs, null);
        }
        // query params
        if ($include_outputs !== null) {
            $queryParams['includeOutputs'] = ObjectSerializer::toQueryValue($include_outputs, null);
        }
        // query params
        if ($disable_binary_fetching !== null) {
            $queryParams['disableBinaryFetching'] = ObjectSerializer::toQueryValue($disable_binary_fetching, null);
        }
        // query params
        if ($disable_custom_object_deserialization !== null) {
            $queryParams['disableCustomObjectDeserialization'] = ObjectSerializer::toQueryValue($disable_custom_object_deserialization, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDecisionInstances
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricDecisionInstanceDto[]
     */
    public function getHistoricDecisionInstances($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->getHistoricDecisionInstancesWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation getHistoricDecisionInstancesWithHttpInfo
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricDecisionInstanceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDecisionInstancesWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricDecisionInstanceDto[]';
        $request = $this->getHistoricDecisionInstancesRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricDecisionInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDecisionInstancesAsync
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesAsync($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->getHistoricDecisionInstancesAsyncWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDecisionInstancesAsyncWithHttpInfo
     *
     * Get Historic Decision Instances
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesAsyncWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricDecisionInstanceDto[]';
        $request = $this->getHistoricDecisionInstancesRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key, $include_inputs, $include_outputs, $disable_binary_fetching, $disable_custom_object_deserialization, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDecisionInstances'
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     * @param  bool $include_inputs Include input values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $include_outputs Include output values in the result. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_binary_fetching Disables fetching of byte array input and output values. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $disable_custom_object_deserialization Disables deserialization of input and output values that are custom objects. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricDecisionInstancesRequest($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null, $include_inputs = null, $include_outputs = null, $disable_binary_fetching = null, $disable_custom_object_deserialization = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/decision-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_instance_id !== null) {
            $queryParams['decisionInstanceId'] = ObjectSerializer::toQueryValue($decision_instance_id, null);
        }
        // query params
        if ($decision_instance_id_in !== null) {
            $queryParams['decisionInstanceIdIn'] = ObjectSerializer::toQueryValue($decision_instance_id_in, null);
        }
        // query params
        if ($decision_definition_id !== null) {
            $queryParams['decisionDefinitionId'] = ObjectSerializer::toQueryValue($decision_definition_id, null);
        }
        // query params
        if ($decision_definition_id_in !== null) {
            $queryParams['decisionDefinitionIdIn'] = ObjectSerializer::toQueryValue($decision_definition_id_in, null);
        }
        // query params
        if ($decision_definition_key !== null) {
            $queryParams['decisionDefinitionKey'] = ObjectSerializer::toQueryValue($decision_definition_key, null);
        }
        // query params
        if ($decision_definition_key_in !== null) {
            $queryParams['decisionDefinitionKeyIn'] = ObjectSerializer::toQueryValue($decision_definition_key_in, null);
        }
        // query params
        if ($decision_definition_name !== null) {
            $queryParams['decisionDefinitionName'] = ObjectSerializer::toQueryValue($decision_definition_name, null);
        }
        // query params
        if ($decision_definition_name_like !== null) {
            $queryParams['decisionDefinitionNameLike'] = ObjectSerializer::toQueryValue($decision_definition_name_like, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($case_definition_id !== null) {
            $queryParams['caseDefinitionId'] = ObjectSerializer::toQueryValue($case_definition_id, null);
        }
        // query params
        if ($case_definition_key !== null) {
            $queryParams['caseDefinitionKey'] = ObjectSerializer::toQueryValue($case_definition_key, null);
        }
        // query params
        if ($case_instance_id !== null) {
            $queryParams['caseInstanceId'] = ObjectSerializer::toQueryValue($case_instance_id, null);
        }
        // query params
        if ($activity_id_in !== null) {
            $queryParams['activityIdIn'] = ObjectSerializer::toQueryValue($activity_id_in, null);
        }
        // query params
        if ($activity_instance_id_in !== null) {
            $queryParams['activityInstanceIdIn'] = ObjectSerializer::toQueryValue($activity_instance_id_in, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($evaluated_before !== null) {
            $queryParams['evaluatedBefore'] = ObjectSerializer::toQueryValue($evaluated_before, 'date-time');
        }
        // query params
        if ($evaluated_after !== null) {
            $queryParams['evaluatedAfter'] = ObjectSerializer::toQueryValue($evaluated_after, 'date-time');
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id, null);
        }
        // query params
        if ($root_decision_instance_id !== null) {
            $queryParams['rootDecisionInstanceId'] = ObjectSerializer::toQueryValue($root_decision_instance_id, null);
        }
        // query params
        if ($root_decision_instances_only !== null) {
            $queryParams['rootDecisionInstancesOnly'] = ObjectSerializer::toQueryValue($root_decision_instances_only, null);
        }
        // query params
        if ($decision_requirements_definition_id !== null) {
            $queryParams['decisionRequirementsDefinitionId'] = ObjectSerializer::toQueryValue($decision_requirements_definition_id, null);
        }
        // query params
        if ($decision_requirements_definition_key !== null) {
            $queryParams['decisionRequirementsDefinitionKey'] = ObjectSerializer::toQueryValue($decision_requirements_definition_key, null);
        }
        // query params
        if ($include_inputs !== null) {
            $queryParams['includeInputs'] = ObjectSerializer::toQueryValue($include_inputs, null);
        }
        // query params
        if ($include_outputs !== null) {
            $queryParams['includeOutputs'] = ObjectSerializer::toQueryValue($include_outputs, null);
        }
        // query params
        if ($disable_binary_fetching !== null) {
            $queryParams['disableBinaryFetching'] = ObjectSerializer::toQueryValue($disable_binary_fetching, null);
        }
        // query params
        if ($disable_custom_object_deserialization !== null) {
            $queryParams['disableCustomObjectDeserialization'] = ObjectSerializer::toQueryValue($disable_custom_object_deserialization, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricDecisionInstancesCount
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CountResultDto
     */
    public function getHistoricDecisionInstancesCount($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        list($response) = $this->getHistoricDecisionInstancesCountWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key);
        return $response;
    }

    /**
     * Operation getHistoricDecisionInstancesCountWithHttpInfo
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricDecisionInstancesCountWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->getHistoricDecisionInstancesCountRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricDecisionInstancesCountAsync
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesCountAsync($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        return $this->getHistoricDecisionInstancesCountAsyncWithHttpInfo($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricDecisionInstancesCountAsyncWithHttpInfo
     *
     * Get Historic Decision Instance Count
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricDecisionInstancesCountAsyncWithHttpInfo($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->getHistoricDecisionInstancesCountRequest($decision_instance_id, $decision_instance_id_in, $decision_definition_id, $decision_definition_id_in, $decision_definition_key, $decision_definition_key_in, $decision_definition_name, $decision_definition_name_like, $process_definition_id, $process_definition_key, $process_instance_id, $case_definition_id, $case_definition_key, $case_instance_id, $activity_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $evaluated_before, $evaluated_after, $user_id, $root_decision_instance_id, $root_decision_instances_only, $decision_requirements_definition_id, $decision_requirements_definition_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricDecisionInstancesCount'
     *
     * @param  string $decision_instance_id Filter by decision instance id. (optional)
     * @param  string $decision_instance_id_in Filter by decision instance ids. Must be a comma-separated list of decision instance ids. (optional)
     * @param  string $decision_definition_id Filter by the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_id_in Filter by the decision definitions the instances belongs to. Must be a comma-separated list of decision definition ids. (optional)
     * @param  string $decision_definition_key Filter by the key of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_key_in Filter by the keys of the decision definition the instances belongs to. Must be a comma- separated list of decision definition keys. (optional)
     * @param  string $decision_definition_name Filter by the name of the decision definition the instances belongs to. (optional)
     * @param  string $decision_definition_name_like Filter by the name of the decision definition the instances belongs to, that the parameter is a substring of. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances belongs to. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances belongs to. (optional)
     * @param  string $process_instance_id Filter by the process instance the instances belongs to. (optional)
     * @param  string $case_definition_id Filter by the case definition the instances belongs to. (optional)
     * @param  string $case_definition_key Filter by the key of the case definition the instances belongs to. (optional)
     * @param  string $case_instance_id Filter by the case instance the instances belongs to. (optional)
     * @param  string $activity_id_in Filter by the activity ids the instances belongs to. Must be a comma-separated list of acitvity ids. (optional)
     * @param  string $activity_instance_id_in Filter by the activity instance ids the instances belongs to. Must be a comma-separated list of acitvity instance ids. (optional)
     * @param  string $tenant_id_in Filter by a comma-separated list of tenant ids. A historic decision instance must have one of the given tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic decision instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  \DateTime $evaluated_before Restrict to instances that were evaluated before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $evaluated_after Restrict to instances that were evaluated after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM- dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $user_id Restrict to instances that were evaluated by the given user. (optional)
     * @param  string $root_decision_instance_id Restrict to instances that have a given root decision instance id. This also includes the decision instance with the given id. (optional)
     * @param  bool $root_decision_instances_only Restrict to instances those are the root decision instance of an evaluation. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $decision_requirements_definition_id Filter by the decision requirements definition the instances belongs to. (optional)
     * @param  string $decision_requirements_definition_key Filter by the key of the decision requirements definition the instances belongs to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricDecisionInstancesCountRequest($decision_instance_id = null, $decision_instance_id_in = null, $decision_definition_id = null, $decision_definition_id_in = null, $decision_definition_key = null, $decision_definition_key_in = null, $decision_definition_name = null, $decision_definition_name_like = null, $process_definition_id = null, $process_definition_key = null, $process_instance_id = null, $case_definition_id = null, $case_definition_key = null, $case_instance_id = null, $activity_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $evaluated_before = null, $evaluated_after = null, $user_id = null, $root_decision_instance_id = null, $root_decision_instances_only = null, $decision_requirements_definition_id = null, $decision_requirements_definition_key = null)
    {

        $resourcePath = '/history/decision-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($decision_instance_id !== null) {
            $queryParams['decisionInstanceId'] = ObjectSerializer::toQueryValue($decision_instance_id, null);
        }
        // query params
        if ($decision_instance_id_in !== null) {
            $queryParams['decisionInstanceIdIn'] = ObjectSerializer::toQueryValue($decision_instance_id_in, null);
        }
        // query params
        if ($decision_definition_id !== null) {
            $queryParams['decisionDefinitionId'] = ObjectSerializer::toQueryValue($decision_definition_id, null);
        }
        // query params
        if ($decision_definition_id_in !== null) {
            $queryParams['decisionDefinitionIdIn'] = ObjectSerializer::toQueryValue($decision_definition_id_in, null);
        }
        // query params
        if ($decision_definition_key !== null) {
            $queryParams['decisionDefinitionKey'] = ObjectSerializer::toQueryValue($decision_definition_key, null);
        }
        // query params
        if ($decision_definition_key_in !== null) {
            $queryParams['decisionDefinitionKeyIn'] = ObjectSerializer::toQueryValue($decision_definition_key_in, null);
        }
        // query params
        if ($decision_definition_name !== null) {
            $queryParams['decisionDefinitionName'] = ObjectSerializer::toQueryValue($decision_definition_name, null);
        }
        // query params
        if ($decision_definition_name_like !== null) {
            $queryParams['decisionDefinitionNameLike'] = ObjectSerializer::toQueryValue($decision_definition_name_like, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($case_definition_id !== null) {
            $queryParams['caseDefinitionId'] = ObjectSerializer::toQueryValue($case_definition_id, null);
        }
        // query params
        if ($case_definition_key !== null) {
            $queryParams['caseDefinitionKey'] = ObjectSerializer::toQueryValue($case_definition_key, null);
        }
        // query params
        if ($case_instance_id !== null) {
            $queryParams['caseInstanceId'] = ObjectSerializer::toQueryValue($case_instance_id, null);
        }
        // query params
        if ($activity_id_in !== null) {
            $queryParams['activityIdIn'] = ObjectSerializer::toQueryValue($activity_id_in, null);
        }
        // query params
        if ($activity_instance_id_in !== null) {
            $queryParams['activityInstanceIdIn'] = ObjectSerializer::toQueryValue($activity_instance_id_in, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($evaluated_before !== null) {
            $queryParams['evaluatedBefore'] = ObjectSerializer::toQueryValue($evaluated_before, 'date-time');
        }
        // query params
        if ($evaluated_after !== null) {
            $queryParams['evaluatedAfter'] = ObjectSerializer::toQueryValue($evaluated_after, 'date-time');
        }
        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id, null);
        }
        // query params
        if ($root_decision_instance_id !== null) {
            $queryParams['rootDecisionInstanceId'] = ObjectSerializer::toQueryValue($root_decision_instance_id, null);
        }
        // query params
        if ($root_decision_instances_only !== null) {
            $queryParams['rootDecisionInstancesOnly'] = ObjectSerializer::toQueryValue($root_decision_instances_only, null);
        }
        // query params
        if ($decision_requirements_definition_id !== null) {
            $queryParams['decisionRequirementsDefinitionId'] = ObjectSerializer::toQueryValue($decision_requirements_definition_id, null);
        }
        // query params
        if ($decision_requirements_definition_key !== null) {
            $queryParams['decisionRequirementsDefinitionKey'] = ObjectSerializer::toQueryValue($decision_requirements_definition_key, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstance
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BatchDto
     */
    public function setRemovalTimeAsyncHistoricDecisionInstance($body = null)
    {
        list($response) = $this->setRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BatchDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->setRemovalTimeAsyncHistoricDecisionInstanceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstanceAsync
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceAsync($body = null)
    {
        return $this->setRemovalTimeAsyncHistoricDecisionInstanceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRemovalTimeAsyncHistoricDecisionInstanceAsyncWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncHistoricDecisionInstanceAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->setRemovalTimeAsyncHistoricDecisionInstanceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRemovalTimeAsyncHistoricDecisionInstance'
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricDecisionInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setRemovalTimeAsyncHistoricDecisionInstanceRequest($body = null)
    {

        $resourcePath = '/history/decision-instance/set-removal-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
