<?php
/**
 * HistoricProcessInstanceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * HistoricProcessInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoricProcessInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteHistoricProcessInstance
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHistoricProcessInstance($id, $fail_if_not_exists = null)
    {
        $this->deleteHistoricProcessInstanceWithHttpInfo($id, $fail_if_not_exists);
    }

    /**
     * Operation deleteHistoricProcessInstanceWithHttpInfo
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricProcessInstanceWithHttpInfo($id, $fail_if_not_exists = null)
    {
        $returnType = '';
        $request = $this->deleteHistoricProcessInstanceRequest($id, $fail_if_not_exists);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricProcessInstanceAsync
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstanceAsync($id, $fail_if_not_exists = null)
    {
        return $this->deleteHistoricProcessInstanceAsyncWithHttpInfo($id, $fail_if_not_exists)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Delete
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstanceAsyncWithHttpInfo($id, $fail_if_not_exists = null)
    {
        $returnType = '';
        $request = $this->deleteHistoricProcessInstanceRequest($id, $fail_if_not_exists);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricProcessInstance'
     *
     * @param  string $id The id of the historic process instance to be deleted. (required)
     * @param  bool $fail_if_not_exists If set to &#x60;false&#x60;, the request will still be successful if the process id is not found. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHistoricProcessInstanceRequest($id, $fail_if_not_exists = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/process-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fail_if_not_exists !== null) {
            $queryParams['failIfNotExists'] = ObjectSerializer::toQueryValue($fail_if_not_exists, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHistoricProcessInstancesAsync
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricProcessInstancesDto $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BatchDto
     */
    public function deleteHistoricProcessInstancesAsync($body = null)
    {
        list($response) = $this->deleteHistoricProcessInstancesAsyncWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation deleteHistoricProcessInstancesAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricProcessInstancesDto $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BatchDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricProcessInstancesAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->deleteHistoricProcessInstancesAsyncRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricProcessInstancesAsyncAsync
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricProcessInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstancesAsyncAsync($body = null)
    {
        return $this->deleteHistoricProcessInstancesAsyncAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricProcessInstancesAsyncAsyncWithHttpInfo
     *
     * Delete Async (POST)
     *
     * @param  \Swagger\Client\Model\DeleteHistoricProcessInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricProcessInstancesAsyncAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->deleteHistoricProcessInstancesAsyncRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricProcessInstancesAsync'
     *
     * @param  \Swagger\Client\Model\DeleteHistoricProcessInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHistoricProcessInstancesAsyncRequest($body = null)
    {

        $resourcePath = '/history/process-instance/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstance
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstance($id)
    {
        $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo($id);
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstanceAsync
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceAsync($id)
    {
        return $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricVariableInstancesOfHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Delete Variable Instances
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstancesOfHistoricProcessInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHistoricVariableInstancesOfHistoricProcessInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricVariableInstancesOfHistoricProcessInstance'
     *
     * @param  string $id The id of the process instance for which all historic variables are to be deleted. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHistoricVariableInstancesOfHistoricProcessInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHistoricVariableInstancesOfHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/process-instance/{id}/variable-instances';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstance
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricProcessInstanceDto
     */
    public function getHistoricProcessInstance($id)
    {
        list($response) = $this->getHistoricProcessInstanceWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstanceWithHttpInfo
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricProcessInstanceDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstanceWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceDto';
        $request = $this->getHistoricProcessInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricProcessInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstanceAsync
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceAsync($id)
    {
        return $this->getHistoricProcessInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstanceAsyncWithHttpInfo
     *
     * Get
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceDto';
        $request = $this->getHistoricProcessInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstance'
     *
     * @param  string $id The id of the historic process instance to be retrieved. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricProcessInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricProcessInstance'
            );
        }

        $resourcePath = '/history/process-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstanceDurationReport
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DurationReportResultDto[]
     */
    public function getHistoricProcessInstanceDurationReport($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        list($response) = $this->getHistoricProcessInstanceDurationReportWithHttpInfo($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstanceDurationReportWithHttpInfo
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DurationReportResultDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstanceDurationReportWithHttpInfo($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        $returnType = '\Swagger\Client\Model\DurationReportResultDto[]';
        $request = $this->getHistoricProcessInstanceDurationReportRequest($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DurationReportResultDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstanceDurationReportAsync
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceDurationReportAsync($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        return $this->getHistoricProcessInstanceDurationReportAsyncWithHttpInfo($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstanceDurationReportAsyncWithHttpInfo
     *
     * Get Duration Report
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstanceDurationReportAsyncWithHttpInfo($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        $returnType = '\Swagger\Client\Model\DurationReportResultDto[]';
        $request = $this->getHistoricProcessInstanceDurationReportRequest($report_type, $period_unit, $process_definition_id_in, $process_definition_key_in, $started_before, $started_after);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstanceDurationReport'
     *
     * @param  string $report_type **Mandatory.** Specifies the type of the report to retrieve. To retrieve a report about the duration of process instances, the value must be set to &#x60;duration&#x60;. (required)
     * @param  string $period_unit **Mandatory.** Specifies the granularity of the report. Valid values are &#x60;month&#x60; and &#x60;quarter&#x60;. (required)
     * @param  string $process_definition_id_in Filter by process definition ids. Must be a comma-separated list of process definition ids. (optional)
     * @param  string $process_definition_key_in Filter by process definition keys. Must be a comma-separated list of process definition keys. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2016-01-23T14:42:45.000+0200&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricProcessInstanceDurationReportRequest($report_type, $period_unit, $process_definition_id_in = null, $process_definition_key_in = null, $started_before = null, $started_after = null)
    {
        // verify the required parameter 'report_type' is set
        if ($report_type === null || (is_array($report_type) && count($report_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $report_type when calling getHistoricProcessInstanceDurationReport'
            );
        }
        // verify the required parameter 'period_unit' is set
        if ($period_unit === null || (is_array($period_unit) && count($period_unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $period_unit when calling getHistoricProcessInstanceDurationReport'
            );
        }

        $resourcePath = '/history/process-instance/report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($report_type !== null) {
            $queryParams['reportType'] = ObjectSerializer::toQueryValue($report_type, null);
        }
        // query params
        if ($period_unit !== null) {
            $queryParams['periodUnit'] = ObjectSerializer::toQueryValue($period_unit, null);
        }
        // query params
        if ($process_definition_id_in !== null) {
            $queryParams['processDefinitionIdIn'] = ObjectSerializer::toQueryValue($process_definition_id_in, null);
        }
        // query params
        if ($process_definition_key_in !== null) {
            $queryParams['processDefinitionKeyIn'] = ObjectSerializer::toQueryValue($process_definition_key_in, null);
        }
        // query params
        if ($started_before !== null) {
            $queryParams['startedBefore'] = ObjectSerializer::toQueryValue($started_before, 'date-time');
        }
        // query params
        if ($started_after !== null) {
            $queryParams['startedAfter'] = ObjectSerializer::toQueryValue($started_after, 'date-time');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/csv', 'text/csv']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/csv', 'text/csv'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstances
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricProcessInstanceDto[]
     */
    public function getHistoricProcessInstances($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        list($response) = $this->getHistoricProcessInstancesWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstancesWithHttpInfo
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricProcessInstanceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstancesWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceDto[]';
        $request = $this->getHistoricProcessInstancesRequest($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricProcessInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstancesAsync
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesAsync($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        return $this->getHistoricProcessInstancesAsyncWithHttpInfo($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstancesAsyncWithHttpInfo
     *
     * Get List
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesAsyncWithHttpInfo($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceDto[]';
        $request = $this->getHistoricProcessInstancesRequest($sort_by, $sort_order, $first_result, $max_results, $process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstances'
     *
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricProcessInstancesRequest($sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {

        $resourcePath = '/history/process-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($process_instance_ids !== null) {
            $queryParams['processInstanceIds'] = ObjectSerializer::toQueryValue($process_instance_ids, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($process_definition_key_in !== null) {
            $queryParams['processDefinitionKeyIn'] = ObjectSerializer::toQueryValue($process_definition_key_in, null);
        }
        // query params
        if ($process_definition_name !== null) {
            $queryParams['processDefinitionName'] = ObjectSerializer::toQueryValue($process_definition_name, null);
        }
        // query params
        if ($process_definition_name_like !== null) {
            $queryParams['processDefinitionNameLike'] = ObjectSerializer::toQueryValue($process_definition_name_like, null);
        }
        // query params
        if ($process_definition_key_not_in !== null) {
            $queryParams['processDefinitionKeyNotIn'] = ObjectSerializer::toQueryValue($process_definition_key_not_in, null);
        }
        // query params
        if ($process_instance_business_key !== null) {
            $queryParams['processInstanceBusinessKey'] = ObjectSerializer::toQueryValue($process_instance_business_key, null);
        }
        // query params
        if ($process_instance_business_key_in !== null) {
            $queryParams['processInstanceBusinessKeyIn'] = ObjectSerializer::toQueryValue($process_instance_business_key_in, null);
        }
        // query params
        if ($process_instance_business_key_like !== null) {
            $queryParams['processInstanceBusinessKeyLike'] = ObjectSerializer::toQueryValue($process_instance_business_key_like, null);
        }
        // query params
        if ($root_process_instances !== null) {
            $queryParams['rootProcessInstances'] = ObjectSerializer::toQueryValue($root_process_instances, null);
        }
        // query params
        if ($finished !== null) {
            $queryParams['finished'] = ObjectSerializer::toQueryValue($finished, null);
        }
        // query params
        if ($unfinished !== null) {
            $queryParams['unfinished'] = ObjectSerializer::toQueryValue($unfinished, null);
        }
        // query params
        if ($with_incidents !== null) {
            $queryParams['withIncidents'] = ObjectSerializer::toQueryValue($with_incidents, null);
        }
        // query params
        if ($with_root_incidents !== null) {
            $queryParams['withRootIncidents'] = ObjectSerializer::toQueryValue($with_root_incidents, null);
        }
        // query params
        if ($incident_type !== null) {
            $queryParams['incidentType'] = ObjectSerializer::toQueryValue($incident_type, null);
        }
        // query params
        if ($incident_status !== null) {
            $queryParams['incidentStatus'] = ObjectSerializer::toQueryValue($incident_status, null);
        }
        // query params
        if ($incident_message !== null) {
            $queryParams['incidentMessage'] = ObjectSerializer::toQueryValue($incident_message, null);
        }
        // query params
        if ($incident_message_like !== null) {
            $queryParams['incidentMessageLike'] = ObjectSerializer::toQueryValue($incident_message_like, null);
        }
        // query params
        if ($started_before !== null) {
            $queryParams['startedBefore'] = ObjectSerializer::toQueryValue($started_before, 'date-time');
        }
        // query params
        if ($started_after !== null) {
            $queryParams['startedAfter'] = ObjectSerializer::toQueryValue($started_after, 'date-time');
        }
        // query params
        if ($finished_before !== null) {
            $queryParams['finishedBefore'] = ObjectSerializer::toQueryValue($finished_before, 'date-time');
        }
        // query params
        if ($finished_after !== null) {
            $queryParams['finishedAfter'] = ObjectSerializer::toQueryValue($finished_after, 'date-time');
        }
        // query params
        if ($executed_activity_after !== null) {
            $queryParams['executedActivityAfter'] = ObjectSerializer::toQueryValue($executed_activity_after, 'date-time');
        }
        // query params
        if ($executed_activity_before !== null) {
            $queryParams['executedActivityBefore'] = ObjectSerializer::toQueryValue($executed_activity_before, 'date-time');
        }
        // query params
        if ($executed_job_after !== null) {
            $queryParams['executedJobAfter'] = ObjectSerializer::toQueryValue($executed_job_after, 'date-time');
        }
        // query params
        if ($executed_job_before !== null) {
            $queryParams['executedJobBefore'] = ObjectSerializer::toQueryValue($executed_job_before, 'date-time');
        }
        // query params
        if ($started_by !== null) {
            $queryParams['startedBy'] = ObjectSerializer::toQueryValue($started_by, null);
        }
        // query params
        if ($super_process_instance_id !== null) {
            $queryParams['superProcessInstanceId'] = ObjectSerializer::toQueryValue($super_process_instance_id, null);
        }
        // query params
        if ($sub_process_instance_id !== null) {
            $queryParams['subProcessInstanceId'] = ObjectSerializer::toQueryValue($sub_process_instance_id, null);
        }
        // query params
        if ($super_case_instance_id !== null) {
            $queryParams['superCaseInstanceId'] = ObjectSerializer::toQueryValue($super_case_instance_id, null);
        }
        // query params
        if ($sub_case_instance_id !== null) {
            $queryParams['subCaseInstanceId'] = ObjectSerializer::toQueryValue($sub_case_instance_id, null);
        }
        // query params
        if ($case_instance_id !== null) {
            $queryParams['caseInstanceId'] = ObjectSerializer::toQueryValue($case_instance_id, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($executed_activity_id_in !== null) {
            $queryParams['executedActivityIdIn'] = ObjectSerializer::toQueryValue($executed_activity_id_in, null);
        }
        // query params
        if ($active_activity_id_in !== null) {
            $queryParams['activeActivityIdIn'] = ObjectSerializer::toQueryValue($active_activity_id_in, null);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active, null);
        }
        // query params
        if ($suspended !== null) {
            $queryParams['suspended'] = ObjectSerializer::toQueryValue($suspended, null);
        }
        // query params
        if ($completed !== null) {
            $queryParams['completed'] = ObjectSerializer::toQueryValue($completed, null);
        }
        // query params
        if ($externally_terminated !== null) {
            $queryParams['externallyTerminated'] = ObjectSerializer::toQueryValue($externally_terminated, null);
        }
        // query params
        if ($internally_terminated !== null) {
            $queryParams['internallyTerminated'] = ObjectSerializer::toQueryValue($internally_terminated, null);
        }
        // query params
        if ($variables !== null) {
            $queryParams['variables'] = ObjectSerializer::toQueryValue($variables, null);
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            $queryParams['variableNamesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_names_ignore_case, null);
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            $queryParams['variableValuesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_values_ignore_case, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricProcessInstancesCount
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CountResultDto
     */
    public function getHistoricProcessInstancesCount($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        list($response) = $this->getHistoricProcessInstancesCountWithHttpInfo($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);
        return $response;
    }

    /**
     * Operation getHistoricProcessInstancesCountWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricProcessInstancesCountWithHttpInfo($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->getHistoricProcessInstancesCountRequest($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricProcessInstancesCountAsync
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesCountAsync($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        return $this->getHistoricProcessInstancesCountAsyncWithHttpInfo($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricProcessInstancesCountAsyncWithHttpInfo
     *
     * Get List Count
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricProcessInstancesCountAsyncWithHttpInfo($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->getHistoricProcessInstancesCountRequest($process_instance_id, $process_instance_ids, $process_definition_id, $process_definition_key, $process_definition_key_in, $process_definition_name, $process_definition_name_like, $process_definition_key_not_in, $process_instance_business_key, $process_instance_business_key_in, $process_instance_business_key_like, $root_process_instances, $finished, $unfinished, $with_incidents, $with_root_incidents, $incident_type, $incident_status, $incident_message, $incident_message_like, $started_before, $started_after, $finished_before, $finished_after, $executed_activity_after, $executed_activity_before, $executed_job_after, $executed_job_before, $started_by, $super_process_instance_id, $sub_process_instance_id, $super_case_instance_id, $sub_case_instance_id, $case_instance_id, $tenant_id_in, $without_tenant_id, $executed_activity_id_in, $active_activity_id_in, $active, $suspended, $completed, $externally_terminated, $internally_terminated, $variables, $variable_names_ignore_case, $variable_values_ignore_case);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricProcessInstancesCount'
     *
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_instance_ids Filter by process instance ids. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_id Filter by the process definition the instances run on. (optional)
     * @param  string $process_definition_key Filter by the key of the process definition the instances run on. (optional)
     * @param  string $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_definition_name Filter by the name of the process definition the instances run on. (optional)
     * @param  string $process_definition_name_like Filter by process definition names that the parameter is a substring of. (optional)
     * @param  string $process_definition_key_not_in Exclude instances that belong to a set of process definitions. Filter by a comma-separated list of &#x60;Strings&#x60;. (optional)
     * @param  string $process_instance_business_key Filter by process instance business key. (optional)
     * @param  string $process_instance_business_key_in Filter by a list of business keys. A process instance must have one of the given business keys. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $process_instance_business_key_like Filter by process instance business key that the parameter is a substring of. (optional)
     * @param  bool $root_process_instances Restrict the query to all process instances that are top level process instances. (optional)
     * @param  bool $finished Only include finished process instances. This flag includes all process instances that are completed or terminated. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $unfinished Only include unfinished process instances. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_incidents Only include process instances which have an incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $with_root_incidents Only include process instances which have a root incident. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $incident_type Filter by the incident type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types. (optional)
     * @param  string $incident_status Only include process instances which have an incident in status either open or resolved. To get all process instances, use the query parameter withIncidents. (optional)
     * @param  string $incident_message Filter by the incident message. Exact match. (optional)
     * @param  string $incident_message_like Filter by the incident message that the parameter is a substring of. (optional)
     * @param  \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_after Restrict to instances that executed an activity after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_activity_before Restrict to instances that executed an activity before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_after Restrict to instances that executed an job after the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  \DateTime $executed_job_before Restrict to instances that executed an job before the given date (inclusive). By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format &#x60;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSSZ&#x60;, e.g., &#x60;2013-01-23T14:42:45.000+0200&#x60;. (optional)
     * @param  string $started_by Only include process instances that were started by the given user. (optional)
     * @param  string $super_process_instance_id Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id. (optional)
     * @param  string $sub_process_instance_id Restrict query to one process instance that has a sub process instance with the given id. (optional)
     * @param  string $super_case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $sub_case_instance_id Restrict query to one process instance that has a sub case instance with the given id. (optional)
     * @param  string $case_instance_id Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id. (optional)
     * @param  string $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $without_tenant_id Only include historic process instances which belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $executed_activity_id_in Restrict to instances that executed an activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  string $active_activity_id_in Restrict to instances that have an active activity with one of given ids. Filter by a comma-separated list of &#x60;Strings&#x60; (optional)
     * @param  bool $active Restrict to instances that are active. (optional)
     * @param  bool $suspended Restrict to instances that are suspended. (optional)
     * @param  bool $completed Restrict to instances that are completed. (optional)
     * @param  bool $externally_terminated Restrict to instances that are externallyTerminated. (optional)
     * @param  bool $internally_terminated Restrict to instances that are internallyTerminated. (optional)
     * @param  string $variables Only include process instances that have/had variables with certain values. Variable filtering expressions are comma-separated and are structured as follows: A valid parameter value has the form &#x60;key_operator_value&#x60;. &#x60;key&#x60; is the variable name, &#x60;operator&#x60; is the comparison operator to be used and &#x60;value&#x60; the variable value.  **Note:** Values are always treated as String objects on server side.  Valid operator values are: &#x60;eq&#x60; - equal to; &#x60;neq&#x60; - not equal to; &#x60;gt&#x60; - greater than; &#x60;gteq&#x60; - greater than or equal to; &#x60;lt&#x60; - lower than; &#x60;lteq&#x60; - lower than or equal to; &#x60;like&#x60;.  Key and value may not contain underscore or comma characters. (optional)
     * @param  bool $variable_names_ignore_case Match all variable names provided in variables case-insensitively. If set to &#x60;true&#x60; variableName and variablename are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match all variable values provided in variables case-insensitively. If set to &#x60;true&#x60; variableValue and variablevalue are treated as equal. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricProcessInstancesCountRequest($process_instance_id = null, $process_instance_ids = null, $process_definition_id = null, $process_definition_key = null, $process_definition_key_in = null, $process_definition_name = null, $process_definition_name_like = null, $process_definition_key_not_in = null, $process_instance_business_key = null, $process_instance_business_key_in = null, $process_instance_business_key_like = null, $root_process_instances = null, $finished = null, $unfinished = null, $with_incidents = null, $with_root_incidents = null, $incident_type = null, $incident_status = null, $incident_message = null, $incident_message_like = null, $started_before = null, $started_after = null, $finished_before = null, $finished_after = null, $executed_activity_after = null, $executed_activity_before = null, $executed_job_after = null, $executed_job_before = null, $started_by = null, $super_process_instance_id = null, $sub_process_instance_id = null, $super_case_instance_id = null, $sub_case_instance_id = null, $case_instance_id = null, $tenant_id_in = null, $without_tenant_id = null, $executed_activity_id_in = null, $active_activity_id_in = null, $active = null, $suspended = null, $completed = null, $externally_terminated = null, $internally_terminated = null, $variables = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null)
    {

        $resourcePath = '/history/process-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($process_instance_ids !== null) {
            $queryParams['processInstanceIds'] = ObjectSerializer::toQueryValue($process_instance_ids, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($process_definition_key_in !== null) {
            $queryParams['processDefinitionKeyIn'] = ObjectSerializer::toQueryValue($process_definition_key_in, null);
        }
        // query params
        if ($process_definition_name !== null) {
            $queryParams['processDefinitionName'] = ObjectSerializer::toQueryValue($process_definition_name, null);
        }
        // query params
        if ($process_definition_name_like !== null) {
            $queryParams['processDefinitionNameLike'] = ObjectSerializer::toQueryValue($process_definition_name_like, null);
        }
        // query params
        if ($process_definition_key_not_in !== null) {
            $queryParams['processDefinitionKeyNotIn'] = ObjectSerializer::toQueryValue($process_definition_key_not_in, null);
        }
        // query params
        if ($process_instance_business_key !== null) {
            $queryParams['processInstanceBusinessKey'] = ObjectSerializer::toQueryValue($process_instance_business_key, null);
        }
        // query params
        if ($process_instance_business_key_in !== null) {
            $queryParams['processInstanceBusinessKeyIn'] = ObjectSerializer::toQueryValue($process_instance_business_key_in, null);
        }
        // query params
        if ($process_instance_business_key_like !== null) {
            $queryParams['processInstanceBusinessKeyLike'] = ObjectSerializer::toQueryValue($process_instance_business_key_like, null);
        }
        // query params
        if ($root_process_instances !== null) {
            $queryParams['rootProcessInstances'] = ObjectSerializer::toQueryValue($root_process_instances, null);
        }
        // query params
        if ($finished !== null) {
            $queryParams['finished'] = ObjectSerializer::toQueryValue($finished, null);
        }
        // query params
        if ($unfinished !== null) {
            $queryParams['unfinished'] = ObjectSerializer::toQueryValue($unfinished, null);
        }
        // query params
        if ($with_incidents !== null) {
            $queryParams['withIncidents'] = ObjectSerializer::toQueryValue($with_incidents, null);
        }
        // query params
        if ($with_root_incidents !== null) {
            $queryParams['withRootIncidents'] = ObjectSerializer::toQueryValue($with_root_incidents, null);
        }
        // query params
        if ($incident_type !== null) {
            $queryParams['incidentType'] = ObjectSerializer::toQueryValue($incident_type, null);
        }
        // query params
        if ($incident_status !== null) {
            $queryParams['incidentStatus'] = ObjectSerializer::toQueryValue($incident_status, null);
        }
        // query params
        if ($incident_message !== null) {
            $queryParams['incidentMessage'] = ObjectSerializer::toQueryValue($incident_message, null);
        }
        // query params
        if ($incident_message_like !== null) {
            $queryParams['incidentMessageLike'] = ObjectSerializer::toQueryValue($incident_message_like, null);
        }
        // query params
        if ($started_before !== null) {
            $queryParams['startedBefore'] = ObjectSerializer::toQueryValue($started_before, 'date-time');
        }
        // query params
        if ($started_after !== null) {
            $queryParams['startedAfter'] = ObjectSerializer::toQueryValue($started_after, 'date-time');
        }
        // query params
        if ($finished_before !== null) {
            $queryParams['finishedBefore'] = ObjectSerializer::toQueryValue($finished_before, 'date-time');
        }
        // query params
        if ($finished_after !== null) {
            $queryParams['finishedAfter'] = ObjectSerializer::toQueryValue($finished_after, 'date-time');
        }
        // query params
        if ($executed_activity_after !== null) {
            $queryParams['executedActivityAfter'] = ObjectSerializer::toQueryValue($executed_activity_after, 'date-time');
        }
        // query params
        if ($executed_activity_before !== null) {
            $queryParams['executedActivityBefore'] = ObjectSerializer::toQueryValue($executed_activity_before, 'date-time');
        }
        // query params
        if ($executed_job_after !== null) {
            $queryParams['executedJobAfter'] = ObjectSerializer::toQueryValue($executed_job_after, 'date-time');
        }
        // query params
        if ($executed_job_before !== null) {
            $queryParams['executedJobBefore'] = ObjectSerializer::toQueryValue($executed_job_before, 'date-time');
        }
        // query params
        if ($started_by !== null) {
            $queryParams['startedBy'] = ObjectSerializer::toQueryValue($started_by, null);
        }
        // query params
        if ($super_process_instance_id !== null) {
            $queryParams['superProcessInstanceId'] = ObjectSerializer::toQueryValue($super_process_instance_id, null);
        }
        // query params
        if ($sub_process_instance_id !== null) {
            $queryParams['subProcessInstanceId'] = ObjectSerializer::toQueryValue($sub_process_instance_id, null);
        }
        // query params
        if ($super_case_instance_id !== null) {
            $queryParams['superCaseInstanceId'] = ObjectSerializer::toQueryValue($super_case_instance_id, null);
        }
        // query params
        if ($sub_case_instance_id !== null) {
            $queryParams['subCaseInstanceId'] = ObjectSerializer::toQueryValue($sub_case_instance_id, null);
        }
        // query params
        if ($case_instance_id !== null) {
            $queryParams['caseInstanceId'] = ObjectSerializer::toQueryValue($case_instance_id, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($executed_activity_id_in !== null) {
            $queryParams['executedActivityIdIn'] = ObjectSerializer::toQueryValue($executed_activity_id_in, null);
        }
        // query params
        if ($active_activity_id_in !== null) {
            $queryParams['activeActivityIdIn'] = ObjectSerializer::toQueryValue($active_activity_id_in, null);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active, null);
        }
        // query params
        if ($suspended !== null) {
            $queryParams['suspended'] = ObjectSerializer::toQueryValue($suspended, null);
        }
        // query params
        if ($completed !== null) {
            $queryParams['completed'] = ObjectSerializer::toQueryValue($completed, null);
        }
        // query params
        if ($externally_terminated !== null) {
            $queryParams['externallyTerminated'] = ObjectSerializer::toQueryValue($externally_terminated, null);
        }
        // query params
        if ($internally_terminated !== null) {
            $queryParams['internallyTerminated'] = ObjectSerializer::toQueryValue($internally_terminated, null);
        }
        // query params
        if ($variables !== null) {
            $queryParams['variables'] = ObjectSerializer::toQueryValue($variables, null);
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            $queryParams['variableNamesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_names_ignore_case, null);
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            $queryParams['variableValuesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_values_ignore_case, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricProcessInstances
     *
     * Get List (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricProcessInstanceDto[]
     */
    public function queryHistoricProcessInstances($body = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->queryHistoricProcessInstancesWithHttpInfo($body, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation queryHistoricProcessInstancesWithHttpInfo
     *
     * Get List (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricProcessInstanceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricProcessInstancesWithHttpInfo($body = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceDto[]';
        $request = $this->queryHistoricProcessInstancesRequest($body, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricProcessInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricProcessInstancesAsync
     *
     * Get List (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesAsync($body = null, $first_result = null, $max_results = null)
    {
        return $this->queryHistoricProcessInstancesAsyncWithHttpInfo($body, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricProcessInstancesAsyncWithHttpInfo
     *
     * Get List (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesAsyncWithHttpInfo($body = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricProcessInstanceDto[]';
        $request = $this->queryHistoricProcessInstancesRequest($body, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricProcessInstances'
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricProcessInstancesRequest($body = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/process-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricProcessInstancesCount
     *
     * Get List Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CountResultDto
     */
    public function queryHistoricProcessInstancesCount($body = null)
    {
        list($response) = $this->queryHistoricProcessInstancesCountWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryHistoricProcessInstancesCountWithHttpInfo
     *
     * Get List Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricProcessInstancesCountWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->queryHistoricProcessInstancesCountRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricProcessInstancesCountAsync
     *
     * Get List Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesCountAsync($body = null)
    {
        return $this->queryHistoricProcessInstancesCountAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricProcessInstancesCountAsyncWithHttpInfo
     *
     * Get List Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricProcessInstancesCountAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->queryHistoricProcessInstancesCountRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricProcessInstancesCount'
     *
     * @param  \Swagger\Client\Model\HistoricProcessInstanceQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricProcessInstancesCountRequest($body = null)
    {

        $resourcePath = '/history/process-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setRemovalTimeAsync
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\BatchDto
     */
    public function setRemovalTimeAsync($body = null)
    {
        list($response) = $this->setRemovalTimeAsyncWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation setRemovalTimeAsyncWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\BatchDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function setRemovalTimeAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->setRemovalTimeAsyncRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\BatchDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setRemovalTimeAsyncAsync
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncAsync($body = null)
    {
        return $this->setRemovalTimeAsyncAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setRemovalTimeAsyncAsyncWithHttpInfo
     *
     * Set Removal Time Async (POST)
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setRemovalTimeAsyncAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\BatchDto';
        $request = $this->setRemovalTimeAsyncRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setRemovalTimeAsync'
     *
     * @param  \Swagger\Client\Model\SetRemovalTimeToHistoricProcessInstancesDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setRemovalTimeAsyncRequest($body = null)
    {

        $resourcePath = '/history/process-instance/set-removal-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
