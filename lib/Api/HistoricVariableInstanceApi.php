<?php
/**
 * HistoricVariableInstanceApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * HistoricVariableInstanceApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoricVariableInstanceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteHistoricVariableInstance
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteHistoricVariableInstance($id)
    {
        $this->deleteHistoricVariableInstanceWithHttpInfo($id);
    }

    /**
     * Operation deleteHistoricVariableInstanceWithHttpInfo
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteHistoricVariableInstanceWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHistoricVariableInstanceRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteHistoricVariableInstanceAsync
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstanceAsync($id)
    {
        return $this->deleteHistoricVariableInstanceAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteHistoricVariableInstanceAsyncWithHttpInfo
     *
     * Delete Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteHistoricVariableInstanceAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteHistoricVariableInstanceRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteHistoricVariableInstance'
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteHistoricVariableInstanceRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteHistoricVariableInstance'
            );
        }

        $resourcePath = '/history/variable-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstance
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricVariableInstanceDto
     */
    public function getHistoricVariableInstance($id, $deserialize_values = null)
    {
        list($response) = $this->getHistoricVariableInstanceWithHttpInfo($id, $deserialize_values);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstanceWithHttpInfo
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricVariableInstanceDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstanceWithHttpInfo($id, $deserialize_values = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricVariableInstanceDto';
        $request = $this->getHistoricVariableInstanceRequest($id, $deserialize_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricVariableInstanceDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstanceAsync
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceAsync($id, $deserialize_values = null)
    {
        return $this->getHistoricVariableInstanceAsyncWithHttpInfo($id, $deserialize_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstanceAsyncWithHttpInfo
     *
     * Get Variable Instance
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceAsyncWithHttpInfo($id, $deserialize_values = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricVariableInstanceDto';
        $request = $this->getHistoricVariableInstanceRequest($id, $deserialize_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstance'
     *
     * @param  string $id The id of the variable instance. (required)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricVariableInstanceRequest($id, $deserialize_values = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricVariableInstance'
            );
        }

        $resourcePath = '/history/variable-instance/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($deserialize_values !== null) {
            $queryParams['deserializeValues'] = ObjectSerializer::toQueryValue($deserialize_values, null);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstanceBinary
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getHistoricVariableInstanceBinary($id)
    {
        list($response) = $this->getHistoricVariableInstanceBinaryWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstanceBinaryWithHttpInfo
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstanceBinaryWithHttpInfo($id)
    {
        $returnType = 'string';
        $request = $this->getHistoricVariableInstanceBinaryRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstanceBinaryAsync
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceBinaryAsync($id)
    {
        return $this->getHistoricVariableInstanceBinaryAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstanceBinaryAsyncWithHttpInfo
     *
     * Get Variable Instance (Binary)
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstanceBinaryAsyncWithHttpInfo($id)
    {
        $returnType = 'string';
        $request = $this->getHistoricVariableInstanceBinaryRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstanceBinary'
     *
     * @param  string $id The id of the variable instance. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricVariableInstanceBinaryRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricVariableInstanceBinary'
            );
        }

        $resourcePath = '/history/variable-instance/{id}/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', '*/*', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', '*/*', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstances
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricVariableInstanceDto[]
     */
    public function getHistoricVariableInstances($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        list($response) = $this->getHistoricVariableInstancesWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstancesWithHttpInfo
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricVariableInstanceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstancesWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricVariableInstanceDto[]';
        $request = $this->getHistoricVariableInstancesRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricVariableInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstancesAsync
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesAsync($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        return $this->getHistoricVariableInstancesAsyncWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstancesAsyncWithHttpInfo
     *
     * Get Variable Instances
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesAsyncWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricVariableInstanceDto[]';
        $request = $this->getHistoricVariableInstancesRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in, $sort_by, $sort_order, $first_result, $max_results, $deserialize_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstances'
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricVariableInstancesRequest($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {

        $resourcePath = '/history/variable-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($variable_name !== null) {
            $queryParams['variableName'] = ObjectSerializer::toQueryValue($variable_name, null);
        }
        // query params
        if ($variable_name_like !== null) {
            $queryParams['variableNameLike'] = ObjectSerializer::toQueryValue($variable_name_like, null);
        }
        // query params
        if ($variable_value !== null) {
            $queryParams['variableValue'] = ObjectSerializer::toQueryValue($variable_value, null);
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            $queryParams['variableNamesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_names_ignore_case, null);
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            $queryParams['variableValuesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_values_ignore_case, null);
        }
        // query params
        if ($variable_type_in !== null) {
            $queryParams['variableTypeIn'] = ObjectSerializer::toQueryValue($variable_type_in, null);
        }
        // query params
        if ($include_deleted !== null) {
            $queryParams['includeDeleted'] = ObjectSerializer::toQueryValue($include_deleted, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($process_instance_id_in !== null) {
            $queryParams['processInstanceIdIn'] = ObjectSerializer::toQueryValue($process_instance_id_in, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($execution_id_in !== null) {
            $queryParams['executionIdIn'] = ObjectSerializer::toQueryValue($execution_id_in, null);
        }
        // query params
        if ($case_instance_id !== null) {
            $queryParams['caseInstanceId'] = ObjectSerializer::toQueryValue($case_instance_id, null);
        }
        // query params
        if ($case_execution_id_in !== null) {
            $queryParams['caseExecutionIdIn'] = ObjectSerializer::toQueryValue($case_execution_id_in, null);
        }
        // query params
        if ($case_activity_id_in !== null) {
            $queryParams['caseActivityIdIn'] = ObjectSerializer::toQueryValue($case_activity_id_in, null);
        }
        // query params
        if ($task_id_in !== null) {
            $queryParams['taskIdIn'] = ObjectSerializer::toQueryValue($task_id_in, null);
        }
        // query params
        if ($activity_instance_id_in !== null) {
            $queryParams['activityInstanceIdIn'] = ObjectSerializer::toQueryValue($activity_instance_id_in, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($variable_name_in !== null) {
            $queryParams['variableNameIn'] = ObjectSerializer::toQueryValue($variable_name_in, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }
        // query params
        if ($deserialize_values !== null) {
            $queryParams['deserializeValues'] = ObjectSerializer::toQueryValue($deserialize_values, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricVariableInstancesCount
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CountResultDto
     */
    public function getHistoricVariableInstancesCount($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null)
    {
        list($response) = $this->getHistoricVariableInstancesCountWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in);
        return $response;
    }

    /**
     * Operation getHistoricVariableInstancesCountWithHttpInfo
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricVariableInstancesCountWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->getHistoricVariableInstancesCountRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricVariableInstancesCountAsync
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesCountAsync($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null)
    {
        return $this->getHistoricVariableInstancesCountAsyncWithHttpInfo($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricVariableInstancesCountAsyncWithHttpInfo
     *
     * Get Variable Instance Count
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricVariableInstancesCountAsyncWithHttpInfo($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->getHistoricVariableInstancesCountRequest($variable_name, $variable_name_like, $variable_value, $variable_names_ignore_case, $variable_values_ignore_case, $variable_type_in, $include_deleted, $process_instance_id, $process_instance_id_in, $process_definition_id, $process_definition_key, $execution_id_in, $case_instance_id, $case_execution_id_in, $case_activity_id_in, $task_id_in, $activity_instance_id_in, $tenant_id_in, $without_tenant_id, $variable_name_in);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricVariableInstancesCount'
     *
     * @param  string $variable_name Filter by variable name. (optional)
     * @param  string $variable_name_like Restrict to variables with a name like the parameter. (optional)
     * @param  object $variable_value Filter by variable value. Is treated as a &#x60;String&#x60; object on server side. (optional)
     * @param  bool $variable_names_ignore_case Match the variable name provided in &#x60;variableName&#x60; and &#x60;variableNameLike&#x60; case- insensitively. If set to &#x60;true&#x60; **variableName** and **variablename** are treated as equal. (optional)
     * @param  bool $variable_values_ignore_case Match the variable value provided in &#x60;variableValue&#x60; case-insensitively. If set to &#x60;true&#x60; **variableValue** and **variablevalue** are treated as equal. (optional)
     * @param  string $variable_type_in Only include historic variable instances which belong to one of the passed and comma- separated variable types. A list of all supported variable types can be found [here](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#supported-variable-values). **Note:** All non-primitive variables are associated with the type &#x27;serializable&#x27;. (optional)
     * @param  bool $include_deleted Include variables that has already been deleted during the execution. (optional)
     * @param  string $process_instance_id Filter by the process instance the variable belongs to. (optional)
     * @param  string $process_instance_id_in Only include historic variable instances which belong to one of the passed and comma-separated process instance ids. (optional)
     * @param  string $process_definition_id Filter by the process definition the variable belongs to. (optional)
     * @param  string $process_definition_key Filter by a key of the process definition the variable belongs to. (optional)
     * @param  string $execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated execution ids. (optional)
     * @param  string $case_instance_id Filter by the case instance the variable belongs to. (optional)
     * @param  string $case_execution_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case execution ids. (optional)
     * @param  string $case_activity_id_in Only include historic variable instances which belong to one of the passed and and comma-separated case activity ids. (optional)
     * @param  string $task_id_in Only include historic variable instances which belong to one of the passed and and comma-separated task ids. (optional)
     * @param  string $activity_instance_id_in Only include historic variable instances which belong to one of the passed and and comma-separated activity instance ids. (optional)
     * @param  string $tenant_id_in Only include historic variable instances which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic variable instances that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $variable_name_in Only include historic variable instances which belong to one of the passed and comma-separated variable names. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricVariableInstancesCountRequest($variable_name = null, $variable_name_like = null, $variable_value = null, $variable_names_ignore_case = null, $variable_values_ignore_case = null, $variable_type_in = null, $include_deleted = null, $process_instance_id = null, $process_instance_id_in = null, $process_definition_id = null, $process_definition_key = null, $execution_id_in = null, $case_instance_id = null, $case_execution_id_in = null, $case_activity_id_in = null, $task_id_in = null, $activity_instance_id_in = null, $tenant_id_in = null, $without_tenant_id = null, $variable_name_in = null)
    {

        $resourcePath = '/history/variable-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($variable_name !== null) {
            $queryParams['variableName'] = ObjectSerializer::toQueryValue($variable_name, null);
        }
        // query params
        if ($variable_name_like !== null) {
            $queryParams['variableNameLike'] = ObjectSerializer::toQueryValue($variable_name_like, null);
        }
        // query params
        if ($variable_value !== null) {
            $queryParams['variableValue'] = ObjectSerializer::toQueryValue($variable_value, null);
        }
        // query params
        if ($variable_names_ignore_case !== null) {
            $queryParams['variableNamesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_names_ignore_case, null);
        }
        // query params
        if ($variable_values_ignore_case !== null) {
            $queryParams['variableValuesIgnoreCase'] = ObjectSerializer::toQueryValue($variable_values_ignore_case, null);
        }
        // query params
        if ($variable_type_in !== null) {
            $queryParams['variableTypeIn'] = ObjectSerializer::toQueryValue($variable_type_in, null);
        }
        // query params
        if ($include_deleted !== null) {
            $queryParams['includeDeleted'] = ObjectSerializer::toQueryValue($include_deleted, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($process_instance_id_in !== null) {
            $queryParams['processInstanceIdIn'] = ObjectSerializer::toQueryValue($process_instance_id_in, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($execution_id_in !== null) {
            $queryParams['executionIdIn'] = ObjectSerializer::toQueryValue($execution_id_in, null);
        }
        // query params
        if ($case_instance_id !== null) {
            $queryParams['caseInstanceId'] = ObjectSerializer::toQueryValue($case_instance_id, null);
        }
        // query params
        if ($case_execution_id_in !== null) {
            $queryParams['caseExecutionIdIn'] = ObjectSerializer::toQueryValue($case_execution_id_in, null);
        }
        // query params
        if ($case_activity_id_in !== null) {
            $queryParams['caseActivityIdIn'] = ObjectSerializer::toQueryValue($case_activity_id_in, null);
        }
        // query params
        if ($task_id_in !== null) {
            $queryParams['taskIdIn'] = ObjectSerializer::toQueryValue($task_id_in, null);
        }
        // query params
        if ($activity_instance_id_in !== null) {
            $queryParams['activityInstanceIdIn'] = ObjectSerializer::toQueryValue($activity_instance_id_in, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($variable_name_in !== null) {
            $queryParams['variableNameIn'] = ObjectSerializer::toQueryValue($variable_name_in, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricVariableInstances
     *
     * Get Variable Instances (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\HistoricVariableInstanceDto[]
     */
    public function queryHistoricVariableInstances($body = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        list($response) = $this->queryHistoricVariableInstancesWithHttpInfo($body, $first_result, $max_results, $deserialize_values);
        return $response;
    }

    /**
     * Operation queryHistoricVariableInstancesWithHttpInfo
     *
     * Get Variable Instances (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\HistoricVariableInstanceDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricVariableInstancesWithHttpInfo($body = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricVariableInstanceDto[]';
        $request = $this->queryHistoricVariableInstancesRequest($body, $first_result, $max_results, $deserialize_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\HistoricVariableInstanceDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricVariableInstancesAsync
     *
     * Get Variable Instances (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesAsync($body = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        return $this->queryHistoricVariableInstancesAsyncWithHttpInfo($body, $first_result, $max_results, $deserialize_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricVariableInstancesAsyncWithHttpInfo
     *
     * Get Variable Instances (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesAsyncWithHttpInfo($body = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {
        $returnType = '\Swagger\Client\Model\HistoricVariableInstanceDto[]';
        $request = $this->queryHistoricVariableInstancesRequest($body, $first_result, $max_results, $deserialize_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricVariableInstances'
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     * @param  bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default &#x60;true&#x60;).  If set to &#x60;true&#x60;, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson&#x27;s](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API&#x27;s classpath.  If set to &#x60;false&#x60;, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.  **Note:** While &#x60;true&#x60; is the default value for reasons of backward compatibility, we recommend setting this parameter to &#x60;false&#x60; when developing web applications that are independent of the Java process applications deployed to the engine. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricVariableInstancesRequest($body = null, $first_result = null, $max_results = null, $deserialize_values = null)
    {

        $resourcePath = '/history/variable-instance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }
        // query params
        if ($deserialize_values !== null) {
            $queryParams['deserializeValues'] = ObjectSerializer::toQueryValue($deserialize_values, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricVariableInstancesCount
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CountResultDto
     */
    public function queryHistoricVariableInstancesCount($body = null)
    {
        list($response) = $this->queryHistoricVariableInstancesCountWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryHistoricVariableInstancesCountWithHttpInfo
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricVariableInstancesCountWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->queryHistoricVariableInstancesCountRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricVariableInstancesCountAsync
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesCountAsync($body = null)
    {
        return $this->queryHistoricVariableInstancesCountAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricVariableInstancesCountAsyncWithHttpInfo
     *
     * Get Variable Instance Count (POST)
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricVariableInstancesCountAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Swagger\Client\Model\CountResultDto';
        $request = $this->queryHistoricVariableInstancesCountRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricVariableInstancesCount'
     *
     * @param  \Swagger\Client\Model\HistoricVariableInstanceQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricVariableInstancesCountRequest($body = null)
    {

        $resourcePath = '/history/variable-instance/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
