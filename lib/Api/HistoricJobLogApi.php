<?php
/**
 * HistoricJobLogApi
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Camunda\Client\ApiException;
use Camunda\Client\Configuration;
use Camunda\Client\HeaderSelector;
use Camunda\Client\ObjectSerializer;

/**
 * HistoricJobLogApi Class Doc Comment
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class HistoricJobLogApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getHistoricJobLog
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Camunda\Client\Model\HistoricJobLogDto
     */
    public function getHistoricJobLog($id)
    {
        list($response) = $this->getHistoricJobLogWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getHistoricJobLogWithHttpInfo
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Camunda\Client\Model\HistoricJobLogDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricJobLogWithHttpInfo($id)
    {
        $returnType = '\Camunda\Client\Model\HistoricJobLogDto';
        $request = $this->getHistoricJobLogRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\HistoricJobLogDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricJobLogAsync
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogAsync($id)
    {
        return $this->getHistoricJobLogAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricJobLogAsyncWithHttpInfo
     *
     * Get Job Log
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogAsyncWithHttpInfo($id)
    {
        $returnType = '\Camunda\Client\Model\HistoricJobLogDto';
        $request = $this->getHistoricJobLogRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricJobLog'
     *
     * @param  string $id The id of the log entry. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricJobLogRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getHistoricJobLog'
            );
        }

        $resourcePath = '/history/job-log/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricJobLogs
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Camunda\Client\Model\HistoricJobLogDto[]
     */
    public function getHistoricJobLogs($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->getHistoricJobLogsWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation getHistoricJobLogsWithHttpInfo
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Camunda\Client\Model\HistoricJobLogDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricJobLogsWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Camunda\Client\Model\HistoricJobLogDto[]';
        $request = $this->getHistoricJobLogsRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\HistoricJobLogDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricJobLogsAsync
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsAsync($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        return $this->getHistoricJobLogsAsyncWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricJobLogsAsyncWithHttpInfo
     *
     * Get Job Logs
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsAsyncWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Camunda\Client\Model\HistoricJobLogDto[]';
        $request = $this->getHistoricJobLogsRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log, $sort_by, $sort_order, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricJobLogs'
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $sort_by Sort the results lexicographically by a given criterion. Must be used in conjunction with the sortOrder parameter. (optional)
     * @param  string $sort_order Sort the results in a given order. Values may be asc for ascending order or desc for descending order. Must be used in conjunction with the sortBy parameter. (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricJobLogsRequest($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null, $sort_by = null, $sort_order = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/job-log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($log_id !== null) {
            $queryParams['logId'] = ObjectSerializer::toQueryValue($log_id, null);
        }
        // query params
        if ($job_id !== null) {
            $queryParams['jobId'] = ObjectSerializer::toQueryValue($job_id, null);
        }
        // query params
        if ($job_exception_message !== null) {
            $queryParams['jobExceptionMessage'] = ObjectSerializer::toQueryValue($job_exception_message, null);
        }
        // query params
        if ($job_definition_id !== null) {
            $queryParams['jobDefinitionId'] = ObjectSerializer::toQueryValue($job_definition_id, null);
        }
        // query params
        if ($job_definition_type !== null) {
            $queryParams['jobDefinitionType'] = ObjectSerializer::toQueryValue($job_definition_type, null);
        }
        // query params
        if ($job_definition_configuration !== null) {
            $queryParams['jobDefinitionConfiguration'] = ObjectSerializer::toQueryValue($job_definition_configuration, null);
        }
        // query params
        if ($activity_id_in !== null) {
            $queryParams['activityIdIn'] = ObjectSerializer::toQueryValue($activity_id_in, null);
        }
        // query params
        if ($failed_activity_id_in !== null) {
            $queryParams['failedActivityIdIn'] = ObjectSerializer::toQueryValue($failed_activity_id_in, null);
        }
        // query params
        if ($execution_id_in !== null) {
            $queryParams['executionIdIn'] = ObjectSerializer::toQueryValue($execution_id_in, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($deployment_id !== null) {
            $queryParams['deploymentId'] = ObjectSerializer::toQueryValue($deployment_id, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname, null);
        }
        // query params
        if ($job_priority_lower_than_or_equals !== null) {
            $queryParams['jobPriorityLowerThanOrEquals'] = ObjectSerializer::toQueryValue($job_priority_lower_than_or_equals, 'int64');
        }
        // query params
        if ($job_priority_higher_than_or_equals !== null) {
            $queryParams['jobPriorityHigherThanOrEquals'] = ObjectSerializer::toQueryValue($job_priority_higher_than_or_equals, 'int64');
        }
        // query params
        if ($creation_log !== null) {
            $queryParams['creationLog'] = ObjectSerializer::toQueryValue($creation_log, null);
        }
        // query params
        if ($failure_log !== null) {
            $queryParams['failureLog'] = ObjectSerializer::toQueryValue($failure_log, null);
        }
        // query params
        if ($success_log !== null) {
            $queryParams['successLog'] = ObjectSerializer::toQueryValue($success_log, null);
        }
        // query params
        if ($deletion_log !== null) {
            $queryParams['deletionLog'] = ObjectSerializer::toQueryValue($deletion_log, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }
        // query params
        if ($sort_order !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sort_order, null);
        }
        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getHistoricJobLogsCount
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Camunda\Client\Model\CountResultDto
     */
    public function getHistoricJobLogsCount($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        list($response) = $this->getHistoricJobLogsCountWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log);
        return $response;
    }

    /**
     * Operation getHistoricJobLogsCountWithHttpInfo
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Camunda\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getHistoricJobLogsCountWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        $returnType = '\Camunda\Client\Model\CountResultDto';
        $request = $this->getHistoricJobLogsCountRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getHistoricJobLogsCountAsync
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsCountAsync($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        return $this->getHistoricJobLogsCountAsyncWithHttpInfo($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getHistoricJobLogsCountAsyncWithHttpInfo
     *
     * Get Job Log Count
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getHistoricJobLogsCountAsyncWithHttpInfo($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {
        $returnType = '\Camunda\Client\Model\CountResultDto';
        $request = $this->getHistoricJobLogsCountRequest($log_id, $job_id, $job_exception_message, $job_definition_id, $job_definition_type, $job_definition_configuration, $activity_id_in, $failed_activity_id_in, $execution_id_in, $process_instance_id, $process_definition_id, $process_definition_key, $deployment_id, $tenant_id_in, $without_tenant_id, $hostname, $job_priority_lower_than_or_equals, $job_priority_higher_than_or_equals, $creation_log, $failure_log, $success_log, $deletion_log);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getHistoricJobLogsCount'
     *
     * @param  string $log_id Filter by historic job log id. (optional)
     * @param  string $job_id Filter by job id. (optional)
     * @param  string $job_exception_message Filter by job exception message. (optional)
     * @param  string $job_definition_id Filter by job definition id. (optional)
     * @param  string $job_definition_type Filter by job definition type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job definition types. (optional)
     * @param  string $job_definition_configuration Filter by job definition configuration. (optional)
     * @param  string $activity_id_in Only include historic job logs which belong to one of the passed activity ids. (optional)
     * @param  string $failed_activity_id_in Only include historic job logs which belong to failures of one of the passed activity ids. (optional)
     * @param  string $execution_id_in Only include historic job logs which belong to one of the passed execution ids. (optional)
     * @param  string $process_instance_id Filter by process instance id. (optional)
     * @param  string $process_definition_id Filter by process definition id. (optional)
     * @param  string $process_definition_key Filter by process definition key. (optional)
     * @param  string $deployment_id Filter by deployment id. (optional)
     * @param  string $tenant_id_in Only include historic job log entries which belong to one of the passed and comma- separated tenant ids. (optional)
     * @param  bool $without_tenant_id Only include historic job log entries that belong to no tenant. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  string $hostname Filter by hostname. (optional)
     * @param  int $job_priority_lower_than_or_equals Only include logs for which the associated job had a priority lower than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  int $job_priority_higher_than_or_equals Only include logs for which the associated job had a priority higher than or equal to the given value. Value must be a valid &#x60;long&#x60; value. (optional)
     * @param  bool $creation_log Only include creation logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $failure_log Only include failure logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $success_log Only include success logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     * @param  bool $deletion_log Only include deletion logs. Value may only be &#x60;true&#x60;, as &#x60;false&#x60; is the default behavior. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getHistoricJobLogsCountRequest($log_id = null, $job_id = null, $job_exception_message = null, $job_definition_id = null, $job_definition_type = null, $job_definition_configuration = null, $activity_id_in = null, $failed_activity_id_in = null, $execution_id_in = null, $process_instance_id = null, $process_definition_id = null, $process_definition_key = null, $deployment_id = null, $tenant_id_in = null, $without_tenant_id = null, $hostname = null, $job_priority_lower_than_or_equals = null, $job_priority_higher_than_or_equals = null, $creation_log = null, $failure_log = null, $success_log = null, $deletion_log = null)
    {

        $resourcePath = '/history/job-log/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($log_id !== null) {
            $queryParams['logId'] = ObjectSerializer::toQueryValue($log_id, null);
        }
        // query params
        if ($job_id !== null) {
            $queryParams['jobId'] = ObjectSerializer::toQueryValue($job_id, null);
        }
        // query params
        if ($job_exception_message !== null) {
            $queryParams['jobExceptionMessage'] = ObjectSerializer::toQueryValue($job_exception_message, null);
        }
        // query params
        if ($job_definition_id !== null) {
            $queryParams['jobDefinitionId'] = ObjectSerializer::toQueryValue($job_definition_id, null);
        }
        // query params
        if ($job_definition_type !== null) {
            $queryParams['jobDefinitionType'] = ObjectSerializer::toQueryValue($job_definition_type, null);
        }
        // query params
        if ($job_definition_configuration !== null) {
            $queryParams['jobDefinitionConfiguration'] = ObjectSerializer::toQueryValue($job_definition_configuration, null);
        }
        // query params
        if ($activity_id_in !== null) {
            $queryParams['activityIdIn'] = ObjectSerializer::toQueryValue($activity_id_in, null);
        }
        // query params
        if ($failed_activity_id_in !== null) {
            $queryParams['failedActivityIdIn'] = ObjectSerializer::toQueryValue($failed_activity_id_in, null);
        }
        // query params
        if ($execution_id_in !== null) {
            $queryParams['executionIdIn'] = ObjectSerializer::toQueryValue($execution_id_in, null);
        }
        // query params
        if ($process_instance_id !== null) {
            $queryParams['processInstanceId'] = ObjectSerializer::toQueryValue($process_instance_id, null);
        }
        // query params
        if ($process_definition_id !== null) {
            $queryParams['processDefinitionId'] = ObjectSerializer::toQueryValue($process_definition_id, null);
        }
        // query params
        if ($process_definition_key !== null) {
            $queryParams['processDefinitionKey'] = ObjectSerializer::toQueryValue($process_definition_key, null);
        }
        // query params
        if ($deployment_id !== null) {
            $queryParams['deploymentId'] = ObjectSerializer::toQueryValue($deployment_id, null);
        }
        // query params
        if ($tenant_id_in !== null) {
            $queryParams['tenantIdIn'] = ObjectSerializer::toQueryValue($tenant_id_in, null);
        }
        // query params
        if ($without_tenant_id !== null) {
            $queryParams['withoutTenantId'] = ObjectSerializer::toQueryValue($without_tenant_id, null);
        }
        // query params
        if ($hostname !== null) {
            $queryParams['hostname'] = ObjectSerializer::toQueryValue($hostname, null);
        }
        // query params
        if ($job_priority_lower_than_or_equals !== null) {
            $queryParams['jobPriorityLowerThanOrEquals'] = ObjectSerializer::toQueryValue($job_priority_lower_than_or_equals, 'int64');
        }
        // query params
        if ($job_priority_higher_than_or_equals !== null) {
            $queryParams['jobPriorityHigherThanOrEquals'] = ObjectSerializer::toQueryValue($job_priority_higher_than_or_equals, 'int64');
        }
        // query params
        if ($creation_log !== null) {
            $queryParams['creationLog'] = ObjectSerializer::toQueryValue($creation_log, null);
        }
        // query params
        if ($failure_log !== null) {
            $queryParams['failureLog'] = ObjectSerializer::toQueryValue($failure_log, null);
        }
        // query params
        if ($success_log !== null) {
            $queryParams['successLog'] = ObjectSerializer::toQueryValue($success_log, null);
        }
        // query params
        if ($deletion_log !== null) {
            $queryParams['deletionLog'] = ObjectSerializer::toQueryValue($deletion_log, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStacktraceHistoricJobLog
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getStacktraceHistoricJobLog($id)
    {
        $this->getStacktraceHistoricJobLogWithHttpInfo($id);
    }

    /**
     * Operation getStacktraceHistoricJobLogWithHttpInfo
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getStacktraceHistoricJobLogWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->getStacktraceHistoricJobLogRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStacktraceHistoricJobLogAsync
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStacktraceHistoricJobLogAsync($id)
    {
        return $this->getStacktraceHistoricJobLogAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStacktraceHistoricJobLogAsyncWithHttpInfo
     *
     * Get Job Log Exception Stacktrace
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStacktraceHistoricJobLogAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->getStacktraceHistoricJobLogRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStacktraceHistoricJobLog'
     *
     * @param  string $id The id of the historic job log to get the exception stacktrace for. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getStacktraceHistoricJobLogRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getStacktraceHistoricJobLog'
            );
        }

        $resourcePath = '/history/job-log/{id}/stacktrace';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/plain', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/plain', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricJobLogs
     *
     * Get Job Logs (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Camunda\Client\Model\HistoricJobLogDto[]
     */
    public function queryHistoricJobLogs($body = null, $first_result = null, $max_results = null)
    {
        list($response) = $this->queryHistoricJobLogsWithHttpInfo($body, $first_result, $max_results);
        return $response;
    }

    /**
     * Operation queryHistoricJobLogsWithHttpInfo
     *
     * Get Job Logs (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Camunda\Client\Model\HistoricJobLogDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricJobLogsWithHttpInfo($body = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Camunda\Client\Model\HistoricJobLogDto[]';
        $request = $this->queryHistoricJobLogsRequest($body, $first_result, $max_results);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\HistoricJobLogDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricJobLogsAsync
     *
     * Get Job Logs (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsAsync($body = null, $first_result = null, $max_results = null)
    {
        return $this->queryHistoricJobLogsAsyncWithHttpInfo($body, $first_result, $max_results)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricJobLogsAsyncWithHttpInfo
     *
     * Get Job Logs (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsAsyncWithHttpInfo($body = null, $first_result = null, $max_results = null)
    {
        $returnType = '\Camunda\Client\Model\HistoricJobLogDto[]';
        $request = $this->queryHistoricJobLogsRequest($body, $first_result, $max_results);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricJobLogs'
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     * @param  int $first_result Pagination of results. Specifies the index of the first result to return. (optional)
     * @param  int $max_results Pagination of results. Specifies the maximum number of results to return. Will return less results if there are no more results left. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricJobLogsRequest($body = null, $first_result = null, $max_results = null)
    {

        $resourcePath = '/history/job-log';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($first_result !== null) {
            $queryParams['firstResult'] = ObjectSerializer::toQueryValue($first_result, null);
        }
        // query params
        if ($max_results !== null) {
            $queryParams['maxResults'] = ObjectSerializer::toQueryValue($max_results, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryHistoricJobLogsCount
     *
     * Get Job Log Count (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body body (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Camunda\Client\Model\CountResultDto
     */
    public function queryHistoricJobLogsCount($body = null)
    {
        list($response) = $this->queryHistoricJobLogsCountWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation queryHistoricJobLogsCountWithHttpInfo
     *
     * Get Job Log Count (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     *
     * @throws \Camunda\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Camunda\Client\Model\CountResultDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryHistoricJobLogsCountWithHttpInfo($body = null)
    {
        $returnType = '\Camunda\Client\Model\CountResultDto';
        $request = $this->queryHistoricJobLogsCountRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\CountResultDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Camunda\Client\Model\ExceptionDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryHistoricJobLogsCountAsync
     *
     * Get Job Log Count (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsCountAsync($body = null)
    {
        return $this->queryHistoricJobLogsCountAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryHistoricJobLogsCountAsyncWithHttpInfo
     *
     * Get Job Log Count (POST)
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryHistoricJobLogsCountAsyncWithHttpInfo($body = null)
    {
        $returnType = '\Camunda\Client\Model\CountResultDto';
        $request = $this->queryHistoricJobLogsCountRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryHistoricJobLogsCount'
     *
     * @param  \Camunda\Client\Model\HistoricJobLogQueryDto $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryHistoricJobLogsCountRequest($body = null)
    {

        $resourcePath = '/history/job-log/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
