<?php
/**
 * DeploymentWithDefinitionsDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeploymentWithDefinitionsDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeploymentWithDefinitionsDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeploymentWithDefinitionsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deployed_process_definitions' => 'map[string,\Swagger\Client\Model\ProcessDefinitionDto]',
        'deployed_decision_definitions' => 'map[string,\Swagger\Client\Model\DecisionDefinitionDto]',
        'deployed_decision_requirements_definitions' => 'map[string,\Swagger\Client\Model\DecisionRequirementsDefinitionDto]',
        'deployed_case_definitions' => 'map[string,\Swagger\Client\Model\CaseDefinitionDto]',
        'links' => '\Swagger\Client\Model\AtomLink[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deployed_process_definitions' => null,
        'deployed_decision_definitions' => null,
        'deployed_decision_requirements_definitions' => null,
        'deployed_case_definitions' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deployed_process_definitions' => 'deployedProcessDefinitions',
        'deployed_decision_definitions' => 'deployedDecisionDefinitions',
        'deployed_decision_requirements_definitions' => 'deployedDecisionRequirementsDefinitions',
        'deployed_case_definitions' => 'deployedCaseDefinitions',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deployed_process_definitions' => 'setDeployedProcessDefinitions',
        'deployed_decision_definitions' => 'setDeployedDecisionDefinitions',
        'deployed_decision_requirements_definitions' => 'setDeployedDecisionRequirementsDefinitions',
        'deployed_case_definitions' => 'setDeployedCaseDefinitions',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deployed_process_definitions' => 'getDeployedProcessDefinitions',
        'deployed_decision_definitions' => 'getDeployedDecisionDefinitions',
        'deployed_decision_requirements_definitions' => 'getDeployedDecisionRequirementsDefinitions',
        'deployed_case_definitions' => 'getDeployedCaseDefinitions',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deployed_process_definitions'] = isset($data['deployed_process_definitions']) ? $data['deployed_process_definitions'] : null;
        $this->container['deployed_decision_definitions'] = isset($data['deployed_decision_definitions']) ? $data['deployed_decision_definitions'] : null;
        $this->container['deployed_decision_requirements_definitions'] = isset($data['deployed_decision_requirements_definitions']) ? $data['deployed_decision_requirements_definitions'] : null;
        $this->container['deployed_case_definitions'] = isset($data['deployed_case_definitions']) ? $data['deployed_case_definitions'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deployed_process_definitions
     *
     * @return map[string,\Swagger\Client\Model\ProcessDefinitionDto]
     */
    public function getDeployedProcessDefinitions()
    {
        return $this->container['deployed_process_definitions'];
    }

    /**
     * Sets deployed_process_definitions
     *
     * @param map[string,\Swagger\Client\Model\ProcessDefinitionDto] $deployed_process_definitions A JSON Object containing a property for each of the process definitions, which are successfully deployed with that deployment. The key is the process definition id, the value is a JSON Object corresponding to the process definition.
     *
     * @return $this
     */
    public function setDeployedProcessDefinitions($deployed_process_definitions)
    {
        $this->container['deployed_process_definitions'] = $deployed_process_definitions;

        return $this;
    }

    /**
     * Gets deployed_decision_definitions
     *
     * @return map[string,\Swagger\Client\Model\DecisionDefinitionDto]
     */
    public function getDeployedDecisionDefinitions()
    {
        return $this->container['deployed_decision_definitions'];
    }

    /**
     * Sets deployed_decision_definitions
     *
     * @param map[string,\Swagger\Client\Model\DecisionDefinitionDto] $deployed_decision_definitions A JSON Object containing a property for each of the decision definitions, which are successfully deployed with that deployment. The key is the decision definition id, the value is a JSON Object corresponding to the decision definition.
     *
     * @return $this
     */
    public function setDeployedDecisionDefinitions($deployed_decision_definitions)
    {
        $this->container['deployed_decision_definitions'] = $deployed_decision_definitions;

        return $this;
    }

    /**
     * Gets deployed_decision_requirements_definitions
     *
     * @return map[string,\Swagger\Client\Model\DecisionRequirementsDefinitionDto]
     */
    public function getDeployedDecisionRequirementsDefinitions()
    {
        return $this->container['deployed_decision_requirements_definitions'];
    }

    /**
     * Sets deployed_decision_requirements_definitions
     *
     * @param map[string,\Swagger\Client\Model\DecisionRequirementsDefinitionDto] $deployed_decision_requirements_definitions A JSON Object containing a property for each of the decision requirements definitions, which are successfully deployed with that deployment. The key is the decision requirements definition id, the value is a JSON Object corresponding to the decision requirements definition.
     *
     * @return $this
     */
    public function setDeployedDecisionRequirementsDefinitions($deployed_decision_requirements_definitions)
    {
        $this->container['deployed_decision_requirements_definitions'] = $deployed_decision_requirements_definitions;

        return $this;
    }

    /**
     * Gets deployed_case_definitions
     *
     * @return map[string,\Swagger\Client\Model\CaseDefinitionDto]
     */
    public function getDeployedCaseDefinitions()
    {
        return $this->container['deployed_case_definitions'];
    }

    /**
     * Sets deployed_case_definitions
     *
     * @param map[string,\Swagger\Client\Model\CaseDefinitionDto] $deployed_case_definitions A JSON Object containing a property for each of the case definitions, which are successfully deployed with that deployment. The key is the case definition id, the value is a JSON Object corresponding to the case definition.
     *
     * @return $this
     */
    public function setDeployedCaseDefinitions($deployed_case_definitions)
    {
        $this->container['deployed_case_definitions'] = $deployed_case_definitions;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\AtomLink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\AtomLink[] $links The links associated to this resource, with `method`, `href` and `rel`.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
