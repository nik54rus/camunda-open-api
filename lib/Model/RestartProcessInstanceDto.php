<?php
/**
 * RestartProcessInstanceDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Model;

use \ArrayAccess;
use \Camunda\Client\ObjectSerializer;

/**
 * RestartProcessInstanceDto Class Doc Comment
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class RestartProcessInstanceDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $CamundaModelName = 'RestartProcessInstanceDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaTypes = [
        'process_instance_ids' => 'string[]',
        'historic_process_instance_query' => '\Camunda\Client\Model\HistoricProcessInstanceQueryDto',
        'skip_custom_listeners' => 'bool',
        'skip_io_mappings' => 'bool',
        'initial_variables' => 'bool',
        'without_business_key' => 'bool',
        'instructions' => '\Camunda\Client\Model\RestartProcessInstanceModificationInstructionDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaFormats = [
        'process_instance_ids' => null,
        'historic_process_instance_query' => null,
        'skip_custom_listeners' => null,
        'skip_io_mappings' => null,
        'initial_variables' => null,
        'without_business_key' => null,
        'instructions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaTypes()
    {
        return self::$CamundaTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaFormats()
    {
        return self::$CamundaFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'process_instance_ids' => 'processInstanceIds',
        'historic_process_instance_query' => 'historicProcessInstanceQuery',
        'skip_custom_listeners' => 'skipCustomListeners',
        'skip_io_mappings' => 'skipIoMappings',
        'initial_variables' => 'initialVariables',
        'without_business_key' => 'withoutBusinessKey',
        'instructions' => 'instructions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'process_instance_ids' => 'setProcessInstanceIds',
        'historic_process_instance_query' => 'setHistoricProcessInstanceQuery',
        'skip_custom_listeners' => 'setSkipCustomListeners',
        'skip_io_mappings' => 'setSkipIoMappings',
        'initial_variables' => 'setInitialVariables',
        'without_business_key' => 'setWithoutBusinessKey',
        'instructions' => 'setInstructions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'process_instance_ids' => 'getProcessInstanceIds',
        'historic_process_instance_query' => 'getHistoricProcessInstanceQuery',
        'skip_custom_listeners' => 'getSkipCustomListeners',
        'skip_io_mappings' => 'getSkipIoMappings',
        'initial_variables' => 'getInitialVariables',
        'without_business_key' => 'getWithoutBusinessKey',
        'instructions' => 'getInstructions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$CamundaModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['process_instance_ids'] = isset($data['process_instance_ids']) ? $data['process_instance_ids'] : null;
        $this->container['historic_process_instance_query'] = isset($data['historic_process_instance_query']) ? $data['historic_process_instance_query'] : null;
        $this->container['skip_custom_listeners'] = isset($data['skip_custom_listeners']) ? $data['skip_custom_listeners'] : null;
        $this->container['skip_io_mappings'] = isset($data['skip_io_mappings']) ? $data['skip_io_mappings'] : null;
        $this->container['initial_variables'] = isset($data['initial_variables']) ? $data['initial_variables'] : null;
        $this->container['without_business_key'] = isset($data['without_business_key']) ? $data['without_business_key'] : null;
        $this->container['instructions'] = isset($data['instructions']) ? $data['instructions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets process_instance_ids
     *
     * @return string[]
     */
    public function getProcessInstanceIds()
    {
        return $this->container['process_instance_ids'];
    }

    /**
     * Sets process_instance_ids
     *
     * @param string[] $process_instance_ids A list of process instance ids to restart.
     *
     * @return $this
     */
    public function setProcessInstanceIds($process_instance_ids)
    {
        $this->container['process_instance_ids'] = $process_instance_ids;

        return $this;
    }

    /**
     * Gets historic_process_instance_query
     *
     * @return \Camunda\Client\Model\HistoricProcessInstanceQueryDto
     */
    public function getHistoricProcessInstanceQuery()
    {
        return $this->container['historic_process_instance_query'];
    }

    /**
     * Sets historic_process_instance_query
     *
     * @param \Camunda\Client\Model\HistoricProcessInstanceQueryDto $historic_process_instance_query historic_process_instance_query
     *
     * @return $this
     */
    public function setHistoricProcessInstanceQuery($historic_process_instance_query)
    {
        $this->container['historic_process_instance_query'] = $historic_process_instance_query;

        return $this;
    }

    /**
     * Gets skip_custom_listeners
     *
     * @return bool
     */
    public function getSkipCustomListeners()
    {
        return $this->container['skip_custom_listeners'];
    }

    /**
     * Sets skip_custom_listeners
     *
     * @param bool $skip_custom_listeners Skip execution listener invocation for activities that are started as part of this request.
     *
     * @return $this
     */
    public function setSkipCustomListeners($skip_custom_listeners)
    {
        $this->container['skip_custom_listeners'] = $skip_custom_listeners;

        return $this;
    }

    /**
     * Gets skip_io_mappings
     *
     * @return bool
     */
    public function getSkipIoMappings()
    {
        return $this->container['skip_io_mappings'];
    }

    /**
     * Sets skip_io_mappings
     *
     * @param bool $skip_io_mappings Skip execution of [input/output variable mappings](https://docs.camunda.org/manual/7.21/user-guide/process-engine/variables/#input-output-variable-mapping) for activities that are started as part of this request.
     *
     * @return $this
     */
    public function setSkipIoMappings($skip_io_mappings)
    {
        $this->container['skip_io_mappings'] = $skip_io_mappings;

        return $this;
    }

    /**
     * Gets initial_variables
     *
     * @return bool
     */
    public function getInitialVariables()
    {
        return $this->container['initial_variables'];
    }

    /**
     * Sets initial_variables
     *
     * @param bool $initial_variables Set the initial set of variables during restart. By default, the last set of variables is used.
     *
     * @return $this
     */
    public function setInitialVariables($initial_variables)
    {
        $this->container['initial_variables'] = $initial_variables;

        return $this;
    }

    /**
     * Gets without_business_key
     *
     * @return bool
     */
    public function getWithoutBusinessKey()
    {
        return $this->container['without_business_key'];
    }

    /**
     * Sets without_business_key
     *
     * @param bool $without_business_key Do not take over the business key of the historic process instance.
     *
     * @return $this
     */
    public function setWithoutBusinessKey($without_business_key)
    {
        $this->container['without_business_key'] = $without_business_key;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return \Camunda\Client\Model\RestartProcessInstanceModificationInstructionDto[]
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param \Camunda\Client\Model\RestartProcessInstanceModificationInstructionDto[] $instructions **Optional**. A JSON array of instructions that specify which activities to start the process instance at. If this property is omitted, the process instance starts at its default blank start event.
     *
     * @return $this
     */
    public function setInstructions($instructions)
    {
        $this->container['instructions'] = $instructions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
