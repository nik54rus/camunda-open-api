<?php
/**
 * FetchExternalTaskTopicDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FetchExternalTaskTopicDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FetchExternalTaskTopicDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FetchExternalTaskTopicDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'topic_name' => 'string',
        'lock_duration' => 'int',
        'variables' => 'string[]',
        'local_variables' => 'bool',
        'business_key' => 'string',
        'process_definition_id' => 'string',
        'process_definition_id_in' => 'string[]',
        'process_definition_key' => 'string',
        'process_definition_key_in' => 'string[]',
        'process_definition_version_tag' => 'string',
        'without_tenant_id' => 'bool',
        'tenant_id_in' => 'string[]',
        'process_variables' => 'map[string,object]',
        'deserialize_values' => 'bool',
        'include_extension_properties' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'topic_name' => null,
        'lock_duration' => 'int64',
        'variables' => null,
        'local_variables' => null,
        'business_key' => null,
        'process_definition_id' => null,
        'process_definition_id_in' => null,
        'process_definition_key' => null,
        'process_definition_key_in' => null,
        'process_definition_version_tag' => null,
        'without_tenant_id' => null,
        'tenant_id_in' => null,
        'process_variables' => null,
        'deserialize_values' => null,
        'include_extension_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'topic_name' => 'topicName',
        'lock_duration' => 'lockDuration',
        'variables' => 'variables',
        'local_variables' => 'localVariables',
        'business_key' => 'businessKey',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_id_in' => 'processDefinitionIdIn',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_key_in' => 'processDefinitionKeyIn',
        'process_definition_version_tag' => 'processDefinitionVersionTag',
        'without_tenant_id' => 'withoutTenantId',
        'tenant_id_in' => 'tenantIdIn',
        'process_variables' => 'processVariables',
        'deserialize_values' => 'deserializeValues',
        'include_extension_properties' => 'includeExtensionProperties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'topic_name' => 'setTopicName',
        'lock_duration' => 'setLockDuration',
        'variables' => 'setVariables',
        'local_variables' => 'setLocalVariables',
        'business_key' => 'setBusinessKey',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_id_in' => 'setProcessDefinitionIdIn',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_key_in' => 'setProcessDefinitionKeyIn',
        'process_definition_version_tag' => 'setProcessDefinitionVersionTag',
        'without_tenant_id' => 'setWithoutTenantId',
        'tenant_id_in' => 'setTenantIdIn',
        'process_variables' => 'setProcessVariables',
        'deserialize_values' => 'setDeserializeValues',
        'include_extension_properties' => 'setIncludeExtensionProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'topic_name' => 'getTopicName',
        'lock_duration' => 'getLockDuration',
        'variables' => 'getVariables',
        'local_variables' => 'getLocalVariables',
        'business_key' => 'getBusinessKey',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_id_in' => 'getProcessDefinitionIdIn',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_key_in' => 'getProcessDefinitionKeyIn',
        'process_definition_version_tag' => 'getProcessDefinitionVersionTag',
        'without_tenant_id' => 'getWithoutTenantId',
        'tenant_id_in' => 'getTenantIdIn',
        'process_variables' => 'getProcessVariables',
        'deserialize_values' => 'getDeserializeValues',
        'include_extension_properties' => 'getIncludeExtensionProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['topic_name'] = isset($data['topic_name']) ? $data['topic_name'] : null;
        $this->container['lock_duration'] = isset($data['lock_duration']) ? $data['lock_duration'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['local_variables'] = isset($data['local_variables']) ? $data['local_variables'] : false;
        $this->container['business_key'] = isset($data['business_key']) ? $data['business_key'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_id_in'] = isset($data['process_definition_id_in']) ? $data['process_definition_id_in'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_key_in'] = isset($data['process_definition_key_in']) ? $data['process_definition_key_in'] : null;
        $this->container['process_definition_version_tag'] = isset($data['process_definition_version_tag']) ? $data['process_definition_version_tag'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : false;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['process_variables'] = isset($data['process_variables']) ? $data['process_variables'] : null;
        $this->container['deserialize_values'] = isset($data['deserialize_values']) ? $data['deserialize_values'] : false;
        $this->container['include_extension_properties'] = isset($data['include_extension_properties']) ? $data['include_extension_properties'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['topic_name'] === null) {
            $invalidProperties[] = "'topic_name' can't be null";
        }
        if ($this->container['lock_duration'] === null) {
            $invalidProperties[] = "'lock_duration' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets topic_name
     *
     * @return string
     */
    public function getTopicName()
    {
        return $this->container['topic_name'];
    }

    /**
     * Sets topic_name
     *
     * @param string $topic_name **Mandatory.** The topic's name.
     *
     * @return $this
     */
    public function setTopicName($topic_name)
    {
        $this->container['topic_name'] = $topic_name;

        return $this;
    }

    /**
     * Gets lock_duration
     *
     * @return int
     */
    public function getLockDuration()
    {
        return $this->container['lock_duration'];
    }

    /**
     * Sets lock_duration
     *
     * @param int $lock_duration **Mandatory.** The duration to lock the external tasks for in milliseconds.
     *
     * @return $this
     */
    public function setLockDuration($lock_duration)
    {
        $this->container['lock_duration'] = $lock_duration;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return string[]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param string[] $variables A JSON array of `String` values that represent variable names. For each result task belonging to this topic, the given variables are returned as well if they are accessible from the external task's execution. If not provided - all variables will be fetched.
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets local_variables
     *
     * @return bool
     */
    public function getLocalVariables()
    {
        return $this->container['local_variables'];
    }

    /**
     * Sets local_variables
     *
     * @param bool $local_variables If `true` only local variables will be fetched.
     *
     * @return $this
     */
    public function setLocalVariables($local_variables)
    {
        $this->container['local_variables'] = $local_variables;

        return $this;
    }

    /**
     * Gets business_key
     *
     * @return string
     */
    public function getBusinessKey()
    {
        return $this->container['business_key'];
    }

    /**
     * Sets business_key
     *
     * @param string $business_key A `String` value which enables the filtering of tasks based on process instance business key.
     *
     * @return $this
     */
    public function setBusinessKey($business_key)
    {
        $this->container['business_key'] = $business_key;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id Filter tasks based on process definition id.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_id_in
     *
     * @return string[]
     */
    public function getProcessDefinitionIdIn()
    {
        return $this->container['process_definition_id_in'];
    }

    /**
     * Sets process_definition_id_in
     *
     * @param string[] $process_definition_id_in Filter tasks based on process definition ids.
     *
     * @return $this
     */
    public function setProcessDefinitionIdIn($process_definition_id_in)
    {
        $this->container['process_definition_id_in'] = $process_definition_id_in;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key Filter tasks based on process definition key.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_key_in
     *
     * @return string[]
     */
    public function getProcessDefinitionKeyIn()
    {
        return $this->container['process_definition_key_in'];
    }

    /**
     * Sets process_definition_key_in
     *
     * @param string[] $process_definition_key_in Filter tasks based on process definition keys.
     *
     * @return $this
     */
    public function setProcessDefinitionKeyIn($process_definition_key_in)
    {
        $this->container['process_definition_key_in'] = $process_definition_key_in;

        return $this;
    }

    /**
     * Gets process_definition_version_tag
     *
     * @return string
     */
    public function getProcessDefinitionVersionTag()
    {
        return $this->container['process_definition_version_tag'];
    }

    /**
     * Sets process_definition_version_tag
     *
     * @param string $process_definition_version_tag Filter tasks based on process definition version tag.
     *
     * @return $this
     */
    public function setProcessDefinitionVersionTag($process_definition_version_tag)
    {
        $this->container['process_definition_version_tag'] = $process_definition_version_tag;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id Filter tasks without tenant id.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Filter tasks based on tenant ids.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets process_variables
     *
     * @return map[string,object]
     */
    public function getProcessVariables()
    {
        return $this->container['process_variables'];
    }

    /**
     * Sets process_variables
     *
     * @param map[string,object] $process_variables A `JSON` object used for filtering tasks based on process instance variable values. A property name of the object represents a process variable name, while the property value represents the process variable value to filter tasks by.
     *
     * @return $this
     */
    public function setProcessVariables($process_variables)
    {
        $this->container['process_variables'] = $process_variables;

        return $this;
    }

    /**
     * Gets deserialize_values
     *
     * @return bool
     */
    public function getDeserializeValues()
    {
        return $this->container['deserialize_values'];
    }

    /**
     * Sets deserialize_values
     *
     * @param bool $deserialize_values Determines whether serializable variable values (typically variables that store custom Java objects) should be deserialized on server side (default `false`).  If set to `true`, a serializable variable will be deserialized on server side and transformed to JSON using [Jackson's](https://github.com/FasterXML/jackson) POJO/bean property introspection feature. Note that this requires the Java classes of the variable value to be on the REST API's classpath.  If set to `false`, a serializable variable will be returned in its serialized format. For example, a variable that is serialized as XML will be returned as a JSON string containing XML.
     *
     * @return $this
     */
    public function setDeserializeValues($deserialize_values)
    {
        $this->container['deserialize_values'] = $deserialize_values;

        return $this;
    }

    /**
     * Gets include_extension_properties
     *
     * @return bool
     */
    public function getIncludeExtensionProperties()
    {
        return $this->container['include_extension_properties'];
    }

    /**
     * Sets include_extension_properties
     *
     * @param bool $include_extension_properties Determines whether custom extension properties defined in the BPMN activity of the external task (e.g. via the Extensions tab in the Camunda modeler) should be included in the response. Default: false
     *
     * @return $this
     */
    public function setIncludeExtensionProperties($include_extension_properties)
    {
        $this->container['include_extension_properties'] = $include_extension_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
