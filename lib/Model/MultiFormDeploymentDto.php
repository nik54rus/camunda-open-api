<?php
/**
 * MultiFormDeploymentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MultiFormDeploymentDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultiFormDeploymentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MultiFormDeploymentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tenant_id' => 'string',
        'deployment_source' => 'string',
        'deploy_changed_only' => 'bool',
        'enable_duplicate_filtering' => 'bool',
        'deployment_name' => 'string',
        'deployment_activation_time' => '\DateTime',
        'data' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tenant_id' => null,
        'deployment_source' => null,
        'deploy_changed_only' => null,
        'enable_duplicate_filtering' => null,
        'deployment_name' => null,
        'deployment_activation_time' => 'date-time',
        'data' => 'binary'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tenant_id' => 'tenant-id',
        'deployment_source' => 'deployment-source',
        'deploy_changed_only' => 'deploy-changed-only',
        'enable_duplicate_filtering' => 'enable-duplicate-filtering',
        'deployment_name' => 'deployment-name',
        'deployment_activation_time' => 'deployment-activation-time',
        'data' => 'data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tenant_id' => 'setTenantId',
        'deployment_source' => 'setDeploymentSource',
        'deploy_changed_only' => 'setDeployChangedOnly',
        'enable_duplicate_filtering' => 'setEnableDuplicateFiltering',
        'deployment_name' => 'setDeploymentName',
        'deployment_activation_time' => 'setDeploymentActivationTime',
        'data' => 'setData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tenant_id' => 'getTenantId',
        'deployment_source' => 'getDeploymentSource',
        'deploy_changed_only' => 'getDeployChangedOnly',
        'enable_duplicate_filtering' => 'getEnableDuplicateFiltering',
        'deployment_name' => 'getDeploymentName',
        'deployment_activation_time' => 'getDeploymentActivationTime',
        'data' => 'getData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['deployment_source'] = isset($data['deployment_source']) ? $data['deployment_source'] : null;
        $this->container['deploy_changed_only'] = isset($data['deploy_changed_only']) ? $data['deploy_changed_only'] : false;
        $this->container['enable_duplicate_filtering'] = isset($data['enable_duplicate_filtering']) ? $data['enable_duplicate_filtering'] : false;
        $this->container['deployment_name'] = isset($data['deployment_name']) ? $data['deployment_name'] : null;
        $this->container['deployment_activation_time'] = isset($data['deployment_activation_time']) ? $data['deployment_activation_time'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id The tenant id for the deployment to be created.
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets deployment_source
     *
     * @return string
     */
    public function getDeploymentSource()
    {
        return $this->container['deployment_source'];
    }

    /**
     * Sets deployment_source
     *
     * @param string $deployment_source The source for the deployment to be created.
     *
     * @return $this
     */
    public function setDeploymentSource($deployment_source)
    {
        $this->container['deployment_source'] = $deployment_source;

        return $this;
    }

    /**
     * Gets deploy_changed_only
     *
     * @return bool
     */
    public function getDeployChangedOnly()
    {
        return $this->container['deploy_changed_only'];
    }

    /**
     * Sets deploy_changed_only
     *
     * @param bool $deploy_changed_only A flag indicating whether the process engine should perform duplicate checking on a per-resource basis. If set to true, only those resources that have actually changed are deployed. Checks are made against resources included previous deployments of the same name and only against the latest versions of those resources. If set to true, the option enable-duplicate-filtering is overridden and set to true.
     *
     * @return $this
     */
    public function setDeployChangedOnly($deploy_changed_only)
    {
        $this->container['deploy_changed_only'] = $deploy_changed_only;

        return $this;
    }

    /**
     * Gets enable_duplicate_filtering
     *
     * @return bool
     */
    public function getEnableDuplicateFiltering()
    {
        return $this->container['enable_duplicate_filtering'];
    }

    /**
     * Sets enable_duplicate_filtering
     *
     * @param bool $enable_duplicate_filtering A flag indicating whether the process engine should perform duplicate checking for the deployment or not. This allows you to check if a deployment with the same name and the same resouces already exists and if true, not create a new deployment but instead return the existing deployment. The default value is false.
     *
     * @return $this
     */
    public function setEnableDuplicateFiltering($enable_duplicate_filtering)
    {
        $this->container['enable_duplicate_filtering'] = $enable_duplicate_filtering;

        return $this;
    }

    /**
     * Gets deployment_name
     *
     * @return string
     */
    public function getDeploymentName()
    {
        return $this->container['deployment_name'];
    }

    /**
     * Sets deployment_name
     *
     * @param string $deployment_name The name for the deployment to be created.
     *
     * @return $this
     */
    public function setDeploymentName($deployment_name)
    {
        $this->container['deployment_name'] = $deployment_name;

        return $this;
    }

    /**
     * Gets deployment_activation_time
     *
     * @return \DateTime
     */
    public function getDeploymentActivationTime()
    {
        return $this->container['deployment_activation_time'];
    }

    /**
     * Sets deployment_activation_time
     *
     * @param \DateTime $deployment_activation_time Sets the date on which the process definitions contained in this deployment will be activated. This means that all process definitions will be deployed as usual, but they will be suspended from the start until the given activation date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setDeploymentActivationTime($deployment_activation_time)
    {
        $this->container['deployment_activation_time'] = $deployment_activation_time;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string $data The binary data to create the deployment resource. It is possible to have more than one form part with different form part names for the binary data to create a deployment.
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
