<?php
/**
 * ProcessInstanceModificationInstructionDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProcessInstanceModificationInstructionDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessInstanceModificationInstructionDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessInstanceModificationInstructionDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'variables' => '\Swagger\Client\Model\TriggerVariableValueDto',
        'activity_id' => 'string',
        'transition_id' => 'string',
        'activity_instance_id' => 'string',
        'transition_instance_id' => 'string',
        'ancestor_activity_instance_id' => 'string',
        'cancel_current_active_activity_instances' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'variables' => null,
        'activity_id' => null,
        'transition_id' => null,
        'activity_instance_id' => null,
        'transition_instance_id' => null,
        'ancestor_activity_instance_id' => null,
        'cancel_current_active_activity_instances' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'variables' => 'variables',
        'activity_id' => 'activityId',
        'transition_id' => 'transitionId',
        'activity_instance_id' => 'activityInstanceId',
        'transition_instance_id' => 'transitionInstanceId',
        'ancestor_activity_instance_id' => 'ancestorActivityInstanceId',
        'cancel_current_active_activity_instances' => 'cancelCurrentActiveActivityInstances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'variables' => 'setVariables',
        'activity_id' => 'setActivityId',
        'transition_id' => 'setTransitionId',
        'activity_instance_id' => 'setActivityInstanceId',
        'transition_instance_id' => 'setTransitionInstanceId',
        'ancestor_activity_instance_id' => 'setAncestorActivityInstanceId',
        'cancel_current_active_activity_instances' => 'setCancelCurrentActiveActivityInstances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'variables' => 'getVariables',
        'activity_id' => 'getActivityId',
        'transition_id' => 'getTransitionId',
        'activity_instance_id' => 'getActivityInstanceId',
        'transition_instance_id' => 'getTransitionInstanceId',
        'ancestor_activity_instance_id' => 'getAncestorActivityInstanceId',
        'cancel_current_active_activity_instances' => 'getCancelCurrentActiveActivityInstances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CANCEL = 'cancel';
    const TYPE_START_BEFORE_ACTIVITY = 'startBeforeActivity';
    const TYPE_START_AFTER_ACTIVITY = 'startAfterActivity';
    const TYPE_START_TRANSITION = 'startTransition';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CANCEL,
            self::TYPE_START_BEFORE_ACTIVITY,
            self::TYPE_START_AFTER_ACTIVITY,
            self::TYPE_START_TRANSITION,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['transition_id'] = isset($data['transition_id']) ? $data['transition_id'] : null;
        $this->container['activity_instance_id'] = isset($data['activity_instance_id']) ? $data['activity_instance_id'] : null;
        $this->container['transition_instance_id'] = isset($data['transition_instance_id']) ? $data['transition_instance_id'] : null;
        $this->container['ancestor_activity_instance_id'] = isset($data['ancestor_activity_instance_id']) ? $data['ancestor_activity_instance_id'] : null;
        $this->container['cancel_current_active_activity_instances'] = isset($data['cancel_current_active_activity_instances']) ? $data['cancel_current_active_activity_instances'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type **Mandatory**. One of the following values: `cancel`, `startBeforeActivity`, `startAfterActivity`, `startTransition`.  * A cancel instruction requests cancellation of a single activity instance or all instances of one activity. * A startBeforeActivity instruction requests to enter a given activity. * A startAfterActivity instruction requests to execute the single outgoing sequence flow of a given activity. * A startTransition instruction requests to execute a specific sequence flow.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return \Swagger\Client\Model\TriggerVariableValueDto
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param \Swagger\Client\Model\TriggerVariableValueDto $variables variables
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.
     *
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets transition_id
     *
     * @return string
     */
    public function getTransitionId()
    {
        return $this->container['transition_id'];
    }

    /**
     * Sets transition_id
     *
     * @param string $transition_id Can be used with instructions of types `startTransition`. Specifies the sequence flow to start.
     *
     * @return $this
     */
    public function setTransitionId($transition_id)
    {
        $this->container['transition_id'] = $transition_id;

        return $this;
    }

    /**
     * Gets activity_instance_id
     *
     * @return string
     */
    public function getActivityInstanceId()
    {
        return $this->container['activity_instance_id'];
    }

    /**
     * Sets activity_instance_id
     *
     * @param string $activity_instance_id Can be used with instructions of type `cancel`. Specifies the activity instance to cancel. Valid values are the activity instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.21/reference/rest/process-instance/get-activity-instances/).
     *
     * @return $this
     */
    public function setActivityInstanceId($activity_instance_id)
    {
        $this->container['activity_instance_id'] = $activity_instance_id;

        return $this;
    }

    /**
     * Gets transition_instance_id
     *
     * @return string
     */
    public function getTransitionInstanceId()
    {
        return $this->container['transition_instance_id'];
    }

    /**
     * Sets transition_instance_id
     *
     * @param string $transition_instance_id Can be used with instructions of type `cancel`. Specifies the transition instance to cancel. Valid values are the transition instance IDs supplied by the [Get Activity Instance request](https://docs.camunda.org/manual/7.21/reference/rest/process-instance/get-activity-instances/).
     *
     * @return $this
     */
    public function setTransitionInstanceId($transition_instance_id)
    {
        $this->container['transition_instance_id'] = $transition_instance_id;

        return $this;
    }

    /**
     * Gets ancestor_activity_instance_id
     *
     * @return string
     */
    public function getAncestorActivityInstanceId()
    {
        return $this->container['ancestor_activity_instance_id'];
    }

    /**
     * Sets ancestor_activity_instance_id
     *
     * @param string $ancestor_activity_instance_id Can be used with instructions of type `startBeforeActivity`, `startAfterActivity`, and `startTransition`. Valid values are the activity instance IDs supplied by the Get Activity Instance request. If there are multiple parent activity instances of the targeted activity, this specifies the ancestor scope in which hierarchy the activity/transition is to be instantiated.  Example: When there are two instances of a subprocess and an activity contained in the subprocess is to be started, this parameter allows to specifiy under which subprocess instance the activity should be started.
     *
     * @return $this
     */
    public function setAncestorActivityInstanceId($ancestor_activity_instance_id)
    {
        $this->container['ancestor_activity_instance_id'] = $ancestor_activity_instance_id;

        return $this;
    }

    /**
     * Gets cancel_current_active_activity_instances
     *
     * @return bool
     */
    public function getCancelCurrentActiveActivityInstances()
    {
        return $this->container['cancel_current_active_activity_instances'];
    }

    /**
     * Sets cancel_current_active_activity_instances
     *
     * @param bool $cancel_current_active_activity_instances Can be used with instructions of type cancel. Prevents the deletion of new created activity instances.
     *
     * @return $this
     */
    public function setCancelCurrentActiveActivityInstances($cancel_current_active_activity_instances)
    {
        $this->container['cancel_current_active_activity_instances'] = $cancel_current_active_activity_instances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
