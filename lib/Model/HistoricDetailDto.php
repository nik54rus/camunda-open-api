<?php
/**
 * HistoricDetailDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Model;

use \ArrayAccess;
use \Camunda\Client\ObjectSerializer;

/**
 * HistoricDetailDto Class Doc Comment
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class HistoricDetailDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $CamundaModelName = 'HistoricDetailDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaTypes = [
        'id' => 'string',
        'type' => 'string',
        'process_definition_key' => 'string',
        'process_definition_id' => 'string',
        'process_instance_id' => 'string',
        'activity_instance_id' => 'string',
        'execution_id' => 'string',
        'case_definition_key' => 'string',
        'case_definition_id' => 'string',
        'case_instance_id' => 'string',
        'case_execution_id' => 'string',
        'task_id' => 'string',
        'tenant_id' => 'string',
        'user_operation_id' => 'string',
        'time' => '\DateTime',
        'removal_time' => '\DateTime',
        'root_process_instance_id' => 'string',
        'field_id' => 'string',
        'field_value' => 'object',
        'variable_name' => 'string',
        'variable_instance_id' => 'string',
        'variable_type' => 'string',
        'value' => 'object',
        'value_info' => 'map[string,object]',
        'initial' => 'bool',
        'revision' => 'int',
        'error_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaFormats = [
        'id' => null,
        'type' => null,
        'process_definition_key' => null,
        'process_definition_id' => null,
        'process_instance_id' => null,
        'activity_instance_id' => null,
        'execution_id' => null,
        'case_definition_key' => null,
        'case_definition_id' => null,
        'case_instance_id' => null,
        'case_execution_id' => null,
        'task_id' => null,
        'tenant_id' => null,
        'user_operation_id' => null,
        'time' => 'date-time',
        'removal_time' => 'date-time',
        'root_process_instance_id' => null,
        'field_id' => null,
        'field_value' => null,
        'variable_name' => null,
        'variable_instance_id' => null,
        'variable_type' => null,
        'value' => null,
        'value_info' => null,
        'initial' => null,
        'revision' => 'int32',
        'error_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaTypes()
    {
        return self::$CamundaTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaFormats()
    {
        return self::$CamundaFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_id' => 'processDefinitionId',
        'process_instance_id' => 'processInstanceId',
        'activity_instance_id' => 'activityInstanceId',
        'execution_id' => 'executionId',
        'case_definition_key' => 'caseDefinitionKey',
        'case_definition_id' => 'caseDefinitionId',
        'case_instance_id' => 'caseInstanceId',
        'case_execution_id' => 'caseExecutionId',
        'task_id' => 'taskId',
        'tenant_id' => 'tenantId',
        'user_operation_id' => 'userOperationId',
        'time' => 'time',
        'removal_time' => 'removalTime',
        'root_process_instance_id' => 'rootProcessInstanceId',
        'field_id' => 'fieldId',
        'field_value' => 'fieldValue',
        'variable_name' => 'variableName',
        'variable_instance_id' => 'variableInstanceId',
        'variable_type' => 'variableType',
        'value' => 'value',
        'value_info' => 'valueInfo',
        'initial' => 'initial',
        'revision' => 'revision',
        'error_message' => 'errorMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_instance_id' => 'setProcessInstanceId',
        'activity_instance_id' => 'setActivityInstanceId',
        'execution_id' => 'setExecutionId',
        'case_definition_key' => 'setCaseDefinitionKey',
        'case_definition_id' => 'setCaseDefinitionId',
        'case_instance_id' => 'setCaseInstanceId',
        'case_execution_id' => 'setCaseExecutionId',
        'task_id' => 'setTaskId',
        'tenant_id' => 'setTenantId',
        'user_operation_id' => 'setUserOperationId',
        'time' => 'setTime',
        'removal_time' => 'setRemovalTime',
        'root_process_instance_id' => 'setRootProcessInstanceId',
        'field_id' => 'setFieldId',
        'field_value' => 'setFieldValue',
        'variable_name' => 'setVariableName',
        'variable_instance_id' => 'setVariableInstanceId',
        'variable_type' => 'setVariableType',
        'value' => 'setValue',
        'value_info' => 'setValueInfo',
        'initial' => 'setInitial',
        'revision' => 'setRevision',
        'error_message' => 'setErrorMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_instance_id' => 'getProcessInstanceId',
        'activity_instance_id' => 'getActivityInstanceId',
        'execution_id' => 'getExecutionId',
        'case_definition_key' => 'getCaseDefinitionKey',
        'case_definition_id' => 'getCaseDefinitionId',
        'case_instance_id' => 'getCaseInstanceId',
        'case_execution_id' => 'getCaseExecutionId',
        'task_id' => 'getTaskId',
        'tenant_id' => 'getTenantId',
        'user_operation_id' => 'getUserOperationId',
        'time' => 'getTime',
        'removal_time' => 'getRemovalTime',
        'root_process_instance_id' => 'getRootProcessInstanceId',
        'field_id' => 'getFieldId',
        'field_value' => 'getFieldValue',
        'variable_name' => 'getVariableName',
        'variable_instance_id' => 'getVariableInstanceId',
        'variable_type' => 'getVariableType',
        'value' => 'getValue',
        'value_info' => 'getValueInfo',
        'initial' => 'getInitial',
        'revision' => 'getRevision',
        'error_message' => 'getErrorMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$CamundaModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['activity_instance_id'] = isset($data['activity_instance_id']) ? $data['activity_instance_id'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['case_definition_key'] = isset($data['case_definition_key']) ? $data['case_definition_key'] : null;
        $this->container['case_definition_id'] = isset($data['case_definition_id']) ? $data['case_definition_id'] : null;
        $this->container['case_instance_id'] = isset($data['case_instance_id']) ? $data['case_instance_id'] : null;
        $this->container['case_execution_id'] = isset($data['case_execution_id']) ? $data['case_execution_id'] : null;
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['user_operation_id'] = isset($data['user_operation_id']) ? $data['user_operation_id'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['removal_time'] = isset($data['removal_time']) ? $data['removal_time'] : null;
        $this->container['root_process_instance_id'] = isset($data['root_process_instance_id']) ? $data['root_process_instance_id'] : null;
        $this->container['field_id'] = isset($data['field_id']) ? $data['field_id'] : null;
        $this->container['field_value'] = isset($data['field_value']) ? $data['field_value'] : null;
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
        $this->container['variable_instance_id'] = isset($data['variable_instance_id']) ? $data['variable_instance_id'] : null;
        $this->container['variable_type'] = isset($data['variable_type']) ? $data['variable_type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['value_info'] = isset($data['value_info']) ? $data['value_info'] : null;
        $this->container['initial'] = isset($data['initial']) ? $data['initial'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['error_message'] = isset($data['error_message']) ? $data['error_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the historic detail.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the historic detail. Either `formField` for a submitted form field value or `variableUpdate` for variable updates.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key The key of the process definition that this historic detail belongs to.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id The id of the process definition that this historic detail belongs to.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id The id of the process instance the historic detail belongs to.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets activity_instance_id
     *
     * @return string
     */
    public function getActivityInstanceId()
    {
        return $this->container['activity_instance_id'];
    }

    /**
     * Sets activity_instance_id
     *
     * @param string $activity_instance_id The id of the activity instance the historic detail belongs to.
     *
     * @return $this
     */
    public function setActivityInstanceId($activity_instance_id)
    {
        $this->container['activity_instance_id'] = $activity_instance_id;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id The id of the execution the historic detail belongs to.
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets case_definition_key
     *
     * @return string
     */
    public function getCaseDefinitionKey()
    {
        return $this->container['case_definition_key'];
    }

    /**
     * Sets case_definition_key
     *
     * @param string $case_definition_key The key of the case definition that this historic detail belongs to.
     *
     * @return $this
     */
    public function setCaseDefinitionKey($case_definition_key)
    {
        $this->container['case_definition_key'] = $case_definition_key;

        return $this;
    }

    /**
     * Gets case_definition_id
     *
     * @return string
     */
    public function getCaseDefinitionId()
    {
        return $this->container['case_definition_id'];
    }

    /**
     * Sets case_definition_id
     *
     * @param string $case_definition_id The id of the case definition that this historic detail belongs to.
     *
     * @return $this
     */
    public function setCaseDefinitionId($case_definition_id)
    {
        $this->container['case_definition_id'] = $case_definition_id;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string $case_instance_id The id of the case instance the historic detail belongs to.
     *
     * @return $this
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets case_execution_id
     *
     * @return string
     */
    public function getCaseExecutionId()
    {
        return $this->container['case_execution_id'];
    }

    /**
     * Sets case_execution_id
     *
     * @param string $case_execution_id The id of the case execution the historic detail belongs to.
     *
     * @return $this
     */
    public function setCaseExecutionId($case_execution_id)
    {
        $this->container['case_execution_id'] = $case_execution_id;

        return $this;
    }

    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id The id of the task the historic detail belongs to.
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id The id of the tenant that this historic detail belongs to.
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets user_operation_id
     *
     * @return string
     */
    public function getUserOperationId()
    {
        return $this->container['user_operation_id'];
    }

    /**
     * Sets user_operation_id
     *
     * @param string $user_operation_id The id of user operation which links historic detail with [user operation log](https://docs.camunda.org/manual/7.21/reference/rest/history/user-operation-log/) entries.
     *
     * @return $this
     */
    public function setUserOperationId($user_operation_id)
    {
        $this->container['user_operation_id'] = $user_operation_id;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \DateTime
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime $time The time when this historic detail occurred. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets removal_time
     *
     * @return \DateTime
     */
    public function getRemovalTime()
    {
        return $this->container['removal_time'];
    }

    /**
     * Sets removal_time
     *
     * @param \DateTime $removal_time The time after which the historic detail should be removed by the History Cleanup job. Default [format](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/) `yyyy-MM-dd'T'HH:mm:ss.SSSZ`.
     *
     * @return $this
     */
    public function setRemovalTime($removal_time)
    {
        $this->container['removal_time'] = $removal_time;

        return $this;
    }

    /**
     * Gets root_process_instance_id
     *
     * @return string
     */
    public function getRootProcessInstanceId()
    {
        return $this->container['root_process_instance_id'];
    }

    /**
     * Sets root_process_instance_id
     *
     * @param string $root_process_instance_id The process instance id of the root process instance that initiated the process containing this historic detail.
     *
     * @return $this
     */
    public function setRootProcessInstanceId($root_process_instance_id)
    {
        $this->container['root_process_instance_id'] = $root_process_instance_id;

        return $this;
    }

    /**
     * Gets field_id
     *
     * @return string
     */
    public function getFieldId()
    {
        return $this->container['field_id'];
    }

    /**
     * Sets field_id
     *
     * @param string $field_id The id of the form field.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `formField`.
     *
     * @return $this
     */
    public function setFieldId($field_id)
    {
        $this->container['field_id'] = $field_id;

        return $this;
    }

    /**
     * Gets field_value
     *
     * @return object
     */
    public function getFieldValue()
    {
        return $this->container['field_value'];
    }

    /**
     * Sets field_value
     *
     * @param object $field_value The submitted form field value. The value differs depending on the form field's type and on the `deserializeValue` parameter.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `formField`.
     *
     * @return $this
     */
    public function setFieldValue($field_value)
    {
        $this->container['field_value'] = $field_value;

        return $this;
    }

    /**
     * Gets variable_name
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string $variable_name The name of the variable which has been updated.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variable_instance_id
     *
     * @return string
     */
    public function getVariableInstanceId()
    {
        return $this->container['variable_instance_id'];
    }

    /**
     * Sets variable_instance_id
     *
     * @param string $variable_instance_id The id of the associated variable instance.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setVariableInstanceId($variable_instance_id)
    {
        $this->container['variable_instance_id'] = $variable_instance_id;

        return $this;
    }

    /**
     * Gets variable_type
     *
     * @return string
     */
    public function getVariableType()
    {
        return $this->container['variable_type'];
    }

    /**
     * Sets variable_type
     *
     * @param string $variable_type The value type of the variable.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setVariableType($variable_type)
    {
        $this->container['variable_type'] = $variable_type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param object $value The variable's value. Value differs depending on the variable's type and on the deserializeValues parameter.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets value_info
     *
     * @return map[string,object]
     */
    public function getValueInfo()
    {
        return $this->container['value_info'];
    }

    /**
     * Sets value_info
     *
     * @param map[string,object] $value_info A JSON object containing additional, value-type-dependent properties. For variables of type `Object`, the following properties are returned:  * `objectTypeName`: A string representation of the object's type name. * `serializationDataFormat`: The serialization format used to store the variable.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setValueInfo($value_info)
    {
        $this->container['value_info'] = $value_info;

        return $this;
    }

    /**
     * Gets initial
     *
     * @return bool
     */
    public function getInitial()
    {
        return $this->container['initial'];
    }

    /**
     * Sets initial
     *
     * @param bool $initial Returns `true` for variable updates that contains the initial values of the variables.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setInitial($initial)
    {
        $this->container['initial'] = $initial;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision The revision of the historic variable update.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string $error_message An error message in case a Java Serialized Object could not be de-serialized.  **Note:** This property is only set for a `HistoricVariableUpdate` historic details. In these cases, the value of the `type` property is `variableUpdate`.
     *
     * @return $this
     */
    public function setErrorMessage($error_message)
    {
        $this->container['error_message'] = $error_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
