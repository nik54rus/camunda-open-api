<?php
/**
 * HistoricActivityInstanceQueryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Model;

use \ArrayAccess;
use \Camunda\Client\ObjectSerializer;

/**
 * HistoricActivityInstanceQueryDto Class Doc Comment
 *
 * @category Class
 * @description A historic activity instance query which defines a group of historic activity instances
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class HistoricActivityInstanceQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $CamundaModelName = 'HistoricActivityInstanceQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaTypes = [
        'activity_instance_id' => 'string',
        'process_instance_id' => 'string',
        'process_definition_id' => 'string',
        'execution_id' => 'string',
        'activity_id' => 'string',
        'activity_name' => 'string',
        'activity_type' => 'string',
        'task_assignee' => 'string',
        'finished' => 'bool',
        'unfinished' => 'bool',
        'canceled' => 'bool',
        'complete_scope' => 'bool',
        'started_before' => '\DateTime',
        'started_after' => '\DateTime',
        'finished_before' => '\DateTime',
        'finished_after' => '\DateTime',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'sorting' => '\Camunda\Client\Model\HistoricActivityInstanceQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaFormats = [
        'activity_instance_id' => null,
        'process_instance_id' => null,
        'process_definition_id' => null,
        'execution_id' => null,
        'activity_id' => null,
        'activity_name' => null,
        'activity_type' => null,
        'task_assignee' => null,
        'finished' => null,
        'unfinished' => null,
        'canceled' => null,
        'complete_scope' => null,
        'started_before' => 'date-time',
        'started_after' => 'date-time',
        'finished_before' => 'date-time',
        'finished_after' => 'date-time',
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaTypes()
    {
        return self::$CamundaTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaFormats()
    {
        return self::$CamundaFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activity_instance_id' => 'activityInstanceId',
        'process_instance_id' => 'processInstanceId',
        'process_definition_id' => 'processDefinitionId',
        'execution_id' => 'executionId',
        'activity_id' => 'activityId',
        'activity_name' => 'activityName',
        'activity_type' => 'activityType',
        'task_assignee' => 'taskAssignee',
        'finished' => 'finished',
        'unfinished' => 'unfinished',
        'canceled' => 'canceled',
        'complete_scope' => 'completeScope',
        'started_before' => 'startedBefore',
        'started_after' => 'startedAfter',
        'finished_before' => 'finishedBefore',
        'finished_after' => 'finishedAfter',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activity_instance_id' => 'setActivityInstanceId',
        'process_instance_id' => 'setProcessInstanceId',
        'process_definition_id' => 'setProcessDefinitionId',
        'execution_id' => 'setExecutionId',
        'activity_id' => 'setActivityId',
        'activity_name' => 'setActivityName',
        'activity_type' => 'setActivityType',
        'task_assignee' => 'setTaskAssignee',
        'finished' => 'setFinished',
        'unfinished' => 'setUnfinished',
        'canceled' => 'setCanceled',
        'complete_scope' => 'setCompleteScope',
        'started_before' => 'setStartedBefore',
        'started_after' => 'setStartedAfter',
        'finished_before' => 'setFinishedBefore',
        'finished_after' => 'setFinishedAfter',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activity_instance_id' => 'getActivityInstanceId',
        'process_instance_id' => 'getProcessInstanceId',
        'process_definition_id' => 'getProcessDefinitionId',
        'execution_id' => 'getExecutionId',
        'activity_id' => 'getActivityId',
        'activity_name' => 'getActivityName',
        'activity_type' => 'getActivityType',
        'task_assignee' => 'getTaskAssignee',
        'finished' => 'getFinished',
        'unfinished' => 'getUnfinished',
        'canceled' => 'getCanceled',
        'complete_scope' => 'getCompleteScope',
        'started_before' => 'getStartedBefore',
        'started_after' => 'getStartedAfter',
        'finished_before' => 'getFinishedBefore',
        'finished_after' => 'getFinishedAfter',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$CamundaModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activity_instance_id'] = isset($data['activity_instance_id']) ? $data['activity_instance_id'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['activity_name'] = isset($data['activity_name']) ? $data['activity_name'] : null;
        $this->container['activity_type'] = isset($data['activity_type']) ? $data['activity_type'] : null;
        $this->container['task_assignee'] = isset($data['task_assignee']) ? $data['task_assignee'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : null;
        $this->container['unfinished'] = isset($data['unfinished']) ? $data['unfinished'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['complete_scope'] = isset($data['complete_scope']) ? $data['complete_scope'] : null;
        $this->container['started_before'] = isset($data['started_before']) ? $data['started_before'] : null;
        $this->container['started_after'] = isset($data['started_after']) ? $data['started_after'] : null;
        $this->container['finished_before'] = isset($data['finished_before']) ? $data['finished_before'] : null;
        $this->container['finished_after'] = isset($data['finished_after']) ? $data['finished_after'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activity_instance_id
     *
     * @return string
     */
    public function getActivityInstanceId()
    {
        return $this->container['activity_instance_id'];
    }

    /**
     * Sets activity_instance_id
     *
     * @param string $activity_instance_id Filter by activity instance id.
     *
     * @return $this
     */
    public function setActivityInstanceId($activity_instance_id)
    {
        $this->container['activity_instance_id'] = $activity_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id Filter by process instance id.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id Filter by process definition id.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id Filter by the id of the execution that executed the activity instance.
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id Filter by the activity id (according to BPMN 2.0 XML).
     *
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets activity_name
     *
     * @return string
     */
    public function getActivityName()
    {
        return $this->container['activity_name'];
    }

    /**
     * Sets activity_name
     *
     * @param string $activity_name Filter by the activity name (according to BPMN 2.0 XML).
     *
     * @return $this
     */
    public function setActivityName($activity_name)
    {
        $this->container['activity_name'] = $activity_name;

        return $this;
    }

    /**
     * Gets activity_type
     *
     * @return string
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     *
     * @param string $activity_type Filter by activity type.
     *
     * @return $this
     */
    public function setActivityType($activity_type)
    {
        $this->container['activity_type'] = $activity_type;

        return $this;
    }

    /**
     * Gets task_assignee
     *
     * @return string
     */
    public function getTaskAssignee()
    {
        return $this->container['task_assignee'];
    }

    /**
     * Sets task_assignee
     *
     * @param string $task_assignee Only include activity instances that are user tasks and assigned to a given user.
     *
     * @return $this
     */
    public function setTaskAssignee($task_assignee)
    {
        $this->container['task_assignee'] = $task_assignee;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return bool
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param bool $finished Only include finished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets unfinished
     *
     * @return bool
     */
    public function getUnfinished()
    {
        return $this->container['unfinished'];
    }

    /**
     * Sets unfinished
     *
     * @param bool $unfinished Only include unfinished activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     *
     * @return $this
     */
    public function setUnfinished($unfinished)
    {
        $this->container['unfinished'] = $unfinished;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled Only include canceled activity instances. Value may only be `true`, as `false` behaves the same as when the property is not set.
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets complete_scope
     *
     * @return bool
     */
    public function getCompleteScope()
    {
        return $this->container['complete_scope'];
    }

    /**
     * Sets complete_scope
     *
     * @param bool $complete_scope Only include activity instances which completed a scope. Value may only be `true`, as `false` behaves the same as when the property is not set.
     *
     * @return $this
     */
    public function setCompleteScope($complete_scope)
    {
        $this->container['complete_scope'] = $complete_scope;

        return $this;
    }

    /**
     * Gets started_before
     *
     * @return \DateTime
     */
    public function getStartedBefore()
    {
        return $this->container['started_before'];
    }

    /**
     * Sets started_before
     *
     * @param \DateTime $started_before Restrict to instances that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setStartedBefore($started_before)
    {
        $this->container['started_before'] = $started_before;

        return $this;
    }

    /**
     * Gets started_after
     *
     * @return \DateTime
     */
    public function getStartedAfter()
    {
        return $this->container['started_after'];
    }

    /**
     * Sets started_after
     *
     * @param \DateTime $started_after Restrict to instances that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setStartedAfter($started_after)
    {
        $this->container['started_after'] = $started_after;

        return $this;
    }

    /**
     * Gets finished_before
     *
     * @return \DateTime
     */
    public function getFinishedBefore()
    {
        return $this->container['finished_before'];
    }

    /**
     * Sets finished_before
     *
     * @param \DateTime $finished_before Restrict to instances that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setFinishedBefore($finished_before)
    {
        $this->container['finished_before'] = $finished_before;

        return $this;
    }

    /**
     * Gets finished_after
     *
     * @return \DateTime
     */
    public function getFinishedAfter()
    {
        return $this->container['finished_after'];
    }

    /**
     * Sets finished_after
     *
     * @param \DateTime $finished_after Restrict to instances that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setFinishedAfter($finished_after)
    {
        $this->container['finished_after'] = $finished_after;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Must be a JSON array of Strings. An activity instance must have one of the given tenant ids.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id Only include historic activity instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \Camunda\Client\Model\HistoricActivityInstanceQueryDtoSorting[]
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \Camunda\Client\Model\HistoricActivityInstanceQueryDtoSorting[] $sorting Apply sorting of the result
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
