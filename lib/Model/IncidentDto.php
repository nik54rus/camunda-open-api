<?php
/**
 * IncidentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IncidentDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IncidentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IncidentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'process_definition_id' => 'string',
        'process_instance_id' => 'string',
        'execution_id' => 'string',
        'incident_timestamp' => '\DateTime',
        'incident_type' => 'string',
        'activity_id' => 'string',
        'failed_activity_id' => 'string',
        'cause_incident_id' => 'string',
        'root_cause_incident_id' => 'string',
        'configuration' => 'string',
        'tenant_id' => 'string',
        'incident_message' => 'string',
        'job_definition_id' => 'string',
        'annotation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'process_definition_id' => null,
        'process_instance_id' => null,
        'execution_id' => null,
        'incident_timestamp' => 'date-time',
        'incident_type' => null,
        'activity_id' => null,
        'failed_activity_id' => null,
        'cause_incident_id' => null,
        'root_cause_incident_id' => null,
        'configuration' => null,
        'tenant_id' => null,
        'incident_message' => null,
        'job_definition_id' => null,
        'annotation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'process_definition_id' => 'processDefinitionId',
        'process_instance_id' => 'processInstanceId',
        'execution_id' => 'executionId',
        'incident_timestamp' => 'incidentTimestamp',
        'incident_type' => 'incidentType',
        'activity_id' => 'activityId',
        'failed_activity_id' => 'failedActivityId',
        'cause_incident_id' => 'causeIncidentId',
        'root_cause_incident_id' => 'rootCauseIncidentId',
        'configuration' => 'configuration',
        'tenant_id' => 'tenantId',
        'incident_message' => 'incidentMessage',
        'job_definition_id' => 'jobDefinitionId',
        'annotation' => 'annotation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_instance_id' => 'setProcessInstanceId',
        'execution_id' => 'setExecutionId',
        'incident_timestamp' => 'setIncidentTimestamp',
        'incident_type' => 'setIncidentType',
        'activity_id' => 'setActivityId',
        'failed_activity_id' => 'setFailedActivityId',
        'cause_incident_id' => 'setCauseIncidentId',
        'root_cause_incident_id' => 'setRootCauseIncidentId',
        'configuration' => 'setConfiguration',
        'tenant_id' => 'setTenantId',
        'incident_message' => 'setIncidentMessage',
        'job_definition_id' => 'setJobDefinitionId',
        'annotation' => 'setAnnotation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_instance_id' => 'getProcessInstanceId',
        'execution_id' => 'getExecutionId',
        'incident_timestamp' => 'getIncidentTimestamp',
        'incident_type' => 'getIncidentType',
        'activity_id' => 'getActivityId',
        'failed_activity_id' => 'getFailedActivityId',
        'cause_incident_id' => 'getCauseIncidentId',
        'root_cause_incident_id' => 'getRootCauseIncidentId',
        'configuration' => 'getConfiguration',
        'tenant_id' => 'getTenantId',
        'incident_message' => 'getIncidentMessage',
        'job_definition_id' => 'getJobDefinitionId',
        'annotation' => 'getAnnotation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['incident_timestamp'] = isset($data['incident_timestamp']) ? $data['incident_timestamp'] : null;
        $this->container['incident_type'] = isset($data['incident_type']) ? $data['incident_type'] : null;
        $this->container['activity_id'] = isset($data['activity_id']) ? $data['activity_id'] : null;
        $this->container['failed_activity_id'] = isset($data['failed_activity_id']) ? $data['failed_activity_id'] : null;
        $this->container['cause_incident_id'] = isset($data['cause_incident_id']) ? $data['cause_incident_id'] : null;
        $this->container['root_cause_incident_id'] = isset($data['root_cause_incident_id']) ? $data['root_cause_incident_id'] : null;
        $this->container['configuration'] = isset($data['configuration']) ? $data['configuration'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['incident_message'] = isset($data['incident_message']) ? $data['incident_message'] : null;
        $this->container['job_definition_id'] = isset($data['job_definition_id']) ? $data['job_definition_id'] : null;
        $this->container['annotation'] = isset($data['annotation']) ? $data['annotation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The id of the incident.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id The id of the process definition this incident is associated with.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id The id of the process instance this incident is associated with.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id The id of the execution this incident is associated with.
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets incident_timestamp
     *
     * @return \DateTime
     */
    public function getIncidentTimestamp()
    {
        return $this->container['incident_timestamp'];
    }

    /**
     * Sets incident_timestamp
     *
     * @param \DateTime $incident_timestamp The time this incident happened. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setIncidentTimestamp($incident_timestamp)
    {
        $this->container['incident_timestamp'] = $incident_timestamp;

        return $this;
    }

    /**
     * Gets incident_type
     *
     * @return string
     */
    public function getIncidentType()
    {
        return $this->container['incident_type'];
    }

    /**
     * Sets incident_type
     *
     * @param string $incident_type The type of incident, for example: `failedJobs` will be returned in case of an incident which identified a failed job during the execution of a process instance. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/incidents/#incident-types) for a list of incident types.
     *
     * @return $this
     */
    public function setIncidentType($incident_type)
    {
        $this->container['incident_type'] = $incident_type;

        return $this;
    }

    /**
     * Gets activity_id
     *
     * @return string
     */
    public function getActivityId()
    {
        return $this->container['activity_id'];
    }

    /**
     * Sets activity_id
     *
     * @param string $activity_id The id of the activity this incident is associated with.
     *
     * @return $this
     */
    public function setActivityId($activity_id)
    {
        $this->container['activity_id'] = $activity_id;

        return $this;
    }

    /**
     * Gets failed_activity_id
     *
     * @return string
     */
    public function getFailedActivityId()
    {
        return $this->container['failed_activity_id'];
    }

    /**
     * Sets failed_activity_id
     *
     * @param string $failed_activity_id The id of the activity on which the last exception occurred.
     *
     * @return $this
     */
    public function setFailedActivityId($failed_activity_id)
    {
        $this->container['failed_activity_id'] = $failed_activity_id;

        return $this;
    }

    /**
     * Gets cause_incident_id
     *
     * @return string
     */
    public function getCauseIncidentId()
    {
        return $this->container['cause_incident_id'];
    }

    /**
     * Sets cause_incident_id
     *
     * @param string $cause_incident_id The id of the associated cause incident which has been triggered.
     *
     * @return $this
     */
    public function setCauseIncidentId($cause_incident_id)
    {
        $this->container['cause_incident_id'] = $cause_incident_id;

        return $this;
    }

    /**
     * Gets root_cause_incident_id
     *
     * @return string
     */
    public function getRootCauseIncidentId()
    {
        return $this->container['root_cause_incident_id'];
    }

    /**
     * Sets root_cause_incident_id
     *
     * @param string $root_cause_incident_id The id of the associated root cause incident which has been triggered.
     *
     * @return $this
     */
    public function setRootCauseIncidentId($root_cause_incident_id)
    {
        $this->container['root_cause_incident_id'] = $root_cause_incident_id;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return string
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param string $configuration The payload of this incident.
     *
     * @return $this
     */
    public function setConfiguration($configuration)
    {
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id The id of the tenant this incident is associated with.
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets incident_message
     *
     * @return string
     */
    public function getIncidentMessage()
    {
        return $this->container['incident_message'];
    }

    /**
     * Sets incident_message
     *
     * @param string $incident_message The message of this incident.
     *
     * @return $this
     */
    public function setIncidentMessage($incident_message)
    {
        $this->container['incident_message'] = $incident_message;

        return $this;
    }

    /**
     * Gets job_definition_id
     *
     * @return string
     */
    public function getJobDefinitionId()
    {
        return $this->container['job_definition_id'];
    }

    /**
     * Sets job_definition_id
     *
     * @param string $job_definition_id The job definition id the incident is associated with.
     *
     * @return $this
     */
    public function setJobDefinitionId($job_definition_id)
    {
        $this->container['job_definition_id'] = $job_definition_id;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return string
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param string $annotation The annotation set to the incident.
     *
     * @return $this
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
