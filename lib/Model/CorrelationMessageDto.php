<?php
/**
 * CorrelationMessageDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CorrelationMessageDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CorrelationMessageDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CorrelationMessageDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'message_name' => 'string',
        'business_key' => 'string',
        'tenant_id' => 'string',
        'without_tenant_id' => 'bool',
        'process_instance_id' => 'string',
        'correlation_keys' => 'map[string,\Swagger\Client\Model\VariableValueDto]',
        'local_correlation_keys' => 'map[string,\Swagger\Client\Model\VariableValueDto]',
        'process_variables' => 'map[string,\Swagger\Client\Model\VariableValueDto]',
        'process_variables_local' => 'map[string,\Swagger\Client\Model\VariableValueDto]',
        'process_variables_to_triggered_scope' => 'map[string,\Swagger\Client\Model\VariableValueDto]',
        'all' => 'bool',
        'result_enabled' => 'bool',
        'variables_in_result_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'message_name' => null,
        'business_key' => null,
        'tenant_id' => null,
        'without_tenant_id' => null,
        'process_instance_id' => null,
        'correlation_keys' => null,
        'local_correlation_keys' => null,
        'process_variables' => null,
        'process_variables_local' => null,
        'process_variables_to_triggered_scope' => null,
        'all' => null,
        'result_enabled' => null,
        'variables_in_result_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_name' => 'messageName',
        'business_key' => 'businessKey',
        'tenant_id' => 'tenantId',
        'without_tenant_id' => 'withoutTenantId',
        'process_instance_id' => 'processInstanceId',
        'correlation_keys' => 'correlationKeys',
        'local_correlation_keys' => 'localCorrelationKeys',
        'process_variables' => 'processVariables',
        'process_variables_local' => 'processVariablesLocal',
        'process_variables_to_triggered_scope' => 'processVariablesToTriggeredScope',
        'all' => 'all',
        'result_enabled' => 'resultEnabled',
        'variables_in_result_enabled' => 'variablesInResultEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_name' => 'setMessageName',
        'business_key' => 'setBusinessKey',
        'tenant_id' => 'setTenantId',
        'without_tenant_id' => 'setWithoutTenantId',
        'process_instance_id' => 'setProcessInstanceId',
        'correlation_keys' => 'setCorrelationKeys',
        'local_correlation_keys' => 'setLocalCorrelationKeys',
        'process_variables' => 'setProcessVariables',
        'process_variables_local' => 'setProcessVariablesLocal',
        'process_variables_to_triggered_scope' => 'setProcessVariablesToTriggeredScope',
        'all' => 'setAll',
        'result_enabled' => 'setResultEnabled',
        'variables_in_result_enabled' => 'setVariablesInResultEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_name' => 'getMessageName',
        'business_key' => 'getBusinessKey',
        'tenant_id' => 'getTenantId',
        'without_tenant_id' => 'getWithoutTenantId',
        'process_instance_id' => 'getProcessInstanceId',
        'correlation_keys' => 'getCorrelationKeys',
        'local_correlation_keys' => 'getLocalCorrelationKeys',
        'process_variables' => 'getProcessVariables',
        'process_variables_local' => 'getProcessVariablesLocal',
        'process_variables_to_triggered_scope' => 'getProcessVariablesToTriggeredScope',
        'all' => 'getAll',
        'result_enabled' => 'getResultEnabled',
        'variables_in_result_enabled' => 'getVariablesInResultEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message_name'] = isset($data['message_name']) ? $data['message_name'] : null;
        $this->container['business_key'] = isset($data['business_key']) ? $data['business_key'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : false;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['correlation_keys'] = isset($data['correlation_keys']) ? $data['correlation_keys'] : null;
        $this->container['local_correlation_keys'] = isset($data['local_correlation_keys']) ? $data['local_correlation_keys'] : null;
        $this->container['process_variables'] = isset($data['process_variables']) ? $data['process_variables'] : null;
        $this->container['process_variables_local'] = isset($data['process_variables_local']) ? $data['process_variables_local'] : null;
        $this->container['process_variables_to_triggered_scope'] = isset($data['process_variables_to_triggered_scope']) ? $data['process_variables_to_triggered_scope'] : null;
        $this->container['all'] = isset($data['all']) ? $data['all'] : false;
        $this->container['result_enabled'] = isset($data['result_enabled']) ? $data['result_enabled'] : false;
        $this->container['variables_in_result_enabled'] = isset($data['variables_in_result_enabled']) ? $data['variables_in_result_enabled'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_name
     *
     * @return string
     */
    public function getMessageName()
    {
        return $this->container['message_name'];
    }

    /**
     * Sets message_name
     *
     * @param string $message_name The name of the message to deliver.
     *
     * @return $this
     */
    public function setMessageName($message_name)
    {
        $this->container['message_name'] = $message_name;

        return $this;
    }

    /**
     * Gets business_key
     *
     * @return string
     */
    public function getBusinessKey()
    {
        return $this->container['business_key'];
    }

    /**
     * Sets business_key
     *
     * @param string $business_key Used for correlation of process instances that wait for incoming messages. Will only correlate to executions that belong to a process instance with the provided business key.
     *
     * @return $this
     */
    public function setBusinessKey($business_key)
    {
        $this->container['business_key'] = $business_key;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id Used to correlate the message for a tenant with the given id. Will only correlate to executions and process definitions which belong to the tenant. Must not be supplied in conjunction with a `withoutTenantId`.
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id A Boolean value that indicates whether the message should only be correlated to executions and process definitions which belong to no tenant or not. Value may only be `true`, as `false` is the default behavior. Must not be supplied in conjunction with a `tenantId`.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id Used to correlate the message to the process instance with the given id.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets correlation_keys
     *
     * @return map[string,\Swagger\Client\Model\VariableValueDto]
     */
    public function getCorrelationKeys()
    {
        return $this->container['correlation_keys'];
    }

    /**
     * Sets correlation_keys
     *
     * @param map[string,\Swagger\Client\Model\VariableValueDto] $correlation_keys Used for correlation of process instances that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against process instance variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
     *
     * @return $this
     */
    public function setCorrelationKeys($correlation_keys)
    {
        $this->container['correlation_keys'] = $correlation_keys;

        return $this;
    }

    /**
     * Gets local_correlation_keys
     *
     * @return map[string,\Swagger\Client\Model\VariableValueDto]
     */
    public function getLocalCorrelationKeys()
    {
        return $this->container['local_correlation_keys'];
    }

    /**
     * Sets local_correlation_keys
     *
     * @param map[string,\Swagger\Client\Model\VariableValueDto] $local_correlation_keys Local variables used for correlation of executions (process instances) that wait for incoming messages. Has to be a JSON object containing key-value pairs that are matched against local variables during correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
     *
     * @return $this
     */
    public function setLocalCorrelationKeys($local_correlation_keys)
    {
        $this->container['local_correlation_keys'] = $local_correlation_keys;

        return $this;
    }

    /**
     * Gets process_variables
     *
     * @return map[string,\Swagger\Client\Model\VariableValueDto]
     */
    public function getProcessVariables()
    {
        return $this->container['process_variables'];
    }

    /**
     * Sets process_variables
     *
     * @param map[string,\Swagger\Client\Model\VariableValueDto] $process_variables A map of variables that is injected into the triggered execution or process instance after the message has been delivered. Each key is a variable name and each value a JSON variable value object with the following properties.
     *
     * @return $this
     */
    public function setProcessVariables($process_variables)
    {
        $this->container['process_variables'] = $process_variables;

        return $this;
    }

    /**
     * Gets process_variables_local
     *
     * @return map[string,\Swagger\Client\Model\VariableValueDto]
     */
    public function getProcessVariablesLocal()
    {
        return $this->container['process_variables_local'];
    }

    /**
     * Sets process_variables_local
     *
     * @param map[string,\Swagger\Client\Model\VariableValueDto] $process_variables_local A map of local variables that is injected into the execution waiting on the message. Each key is a variable name and each value a JSON variable value object with the following properties.
     *
     * @return $this
     */
    public function setProcessVariablesLocal($process_variables_local)
    {
        $this->container['process_variables_local'] = $process_variables_local;

        return $this;
    }

    /**
     * Gets process_variables_to_triggered_scope
     *
     * @return map[string,\Swagger\Client\Model\VariableValueDto]
     */
    public function getProcessVariablesToTriggeredScope()
    {
        return $this->container['process_variables_to_triggered_scope'];
    }

    /**
     * Sets process_variables_to_triggered_scope
     *
     * @param map[string,\Swagger\Client\Model\VariableValueDto] $process_variables_to_triggered_scope A map of variables that is injected into the new scope triggered by message correlation. Each key is a variable name and each value a JSON variable value object with the following properties.
     *
     * @return $this
     */
    public function setProcessVariablesToTriggeredScope($process_variables_to_triggered_scope)
    {
        $this->container['process_variables_to_triggered_scope'] = $process_variables_to_triggered_scope;

        return $this;
    }

    /**
     * Gets all
     *
     * @return bool
     */
    public function getAll()
    {
        return $this->container['all'];
    }

    /**
     * Sets all
     *
     * @param bool $all A Boolean value that indicates whether the message should be correlated to exactly one entity or multiple entities. If the value is set to `false`, the message will be correlated to exactly one entity (execution or process definition). If the value is set to `true`, the message will be correlated to multiple executions and a process definition that can be instantiated by this message in one go.
     *
     * @return $this
     */
    public function setAll($all)
    {
        $this->container['all'] = $all;

        return $this;
    }

    /**
     * Gets result_enabled
     *
     * @return bool
     */
    public function getResultEnabled()
    {
        return $this->container['result_enabled'];
    }

    /**
     * Sets result_enabled
     *
     * @param bool $result_enabled A Boolean value that indicates whether the result of the correlation should be returned or not. If this property is set to `true`, there will be returned a list of message correlation result objects. Depending on the all property, there will be either one ore more returned results in the list.  The default value is `false`, which means no result will be returned.
     *
     * @return $this
     */
    public function setResultEnabled($result_enabled)
    {
        $this->container['result_enabled'] = $result_enabled;

        return $this;
    }

    /**
     * Gets variables_in_result_enabled
     *
     * @return bool
     */
    public function getVariablesInResultEnabled()
    {
        return $this->container['variables_in_result_enabled'];
    }

    /**
     * Sets variables_in_result_enabled
     *
     * @param bool $variables_in_result_enabled A Boolean value that indicates whether the result of the correlation should contain process variables or not. The parameter resultEnabled should be set to `true` in order to use this it.  The default value is `false`, which means the variables will not be returned.
     *
     * @return $this
     */
    public function setVariablesInResultEnabled($variables_in_result_enabled)
    {
        $this->container['variables_in_result_enabled'] = $variables_in_result_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
