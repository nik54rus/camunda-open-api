<?php
/**
 * ProcessInstanceQueryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ProcessInstanceQueryDto Class Doc Comment
 *
 * @category Class
 * @description A process instance query which defines a group of process instances
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessInstanceQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessInstanceQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deployment_id' => 'string',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_key_in' => 'string[]',
        'process_definition_key_not_in' => 'string[]',
        'business_key' => 'string',
        'business_key_like' => 'string',
        'case_instance_id' => 'string',
        'super_process_instance' => 'string',
        'sub_process_instance' => 'string',
        'super_case_instance' => 'string',
        'sub_case_instance' => 'string',
        'active' => 'bool',
        'suspended' => 'bool',
        'process_instance_ids' => 'string[]',
        'with_incident' => 'bool',
        'incident_id' => 'string',
        'incident_type' => 'string',
        'incident_message' => 'string',
        'incident_message_like' => 'string',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'process_definition_without_tenant_id' => 'bool',
        'activity_id_in' => 'string[]',
        'root_process_instances' => 'bool',
        'leaf_process_instances' => 'bool',
        'variables' => '\Swagger\Client\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'or_queries' => '\Swagger\Client\Model\ProcessInstanceQueryDto[]',
        'sorting' => '\Swagger\Client\Model\ProcessInstanceQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deployment_id' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_key_in' => null,
        'process_definition_key_not_in' => null,
        'business_key' => null,
        'business_key_like' => null,
        'case_instance_id' => null,
        'super_process_instance' => null,
        'sub_process_instance' => null,
        'super_case_instance' => null,
        'sub_case_instance' => null,
        'active' => null,
        'suspended' => null,
        'process_instance_ids' => null,
        'with_incident' => null,
        'incident_id' => null,
        'incident_type' => null,
        'incident_message' => null,
        'incident_message_like' => null,
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'process_definition_without_tenant_id' => null,
        'activity_id_in' => null,
        'root_process_instances' => null,
        'leaf_process_instances' => null,
        'variables' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'or_queries' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deployment_id' => 'deploymentId',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_key_in' => 'processDefinitionKeyIn',
        'process_definition_key_not_in' => 'processDefinitionKeyNotIn',
        'business_key' => 'businessKey',
        'business_key_like' => 'businessKeyLike',
        'case_instance_id' => 'caseInstanceId',
        'super_process_instance' => 'superProcessInstance',
        'sub_process_instance' => 'subProcessInstance',
        'super_case_instance' => 'superCaseInstance',
        'sub_case_instance' => 'subCaseInstance',
        'active' => 'active',
        'suspended' => 'suspended',
        'process_instance_ids' => 'processInstanceIds',
        'with_incident' => 'withIncident',
        'incident_id' => 'incidentId',
        'incident_type' => 'incidentType',
        'incident_message' => 'incidentMessage',
        'incident_message_like' => 'incidentMessageLike',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'process_definition_without_tenant_id' => 'processDefinitionWithoutTenantId',
        'activity_id_in' => 'activityIdIn',
        'root_process_instances' => 'rootProcessInstances',
        'leaf_process_instances' => 'leafProcessInstances',
        'variables' => 'variables',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'or_queries' => 'orQueries',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deployment_id' => 'setDeploymentId',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_key_in' => 'setProcessDefinitionKeyIn',
        'process_definition_key_not_in' => 'setProcessDefinitionKeyNotIn',
        'business_key' => 'setBusinessKey',
        'business_key_like' => 'setBusinessKeyLike',
        'case_instance_id' => 'setCaseInstanceId',
        'super_process_instance' => 'setSuperProcessInstance',
        'sub_process_instance' => 'setSubProcessInstance',
        'super_case_instance' => 'setSuperCaseInstance',
        'sub_case_instance' => 'setSubCaseInstance',
        'active' => 'setActive',
        'suspended' => 'setSuspended',
        'process_instance_ids' => 'setProcessInstanceIds',
        'with_incident' => 'setWithIncident',
        'incident_id' => 'setIncidentId',
        'incident_type' => 'setIncidentType',
        'incident_message' => 'setIncidentMessage',
        'incident_message_like' => 'setIncidentMessageLike',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'process_definition_without_tenant_id' => 'setProcessDefinitionWithoutTenantId',
        'activity_id_in' => 'setActivityIdIn',
        'root_process_instances' => 'setRootProcessInstances',
        'leaf_process_instances' => 'setLeafProcessInstances',
        'variables' => 'setVariables',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'or_queries' => 'setOrQueries',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deployment_id' => 'getDeploymentId',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_key_in' => 'getProcessDefinitionKeyIn',
        'process_definition_key_not_in' => 'getProcessDefinitionKeyNotIn',
        'business_key' => 'getBusinessKey',
        'business_key_like' => 'getBusinessKeyLike',
        'case_instance_id' => 'getCaseInstanceId',
        'super_process_instance' => 'getSuperProcessInstance',
        'sub_process_instance' => 'getSubProcessInstance',
        'super_case_instance' => 'getSuperCaseInstance',
        'sub_case_instance' => 'getSubCaseInstance',
        'active' => 'getActive',
        'suspended' => 'getSuspended',
        'process_instance_ids' => 'getProcessInstanceIds',
        'with_incident' => 'getWithIncident',
        'incident_id' => 'getIncidentId',
        'incident_type' => 'getIncidentType',
        'incident_message' => 'getIncidentMessage',
        'incident_message_like' => 'getIncidentMessageLike',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'process_definition_without_tenant_id' => 'getProcessDefinitionWithoutTenantId',
        'activity_id_in' => 'getActivityIdIn',
        'root_process_instances' => 'getRootProcessInstances',
        'leaf_process_instances' => 'getLeafProcessInstances',
        'variables' => 'getVariables',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'or_queries' => 'getOrQueries',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deployment_id'] = isset($data['deployment_id']) ? $data['deployment_id'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_key_in'] = isset($data['process_definition_key_in']) ? $data['process_definition_key_in'] : null;
        $this->container['process_definition_key_not_in'] = isset($data['process_definition_key_not_in']) ? $data['process_definition_key_not_in'] : null;
        $this->container['business_key'] = isset($data['business_key']) ? $data['business_key'] : null;
        $this->container['business_key_like'] = isset($data['business_key_like']) ? $data['business_key_like'] : null;
        $this->container['case_instance_id'] = isset($data['case_instance_id']) ? $data['case_instance_id'] : null;
        $this->container['super_process_instance'] = isset($data['super_process_instance']) ? $data['super_process_instance'] : null;
        $this->container['sub_process_instance'] = isset($data['sub_process_instance']) ? $data['sub_process_instance'] : null;
        $this->container['super_case_instance'] = isset($data['super_case_instance']) ? $data['super_case_instance'] : null;
        $this->container['sub_case_instance'] = isset($data['sub_case_instance']) ? $data['sub_case_instance'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['suspended'] = isset($data['suspended']) ? $data['suspended'] : null;
        $this->container['process_instance_ids'] = isset($data['process_instance_ids']) ? $data['process_instance_ids'] : null;
        $this->container['with_incident'] = isset($data['with_incident']) ? $data['with_incident'] : null;
        $this->container['incident_id'] = isset($data['incident_id']) ? $data['incident_id'] : null;
        $this->container['incident_type'] = isset($data['incident_type']) ? $data['incident_type'] : null;
        $this->container['incident_message'] = isset($data['incident_message']) ? $data['incident_message'] : null;
        $this->container['incident_message_like'] = isset($data['incident_message_like']) ? $data['incident_message_like'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : null;
        $this->container['process_definition_without_tenant_id'] = isset($data['process_definition_without_tenant_id']) ? $data['process_definition_without_tenant_id'] : null;
        $this->container['activity_id_in'] = isset($data['activity_id_in']) ? $data['activity_id_in'] : null;
        $this->container['root_process_instances'] = isset($data['root_process_instances']) ? $data['root_process_instances'] : null;
        $this->container['leaf_process_instances'] = isset($data['leaf_process_instances']) ? $data['leaf_process_instances'] : null;
        $this->container['variables'] = isset($data['variables']) ? $data['variables'] : null;
        $this->container['variable_names_ignore_case'] = isset($data['variable_names_ignore_case']) ? $data['variable_names_ignore_case'] : null;
        $this->container['variable_values_ignore_case'] = isset($data['variable_values_ignore_case']) ? $data['variable_values_ignore_case'] : null;
        $this->container['or_queries'] = isset($data['or_queries']) ? $data['or_queries'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deployment_id
     *
     * @return string
     */
    public function getDeploymentId()
    {
        return $this->container['deployment_id'];
    }

    /**
     * Sets deployment_id
     *
     * @param string $deployment_id Filter by the deployment the id belongs to.
     *
     * @return $this
     */
    public function setDeploymentId($deployment_id)
    {
        $this->container['deployment_id'] = $deployment_id;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id Filter by the process definition the instances run on.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key Filter by the key of the process definition the instances run on.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_key_in
     *
     * @return string[]
     */
    public function getProcessDefinitionKeyIn()
    {
        return $this->container['process_definition_key_in'];
    }

    /**
     * Sets process_definition_key_in
     *
     * @param string[] $process_definition_key_in Filter by a list of process definition keys. A process instance must have one of the given process definition keys. Must be a JSON array of Strings.
     *
     * @return $this
     */
    public function setProcessDefinitionKeyIn($process_definition_key_in)
    {
        $this->container['process_definition_key_in'] = $process_definition_key_in;

        return $this;
    }

    /**
     * Gets process_definition_key_not_in
     *
     * @return string[]
     */
    public function getProcessDefinitionKeyNotIn()
    {
        return $this->container['process_definition_key_not_in'];
    }

    /**
     * Sets process_definition_key_not_in
     *
     * @param string[] $process_definition_key_not_in Exclude instances by a list of process definition keys. A process instance must not have one of the given process definition keys. Must be a JSON array of Strings.
     *
     * @return $this
     */
    public function setProcessDefinitionKeyNotIn($process_definition_key_not_in)
    {
        $this->container['process_definition_key_not_in'] = $process_definition_key_not_in;

        return $this;
    }

    /**
     * Gets business_key
     *
     * @return string
     */
    public function getBusinessKey()
    {
        return $this->container['business_key'];
    }

    /**
     * Sets business_key
     *
     * @param string $business_key Filter by process instance business key.
     *
     * @return $this
     */
    public function setBusinessKey($business_key)
    {
        $this->container['business_key'] = $business_key;

        return $this;
    }

    /**
     * Gets business_key_like
     *
     * @return string
     */
    public function getBusinessKeyLike()
    {
        return $this->container['business_key_like'];
    }

    /**
     * Sets business_key_like
     *
     * @param string $business_key_like Filter by process instance business key that the parameter is a substring of.
     *
     * @return $this
     */
    public function setBusinessKeyLike($business_key_like)
    {
        $this->container['business_key_like'] = $business_key_like;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string $case_instance_id Filter by case instance id.
     *
     * @return $this
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets super_process_instance
     *
     * @return string
     */
    public function getSuperProcessInstance()
    {
        return $this->container['super_process_instance'];
    }

    /**
     * Sets super_process_instance
     *
     * @param string $super_process_instance Restrict query to all process instances that are sub process instances of the given process instance. Takes a process instance id.
     *
     * @return $this
     */
    public function setSuperProcessInstance($super_process_instance)
    {
        $this->container['super_process_instance'] = $super_process_instance;

        return $this;
    }

    /**
     * Gets sub_process_instance
     *
     * @return string
     */
    public function getSubProcessInstance()
    {
        return $this->container['sub_process_instance'];
    }

    /**
     * Sets sub_process_instance
     *
     * @param string $sub_process_instance Restrict query to all process instances that have the given process instance as a sub process instance. Takes a process instance id.
     *
     * @return $this
     */
    public function setSubProcessInstance($sub_process_instance)
    {
        $this->container['sub_process_instance'] = $sub_process_instance;

        return $this;
    }

    /**
     * Gets super_case_instance
     *
     * @return string
     */
    public function getSuperCaseInstance()
    {
        return $this->container['super_case_instance'];
    }

    /**
     * Sets super_case_instance
     *
     * @param string $super_case_instance Restrict query to all process instances that are sub process instances of the given case instance. Takes a case instance id.
     *
     * @return $this
     */
    public function setSuperCaseInstance($super_case_instance)
    {
        $this->container['super_case_instance'] = $super_case_instance;

        return $this;
    }

    /**
     * Gets sub_case_instance
     *
     * @return string
     */
    public function getSubCaseInstance()
    {
        return $this->container['sub_case_instance'];
    }

    /**
     * Sets sub_case_instance
     *
     * @param string $sub_case_instance Restrict query to all process instances that have the given case instance as a sub case instance. Takes a case instance id.
     *
     * @return $this
     */
    public function setSubCaseInstance($sub_case_instance)
    {
        $this->container['sub_case_instance'] = $sub_case_instance;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Only include active process instances. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool $suspended Only include suspended process instances. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets process_instance_ids
     *
     * @return string[]
     */
    public function getProcessInstanceIds()
    {
        return $this->container['process_instance_ids'];
    }

    /**
     * Sets process_instance_ids
     *
     * @param string[] $process_instance_ids Filter by a list of process instance ids. Must be a JSON array of Strings.
     *
     * @return $this
     */
    public function setProcessInstanceIds($process_instance_ids)
    {
        $this->container['process_instance_ids'] = $process_instance_ids;

        return $this;
    }

    /**
     * Gets with_incident
     *
     * @return bool
     */
    public function getWithIncident()
    {
        return $this->container['with_incident'];
    }

    /**
     * Sets with_incident
     *
     * @param bool $with_incident Filter by presence of incidents. Selects only process instances that have an incident.
     *
     * @return $this
     */
    public function setWithIncident($with_incident)
    {
        $this->container['with_incident'] = $with_incident;

        return $this;
    }

    /**
     * Gets incident_id
     *
     * @return string
     */
    public function getIncidentId()
    {
        return $this->container['incident_id'];
    }

    /**
     * Sets incident_id
     *
     * @param string $incident_id Filter by the incident id.
     *
     * @return $this
     */
    public function setIncidentId($incident_id)
    {
        $this->container['incident_id'] = $incident_id;

        return $this;
    }

    /**
     * Gets incident_type
     *
     * @return string
     */
    public function getIncidentType()
    {
        return $this->container['incident_type'];
    }

    /**
     * Sets incident_type
     *
     * @param string $incident_type Filter by the incident type. See the User Guide for a list of incident types.
     *
     * @return $this
     */
    public function setIncidentType($incident_type)
    {
        $this->container['incident_type'] = $incident_type;

        return $this;
    }

    /**
     * Gets incident_message
     *
     * @return string
     */
    public function getIncidentMessage()
    {
        return $this->container['incident_message'];
    }

    /**
     * Sets incident_message
     *
     * @param string $incident_message Filter by the incident message. Exact match.
     *
     * @return $this
     */
    public function setIncidentMessage($incident_message)
    {
        $this->container['incident_message'] = $incident_message;

        return $this;
    }

    /**
     * Gets incident_message_like
     *
     * @return string
     */
    public function getIncidentMessageLike()
    {
        return $this->container['incident_message_like'];
    }

    /**
     * Sets incident_message_like
     *
     * @param string $incident_message_like Filter by the incident message that the parameter is a substring of.
     *
     * @return $this
     */
    public function setIncidentMessageLike($incident_message_like)
    {
        $this->container['incident_message_like'] = $incident_message_like;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Filter by a list of tenant ids. A process instance must have one of the given tenant ids. Must be a JSON array of Strings.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id Only include process instances which belong to no tenant. Value may only be true, as false is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets process_definition_without_tenant_id
     *
     * @return bool
     */
    public function getProcessDefinitionWithoutTenantId()
    {
        return $this->container['process_definition_without_tenant_id'];
    }

    /**
     * Sets process_definition_without_tenant_id
     *
     * @param bool $process_definition_without_tenant_id Only include process instances which process definition has no tenant id.
     *
     * @return $this
     */
    public function setProcessDefinitionWithoutTenantId($process_definition_without_tenant_id)
    {
        $this->container['process_definition_without_tenant_id'] = $process_definition_without_tenant_id;

        return $this;
    }

    /**
     * Gets activity_id_in
     *
     * @return string[]
     */
    public function getActivityIdIn()
    {
        return $this->container['activity_id_in'];
    }

    /**
     * Sets activity_id_in
     *
     * @param string[] $activity_id_in Filter by a list of activity ids. A process instance must currently wait in a leaf activity with one of the given activity ids.
     *
     * @return $this
     */
    public function setActivityIdIn($activity_id_in)
    {
        $this->container['activity_id_in'] = $activity_id_in;

        return $this;
    }

    /**
     * Gets root_process_instances
     *
     * @return bool
     */
    public function getRootProcessInstances()
    {
        return $this->container['root_process_instances'];
    }

    /**
     * Sets root_process_instances
     *
     * @param bool $root_process_instances Restrict the query to all process instances that are top level process instances.
     *
     * @return $this
     */
    public function setRootProcessInstances($root_process_instances)
    {
        $this->container['root_process_instances'] = $root_process_instances;

        return $this;
    }

    /**
     * Gets leaf_process_instances
     *
     * @return bool
     */
    public function getLeafProcessInstances()
    {
        return $this->container['leaf_process_instances'];
    }

    /**
     * Sets leaf_process_instances
     *
     * @param bool $leaf_process_instances Restrict the query to all process instances that are leaf instances. (i.e. don't have any sub instances)
     *
     * @return $this
     */
    public function setLeafProcessInstances($leaf_process_instances)
    {
        $this->container['leaf_process_instances'] = $leaf_process_instances;

        return $this;
    }

    /**
     * Gets variables
     *
     * @return \Swagger\Client\Model\VariableQueryParameterDto[]
     */
    public function getVariables()
    {
        return $this->container['variables'];
    }

    /**
     * Sets variables
     *
     * @param \Swagger\Client\Model\VariableQueryParameterDto[] $variables A JSON array to only include process instances that have variables with certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name` (String) is the variable name, `operator` (String) is the comparison operator to be used and `value` the variable value. The `value` may be String, Number or Boolean.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`.
     *
     * @return $this
     */
    public function setVariables($variables)
    {
        $this->container['variables'] = $variables;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set to true variableName and variablename are treated as equal.
     *
     * @return $this
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set to true variableValue and variablevalue are treated as equal.
     *
     * @return $this
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets or_queries
     *
     * @return \Swagger\Client\Model\ProcessInstanceQueryDto[]
     */
    public function getOrQueries()
    {
        return $this->container['or_queries'];
    }

    /**
     * Sets or_queries
     *
     * @param \Swagger\Client\Model\ProcessInstanceQueryDto[] $or_queries A JSON array of nested process instance queries with OR semantics. A process instance matches a nested query if it fulfills at least one of the query's predicates. With multiple nested queries, a process instance must fulfill at least one predicate of each query (Conjunctive Normal Form). All process instance query properties can be used except for: `sorting` See the [User guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
     *
     * @return $this
     */
    public function setOrQueries($or_queries)
    {
        $this->container['or_queries'] = $or_queries;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \Swagger\Client\Model\ProcessInstanceQueryDtoSorting[]
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \Swagger\Client\Model\ProcessInstanceQueryDtoSorting[] $sorting Apply sorting of the result
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
