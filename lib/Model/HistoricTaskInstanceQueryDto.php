<?php
/**
 * HistoricTaskInstanceQueryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HistoricTaskInstanceQueryDto Class Doc Comment
 *
 * @category Class
 * @description A Historic Task instance query which defines a list of Historic Task instances
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HistoricTaskInstanceQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HistoricTaskInstanceQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_id' => 'string',
        'task_parent_task_id' => 'string',
        'process_instance_id' => 'string',
        'process_instance_business_key' => 'string',
        'process_instance_business_key_in' => 'string[]',
        'process_instance_business_key_like' => 'string',
        'execution_id' => 'string',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_name' => 'string',
        'case_instance_id' => 'string',
        'case_execution_id' => 'string',
        'case_definition_id' => 'string',
        'case_definition_key' => 'string',
        'case_definition_name' => 'string',
        'activity_instance_id_in' => 'string[]',
        'task_name' => 'string',
        'task_name_like' => 'string',
        'task_description' => 'string',
        'task_description_like' => 'string',
        'task_definition_key' => 'string',
        'task_definition_key_in' => 'string[]',
        'task_delete_reason' => 'string',
        'task_delete_reason_like' => 'string',
        'task_assignee' => 'string',
        'task_assignee_like' => 'string',
        'task_owner' => 'string',
        'task_owner_like' => 'string',
        'task_priority' => 'int',
        'assigned' => 'bool',
        'unassigned' => 'bool',
        'finished' => 'bool',
        'unfinished' => 'bool',
        'process_finished' => 'bool',
        'process_unfinished' => 'bool',
        'task_due_date' => '\DateTime',
        'task_due_date_before' => '\DateTime',
        'task_due_date_after' => '\DateTime',
        'without_task_due_date' => 'bool',
        'task_follow_up_date' => '\DateTime',
        'task_follow_up_date_before' => '\DateTime',
        'task_follow_up_date_after' => '\DateTime',
        'started_before' => '\DateTime',
        'started_after' => '\DateTime',
        'finished_before' => '\DateTime',
        'finished_after' => '\DateTime',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'task_variables' => '\Swagger\Client\Model\VariableQueryParameterDto[]',
        'process_variables' => '\Swagger\Client\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'task_involved_user' => 'string',
        'task_involved_group' => 'string',
        'task_had_candidate_user' => 'string',
        'task_had_candidate_group' => 'string',
        'with_candidate_groups' => 'bool',
        'without_candidate_groups' => 'bool',
        'or_queries' => '\Swagger\Client\Model\HistoricTaskInstanceQueryDto[]',
        'sorting' => '\Swagger\Client\Model\HistoricTaskInstanceQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_id' => null,
        'task_parent_task_id' => null,
        'process_instance_id' => null,
        'process_instance_business_key' => null,
        'process_instance_business_key_in' => null,
        'process_instance_business_key_like' => null,
        'execution_id' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_name' => null,
        'case_instance_id' => null,
        'case_execution_id' => null,
        'case_definition_id' => null,
        'case_definition_key' => null,
        'case_definition_name' => null,
        'activity_instance_id_in' => null,
        'task_name' => null,
        'task_name_like' => null,
        'task_description' => null,
        'task_description_like' => null,
        'task_definition_key' => null,
        'task_definition_key_in' => null,
        'task_delete_reason' => null,
        'task_delete_reason_like' => null,
        'task_assignee' => null,
        'task_assignee_like' => null,
        'task_owner' => null,
        'task_owner_like' => null,
        'task_priority' => 'int32',
        'assigned' => null,
        'unassigned' => null,
        'finished' => null,
        'unfinished' => null,
        'process_finished' => null,
        'process_unfinished' => null,
        'task_due_date' => 'date-time',
        'task_due_date_before' => 'date-time',
        'task_due_date_after' => 'date-time',
        'without_task_due_date' => null,
        'task_follow_up_date' => 'date-time',
        'task_follow_up_date_before' => 'date-time',
        'task_follow_up_date_after' => 'date-time',
        'started_before' => 'date-time',
        'started_after' => 'date-time',
        'finished_before' => 'date-time',
        'finished_after' => 'date-time',
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'task_variables' => null,
        'process_variables' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'task_involved_user' => null,
        'task_involved_group' => null,
        'task_had_candidate_user' => null,
        'task_had_candidate_group' => null,
        'with_candidate_groups' => null,
        'without_candidate_groups' => null,
        'or_queries' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_id' => 'taskId',
        'task_parent_task_id' => 'taskParentTaskId',
        'process_instance_id' => 'processInstanceId',
        'process_instance_business_key' => 'processInstanceBusinessKey',
        'process_instance_business_key_in' => 'processInstanceBusinessKeyIn',
        'process_instance_business_key_like' => 'processInstanceBusinessKeyLike',
        'execution_id' => 'executionId',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_name' => 'processDefinitionName',
        'case_instance_id' => 'caseInstanceId',
        'case_execution_id' => 'caseExecutionId',
        'case_definition_id' => 'caseDefinitionId',
        'case_definition_key' => 'caseDefinitionKey',
        'case_definition_name' => 'caseDefinitionName',
        'activity_instance_id_in' => 'activityInstanceIdIn',
        'task_name' => 'taskName',
        'task_name_like' => 'taskNameLike',
        'task_description' => 'taskDescription',
        'task_description_like' => 'taskDescriptionLike',
        'task_definition_key' => 'taskDefinitionKey',
        'task_definition_key_in' => 'taskDefinitionKeyIn',
        'task_delete_reason' => 'taskDeleteReason',
        'task_delete_reason_like' => 'taskDeleteReasonLike',
        'task_assignee' => 'taskAssignee',
        'task_assignee_like' => 'taskAssigneeLike',
        'task_owner' => 'taskOwner',
        'task_owner_like' => 'taskOwnerLike',
        'task_priority' => 'taskPriority',
        'assigned' => 'assigned',
        'unassigned' => 'unassigned',
        'finished' => 'finished',
        'unfinished' => 'unfinished',
        'process_finished' => 'processFinished',
        'process_unfinished' => 'processUnfinished',
        'task_due_date' => 'taskDueDate',
        'task_due_date_before' => 'taskDueDateBefore',
        'task_due_date_after' => 'taskDueDateAfter',
        'without_task_due_date' => 'withoutTaskDueDate',
        'task_follow_up_date' => 'taskFollowUpDate',
        'task_follow_up_date_before' => 'taskFollowUpDateBefore',
        'task_follow_up_date_after' => 'taskFollowUpDateAfter',
        'started_before' => 'startedBefore',
        'started_after' => 'startedAfter',
        'finished_before' => 'finishedBefore',
        'finished_after' => 'finishedAfter',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'task_variables' => 'taskVariables',
        'process_variables' => 'processVariables',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'task_involved_user' => 'taskInvolvedUser',
        'task_involved_group' => 'taskInvolvedGroup',
        'task_had_candidate_user' => 'taskHadCandidateUser',
        'task_had_candidate_group' => 'taskHadCandidateGroup',
        'with_candidate_groups' => 'withCandidateGroups',
        'without_candidate_groups' => 'withoutCandidateGroups',
        'or_queries' => 'orQueries',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_id' => 'setTaskId',
        'task_parent_task_id' => 'setTaskParentTaskId',
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_business_key' => 'setProcessInstanceBusinessKey',
        'process_instance_business_key_in' => 'setProcessInstanceBusinessKeyIn',
        'process_instance_business_key_like' => 'setProcessInstanceBusinessKeyLike',
        'execution_id' => 'setExecutionId',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_name' => 'setProcessDefinitionName',
        'case_instance_id' => 'setCaseInstanceId',
        'case_execution_id' => 'setCaseExecutionId',
        'case_definition_id' => 'setCaseDefinitionId',
        'case_definition_key' => 'setCaseDefinitionKey',
        'case_definition_name' => 'setCaseDefinitionName',
        'activity_instance_id_in' => 'setActivityInstanceIdIn',
        'task_name' => 'setTaskName',
        'task_name_like' => 'setTaskNameLike',
        'task_description' => 'setTaskDescription',
        'task_description_like' => 'setTaskDescriptionLike',
        'task_definition_key' => 'setTaskDefinitionKey',
        'task_definition_key_in' => 'setTaskDefinitionKeyIn',
        'task_delete_reason' => 'setTaskDeleteReason',
        'task_delete_reason_like' => 'setTaskDeleteReasonLike',
        'task_assignee' => 'setTaskAssignee',
        'task_assignee_like' => 'setTaskAssigneeLike',
        'task_owner' => 'setTaskOwner',
        'task_owner_like' => 'setTaskOwnerLike',
        'task_priority' => 'setTaskPriority',
        'assigned' => 'setAssigned',
        'unassigned' => 'setUnassigned',
        'finished' => 'setFinished',
        'unfinished' => 'setUnfinished',
        'process_finished' => 'setProcessFinished',
        'process_unfinished' => 'setProcessUnfinished',
        'task_due_date' => 'setTaskDueDate',
        'task_due_date_before' => 'setTaskDueDateBefore',
        'task_due_date_after' => 'setTaskDueDateAfter',
        'without_task_due_date' => 'setWithoutTaskDueDate',
        'task_follow_up_date' => 'setTaskFollowUpDate',
        'task_follow_up_date_before' => 'setTaskFollowUpDateBefore',
        'task_follow_up_date_after' => 'setTaskFollowUpDateAfter',
        'started_before' => 'setStartedBefore',
        'started_after' => 'setStartedAfter',
        'finished_before' => 'setFinishedBefore',
        'finished_after' => 'setFinishedAfter',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'task_variables' => 'setTaskVariables',
        'process_variables' => 'setProcessVariables',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'task_involved_user' => 'setTaskInvolvedUser',
        'task_involved_group' => 'setTaskInvolvedGroup',
        'task_had_candidate_user' => 'setTaskHadCandidateUser',
        'task_had_candidate_group' => 'setTaskHadCandidateGroup',
        'with_candidate_groups' => 'setWithCandidateGroups',
        'without_candidate_groups' => 'setWithoutCandidateGroups',
        'or_queries' => 'setOrQueries',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_id' => 'getTaskId',
        'task_parent_task_id' => 'getTaskParentTaskId',
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_business_key' => 'getProcessInstanceBusinessKey',
        'process_instance_business_key_in' => 'getProcessInstanceBusinessKeyIn',
        'process_instance_business_key_like' => 'getProcessInstanceBusinessKeyLike',
        'execution_id' => 'getExecutionId',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_name' => 'getProcessDefinitionName',
        'case_instance_id' => 'getCaseInstanceId',
        'case_execution_id' => 'getCaseExecutionId',
        'case_definition_id' => 'getCaseDefinitionId',
        'case_definition_key' => 'getCaseDefinitionKey',
        'case_definition_name' => 'getCaseDefinitionName',
        'activity_instance_id_in' => 'getActivityInstanceIdIn',
        'task_name' => 'getTaskName',
        'task_name_like' => 'getTaskNameLike',
        'task_description' => 'getTaskDescription',
        'task_description_like' => 'getTaskDescriptionLike',
        'task_definition_key' => 'getTaskDefinitionKey',
        'task_definition_key_in' => 'getTaskDefinitionKeyIn',
        'task_delete_reason' => 'getTaskDeleteReason',
        'task_delete_reason_like' => 'getTaskDeleteReasonLike',
        'task_assignee' => 'getTaskAssignee',
        'task_assignee_like' => 'getTaskAssigneeLike',
        'task_owner' => 'getTaskOwner',
        'task_owner_like' => 'getTaskOwnerLike',
        'task_priority' => 'getTaskPriority',
        'assigned' => 'getAssigned',
        'unassigned' => 'getUnassigned',
        'finished' => 'getFinished',
        'unfinished' => 'getUnfinished',
        'process_finished' => 'getProcessFinished',
        'process_unfinished' => 'getProcessUnfinished',
        'task_due_date' => 'getTaskDueDate',
        'task_due_date_before' => 'getTaskDueDateBefore',
        'task_due_date_after' => 'getTaskDueDateAfter',
        'without_task_due_date' => 'getWithoutTaskDueDate',
        'task_follow_up_date' => 'getTaskFollowUpDate',
        'task_follow_up_date_before' => 'getTaskFollowUpDateBefore',
        'task_follow_up_date_after' => 'getTaskFollowUpDateAfter',
        'started_before' => 'getStartedBefore',
        'started_after' => 'getStartedAfter',
        'finished_before' => 'getFinishedBefore',
        'finished_after' => 'getFinishedAfter',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'task_variables' => 'getTaskVariables',
        'process_variables' => 'getProcessVariables',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'task_involved_user' => 'getTaskInvolvedUser',
        'task_involved_group' => 'getTaskInvolvedGroup',
        'task_had_candidate_user' => 'getTaskHadCandidateUser',
        'task_had_candidate_group' => 'getTaskHadCandidateGroup',
        'with_candidate_groups' => 'getWithCandidateGroups',
        'without_candidate_groups' => 'getWithoutCandidateGroups',
        'or_queries' => 'getOrQueries',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_parent_task_id'] = isset($data['task_parent_task_id']) ? $data['task_parent_task_id'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_instance_business_key'] = isset($data['process_instance_business_key']) ? $data['process_instance_business_key'] : null;
        $this->container['process_instance_business_key_in'] = isset($data['process_instance_business_key_in']) ? $data['process_instance_business_key_in'] : null;
        $this->container['process_instance_business_key_like'] = isset($data['process_instance_business_key_like']) ? $data['process_instance_business_key_like'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_name'] = isset($data['process_definition_name']) ? $data['process_definition_name'] : null;
        $this->container['case_instance_id'] = isset($data['case_instance_id']) ? $data['case_instance_id'] : null;
        $this->container['case_execution_id'] = isset($data['case_execution_id']) ? $data['case_execution_id'] : null;
        $this->container['case_definition_id'] = isset($data['case_definition_id']) ? $data['case_definition_id'] : null;
        $this->container['case_definition_key'] = isset($data['case_definition_key']) ? $data['case_definition_key'] : null;
        $this->container['case_definition_name'] = isset($data['case_definition_name']) ? $data['case_definition_name'] : null;
        $this->container['activity_instance_id_in'] = isset($data['activity_instance_id_in']) ? $data['activity_instance_id_in'] : null;
        $this->container['task_name'] = isset($data['task_name']) ? $data['task_name'] : null;
        $this->container['task_name_like'] = isset($data['task_name_like']) ? $data['task_name_like'] : null;
        $this->container['task_description'] = isset($data['task_description']) ? $data['task_description'] : null;
        $this->container['task_description_like'] = isset($data['task_description_like']) ? $data['task_description_like'] : null;
        $this->container['task_definition_key'] = isset($data['task_definition_key']) ? $data['task_definition_key'] : null;
        $this->container['task_definition_key_in'] = isset($data['task_definition_key_in']) ? $data['task_definition_key_in'] : null;
        $this->container['task_delete_reason'] = isset($data['task_delete_reason']) ? $data['task_delete_reason'] : null;
        $this->container['task_delete_reason_like'] = isset($data['task_delete_reason_like']) ? $data['task_delete_reason_like'] : null;
        $this->container['task_assignee'] = isset($data['task_assignee']) ? $data['task_assignee'] : null;
        $this->container['task_assignee_like'] = isset($data['task_assignee_like']) ? $data['task_assignee_like'] : null;
        $this->container['task_owner'] = isset($data['task_owner']) ? $data['task_owner'] : null;
        $this->container['task_owner_like'] = isset($data['task_owner_like']) ? $data['task_owner_like'] : null;
        $this->container['task_priority'] = isset($data['task_priority']) ? $data['task_priority'] : null;
        $this->container['assigned'] = isset($data['assigned']) ? $data['assigned'] : null;
        $this->container['unassigned'] = isset($data['unassigned']) ? $data['unassigned'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : null;
        $this->container['unfinished'] = isset($data['unfinished']) ? $data['unfinished'] : null;
        $this->container['process_finished'] = isset($data['process_finished']) ? $data['process_finished'] : null;
        $this->container['process_unfinished'] = isset($data['process_unfinished']) ? $data['process_unfinished'] : null;
        $this->container['task_due_date'] = isset($data['task_due_date']) ? $data['task_due_date'] : null;
        $this->container['task_due_date_before'] = isset($data['task_due_date_before']) ? $data['task_due_date_before'] : null;
        $this->container['task_due_date_after'] = isset($data['task_due_date_after']) ? $data['task_due_date_after'] : null;
        $this->container['without_task_due_date'] = isset($data['without_task_due_date']) ? $data['without_task_due_date'] : null;
        $this->container['task_follow_up_date'] = isset($data['task_follow_up_date']) ? $data['task_follow_up_date'] : null;
        $this->container['task_follow_up_date_before'] = isset($data['task_follow_up_date_before']) ? $data['task_follow_up_date_before'] : null;
        $this->container['task_follow_up_date_after'] = isset($data['task_follow_up_date_after']) ? $data['task_follow_up_date_after'] : null;
        $this->container['started_before'] = isset($data['started_before']) ? $data['started_before'] : null;
        $this->container['started_after'] = isset($data['started_after']) ? $data['started_after'] : null;
        $this->container['finished_before'] = isset($data['finished_before']) ? $data['finished_before'] : null;
        $this->container['finished_after'] = isset($data['finished_after']) ? $data['finished_after'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : null;
        $this->container['task_variables'] = isset($data['task_variables']) ? $data['task_variables'] : null;
        $this->container['process_variables'] = isset($data['process_variables']) ? $data['process_variables'] : null;
        $this->container['variable_names_ignore_case'] = isset($data['variable_names_ignore_case']) ? $data['variable_names_ignore_case'] : null;
        $this->container['variable_values_ignore_case'] = isset($data['variable_values_ignore_case']) ? $data['variable_values_ignore_case'] : null;
        $this->container['task_involved_user'] = isset($data['task_involved_user']) ? $data['task_involved_user'] : null;
        $this->container['task_involved_group'] = isset($data['task_involved_group']) ? $data['task_involved_group'] : null;
        $this->container['task_had_candidate_user'] = isset($data['task_had_candidate_user']) ? $data['task_had_candidate_user'] : null;
        $this->container['task_had_candidate_group'] = isset($data['task_had_candidate_group']) ? $data['task_had_candidate_group'] : null;
        $this->container['with_candidate_groups'] = isset($data['with_candidate_groups']) ? $data['with_candidate_groups'] : null;
        $this->container['without_candidate_groups'] = isset($data['without_candidate_groups']) ? $data['without_candidate_groups'] : null;
        $this->container['or_queries'] = isset($data['or_queries']) ? $data['or_queries'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id Filter by task id.
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_parent_task_id
     *
     * @return string
     */
    public function getTaskParentTaskId()
    {
        return $this->container['task_parent_task_id'];
    }

    /**
     * Sets task_parent_task_id
     *
     * @param string $task_parent_task_id Filter by parent task id.
     *
     * @return $this
     */
    public function setTaskParentTaskId($task_parent_task_id)
    {
        $this->container['task_parent_task_id'] = $task_parent_task_id;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id Filter by process instance id.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_business_key
     *
     * @return string
     */
    public function getProcessInstanceBusinessKey()
    {
        return $this->container['process_instance_business_key'];
    }

    /**
     * Sets process_instance_business_key
     *
     * @param string $process_instance_business_key Filter by process instance business key.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKey($process_instance_business_key)
    {
        $this->container['process_instance_business_key'] = $process_instance_business_key;

        return $this;
    }

    /**
     * Gets process_instance_business_key_in
     *
     * @return string[]
     */
    public function getProcessInstanceBusinessKeyIn()
    {
        return $this->container['process_instance_business_key_in'];
    }

    /**
     * Sets process_instance_business_key_in
     *
     * @param string[] $process_instance_business_key_in Filter by process instances with one of the give business keys. The keys need to be in a comma-separated list.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyIn($process_instance_business_key_in)
    {
        $this->container['process_instance_business_key_in'] = $process_instance_business_key_in;

        return $this;
    }

    /**
     * Gets process_instance_business_key_like
     *
     * @return string
     */
    public function getProcessInstanceBusinessKeyLike()
    {
        return $this->container['process_instance_business_key_like'];
    }

    /**
     * Sets process_instance_business_key_like
     *
     * @param string $process_instance_business_key_like Filter by  process instance business key that has the parameter value as a substring.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyLike($process_instance_business_key_like)
    {
        $this->container['process_instance_business_key_like'] = $process_instance_business_key_like;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id Filter by the id of the execution that executed the task.
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id Filter by process definition id.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key Restrict to tasks that belong to a process definition with the given key.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_name
     *
     * @return string
     */
    public function getProcessDefinitionName()
    {
        return $this->container['process_definition_name'];
    }

    /**
     * Sets process_definition_name
     *
     * @param string $process_definition_name Restrict to tasks that belong to a process definition with the given name.
     *
     * @return $this
     */
    public function setProcessDefinitionName($process_definition_name)
    {
        $this->container['process_definition_name'] = $process_definition_name;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string $case_instance_id Filter by case instance id.
     *
     * @return $this
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets case_execution_id
     *
     * @return string
     */
    public function getCaseExecutionId()
    {
        return $this->container['case_execution_id'];
    }

    /**
     * Sets case_execution_id
     *
     * @param string $case_execution_id Filter by the id of the case execution that executed the task.
     *
     * @return $this
     */
    public function setCaseExecutionId($case_execution_id)
    {
        $this->container['case_execution_id'] = $case_execution_id;

        return $this;
    }

    /**
     * Gets case_definition_id
     *
     * @return string
     */
    public function getCaseDefinitionId()
    {
        return $this->container['case_definition_id'];
    }

    /**
     * Sets case_definition_id
     *
     * @param string $case_definition_id Filter by case definition id.
     *
     * @return $this
     */
    public function setCaseDefinitionId($case_definition_id)
    {
        $this->container['case_definition_id'] = $case_definition_id;

        return $this;
    }

    /**
     * Gets case_definition_key
     *
     * @return string
     */
    public function getCaseDefinitionKey()
    {
        return $this->container['case_definition_key'];
    }

    /**
     * Sets case_definition_key
     *
     * @param string $case_definition_key Restrict to tasks that belong to a case definition with the given key.
     *
     * @return $this
     */
    public function setCaseDefinitionKey($case_definition_key)
    {
        $this->container['case_definition_key'] = $case_definition_key;

        return $this;
    }

    /**
     * Gets case_definition_name
     *
     * @return string
     */
    public function getCaseDefinitionName()
    {
        return $this->container['case_definition_name'];
    }

    /**
     * Sets case_definition_name
     *
     * @param string $case_definition_name Restrict to tasks that belong to a case definition with the given name.
     *
     * @return $this
     */
    public function setCaseDefinitionName($case_definition_name)
    {
        $this->container['case_definition_name'] = $case_definition_name;

        return $this;
    }

    /**
     * Gets activity_instance_id_in
     *
     * @return string[]
     */
    public function getActivityInstanceIdIn()
    {
        return $this->container['activity_instance_id_in'];
    }

    /**
     * Sets activity_instance_id_in
     *
     * @param string[] $activity_instance_id_in Only include tasks which belong to one of the passed  activity instance ids.
     *
     * @return $this
     */
    public function setActivityInstanceIdIn($activity_instance_id_in)
    {
        $this->container['activity_instance_id_in'] = $activity_instance_id_in;

        return $this;
    }

    /**
     * Gets task_name
     *
     * @return string
     */
    public function getTaskName()
    {
        return $this->container['task_name'];
    }

    /**
     * Sets task_name
     *
     * @param string $task_name Restrict to tasks that have the given name.
     *
     * @return $this
     */
    public function setTaskName($task_name)
    {
        $this->container['task_name'] = $task_name;

        return $this;
    }

    /**
     * Gets task_name_like
     *
     * @return string
     */
    public function getTaskNameLike()
    {
        return $this->container['task_name_like'];
    }

    /**
     * Sets task_name_like
     *
     * @param string $task_name_like Restrict to tasks that have a name with the given parameter value as substring.
     *
     * @return $this
     */
    public function setTaskNameLike($task_name_like)
    {
        $this->container['task_name_like'] = $task_name_like;

        return $this;
    }

    /**
     * Gets task_description
     *
     * @return string
     */
    public function getTaskDescription()
    {
        return $this->container['task_description'];
    }

    /**
     * Sets task_description
     *
     * @param string $task_description Restrict to tasks that have the given description.
     *
     * @return $this
     */
    public function setTaskDescription($task_description)
    {
        $this->container['task_description'] = $task_description;

        return $this;
    }

    /**
     * Gets task_description_like
     *
     * @return string
     */
    public function getTaskDescriptionLike()
    {
        return $this->container['task_description_like'];
    }

    /**
     * Sets task_description_like
     *
     * @param string $task_description_like Restrict to tasks that have a description that has the parameter value as a substring.
     *
     * @return $this
     */
    public function setTaskDescriptionLike($task_description_like)
    {
        $this->container['task_description_like'] = $task_description_like;

        return $this;
    }

    /**
     * Gets task_definition_key
     *
     * @return string
     */
    public function getTaskDefinitionKey()
    {
        return $this->container['task_definition_key'];
    }

    /**
     * Sets task_definition_key
     *
     * @param string $task_definition_key Restrict to tasks that have the given key.
     *
     * @return $this
     */
    public function setTaskDefinitionKey($task_definition_key)
    {
        $this->container['task_definition_key'] = $task_definition_key;

        return $this;
    }

    /**
     * Gets task_definition_key_in
     *
     * @return string[]
     */
    public function getTaskDefinitionKeyIn()
    {
        return $this->container['task_definition_key_in'];
    }

    /**
     * Sets task_definition_key_in
     *
     * @param string[] $task_definition_key_in Restrict to tasks that have one of the passed  task definition keys.
     *
     * @return $this
     */
    public function setTaskDefinitionKeyIn($task_definition_key_in)
    {
        $this->container['task_definition_key_in'] = $task_definition_key_in;

        return $this;
    }

    /**
     * Gets task_delete_reason
     *
     * @return string
     */
    public function getTaskDeleteReason()
    {
        return $this->container['task_delete_reason'];
    }

    /**
     * Sets task_delete_reason
     *
     * @param string $task_delete_reason Restrict to tasks that have the given delete reason.
     *
     * @return $this
     */
    public function setTaskDeleteReason($task_delete_reason)
    {
        $this->container['task_delete_reason'] = $task_delete_reason;

        return $this;
    }

    /**
     * Gets task_delete_reason_like
     *
     * @return string
     */
    public function getTaskDeleteReasonLike()
    {
        return $this->container['task_delete_reason_like'];
    }

    /**
     * Sets task_delete_reason_like
     *
     * @param string $task_delete_reason_like Restrict to tasks that have a delete reason that has the parameter value as a substring.
     *
     * @return $this
     */
    public function setTaskDeleteReasonLike($task_delete_reason_like)
    {
        $this->container['task_delete_reason_like'] = $task_delete_reason_like;

        return $this;
    }

    /**
     * Gets task_assignee
     *
     * @return string
     */
    public function getTaskAssignee()
    {
        return $this->container['task_assignee'];
    }

    /**
     * Sets task_assignee
     *
     * @param string $task_assignee Restrict to tasks that the given user is assigned to.
     *
     * @return $this
     */
    public function setTaskAssignee($task_assignee)
    {
        $this->container['task_assignee'] = $task_assignee;

        return $this;
    }

    /**
     * Gets task_assignee_like
     *
     * @return string
     */
    public function getTaskAssigneeLike()
    {
        return $this->container['task_assignee_like'];
    }

    /**
     * Sets task_assignee_like
     *
     * @param string $task_assignee_like Restrict to tasks that are assigned to users with the parameter value as a substring.
     *
     * @return $this
     */
    public function setTaskAssigneeLike($task_assignee_like)
    {
        $this->container['task_assignee_like'] = $task_assignee_like;

        return $this;
    }

    /**
     * Gets task_owner
     *
     * @return string
     */
    public function getTaskOwner()
    {
        return $this->container['task_owner'];
    }

    /**
     * Sets task_owner
     *
     * @param string $task_owner Restrict to tasks that the given user owns.
     *
     * @return $this
     */
    public function setTaskOwner($task_owner)
    {
        $this->container['task_owner'] = $task_owner;

        return $this;
    }

    /**
     * Gets task_owner_like
     *
     * @return string
     */
    public function getTaskOwnerLike()
    {
        return $this->container['task_owner_like'];
    }

    /**
     * Sets task_owner_like
     *
     * @param string $task_owner_like Restrict to tasks that are owned by users with the parameter value as a substring.
     *
     * @return $this
     */
    public function setTaskOwnerLike($task_owner_like)
    {
        $this->container['task_owner_like'] = $task_owner_like;

        return $this;
    }

    /**
     * Gets task_priority
     *
     * @return int
     */
    public function getTaskPriority()
    {
        return $this->container['task_priority'];
    }

    /**
     * Sets task_priority
     *
     * @param int $task_priority Restrict to tasks that have the given priority.
     *
     * @return $this
     */
    public function setTaskPriority($task_priority)
    {
        $this->container['task_priority'] = $task_priority;

        return $this;
    }

    /**
     * Gets assigned
     *
     * @return bool
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param bool $assigned If set to `true`, restricts the query to all tasks that are assigned.
     *
     * @return $this
     */
    public function setAssigned($assigned)
    {
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets unassigned
     *
     * @return bool
     */
    public function getUnassigned()
    {
        return $this->container['unassigned'];
    }

    /**
     * Sets unassigned
     *
     * @param bool $unassigned If set to `true`, restricts the query to all tasks that are unassigned.
     *
     * @return $this
     */
    public function setUnassigned($unassigned)
    {
        $this->container['unassigned'] = $unassigned;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return bool
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param bool $finished Only include finished tasks. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets unfinished
     *
     * @return bool
     */
    public function getUnfinished()
    {
        return $this->container['unfinished'];
    }

    /**
     * Sets unfinished
     *
     * @param bool $unfinished Only include unfinished tasks. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setUnfinished($unfinished)
    {
        $this->container['unfinished'] = $unfinished;

        return $this;
    }

    /**
     * Gets process_finished
     *
     * @return bool
     */
    public function getProcessFinished()
    {
        return $this->container['process_finished'];
    }

    /**
     * Sets process_finished
     *
     * @param bool $process_finished Only include tasks of finished processes. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setProcessFinished($process_finished)
    {
        $this->container['process_finished'] = $process_finished;

        return $this;
    }

    /**
     * Gets process_unfinished
     *
     * @return bool
     */
    public function getProcessUnfinished()
    {
        return $this->container['process_unfinished'];
    }

    /**
     * Sets process_unfinished
     *
     * @param bool $process_unfinished Only include tasks of unfinished processes. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setProcessUnfinished($process_unfinished)
    {
        $this->container['process_unfinished'] = $process_unfinished;

        return $this;
    }

    /**
     * Gets task_due_date
     *
     * @return \DateTime
     */
    public function getTaskDueDate()
    {
        return $this->container['task_due_date'];
    }

    /**
     * Sets task_due_date
     *
     * @param \DateTime $task_due_date Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setTaskDueDate($task_due_date)
    {
        $this->container['task_due_date'] = $task_due_date;

        return $this;
    }

    /**
     * Gets task_due_date_before
     *
     * @return \DateTime
     */
    public function getTaskDueDateBefore()
    {
        return $this->container['task_due_date_before'];
    }

    /**
     * Sets task_due_date_before
     *
     * @param \DateTime $task_due_date_before Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setTaskDueDateBefore($task_due_date_before)
    {
        $this->container['task_due_date_before'] = $task_due_date_before;

        return $this;
    }

    /**
     * Gets task_due_date_after
     *
     * @return \DateTime
     */
    public function getTaskDueDateAfter()
    {
        return $this->container['task_due_date_after'];
    }

    /**
     * Sets task_due_date_after
     *
     * @param \DateTime $task_due_date_after Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setTaskDueDateAfter($task_due_date_after)
    {
        $this->container['task_due_date_after'] = $task_due_date_after;

        return $this;
    }

    /**
     * Gets without_task_due_date
     *
     * @return bool
     */
    public function getWithoutTaskDueDate()
    {
        return $this->container['without_task_due_date'];
    }

    /**
     * Sets without_task_due_date
     *
     * @param bool $without_task_due_date Only include tasks which have no due date. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTaskDueDate($without_task_due_date)
    {
        $this->container['without_task_due_date'] = $without_task_due_date;

        return $this;
    }

    /**
     * Gets task_follow_up_date
     *
     * @return \DateTime
     */
    public function getTaskFollowUpDate()
    {
        return $this->container['task_follow_up_date'];
    }

    /**
     * Sets task_follow_up_date
     *
     * @param \DateTime $task_follow_up_date Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setTaskFollowUpDate($task_follow_up_date)
    {
        $this->container['task_follow_up_date'] = $task_follow_up_date;

        return $this;
    }

    /**
     * Gets task_follow_up_date_before
     *
     * @return \DateTime
     */
    public function getTaskFollowUpDateBefore()
    {
        return $this->container['task_follow_up_date_before'];
    }

    /**
     * Sets task_follow_up_date_before
     *
     * @param \DateTime $task_follow_up_date_before Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setTaskFollowUpDateBefore($task_follow_up_date_before)
    {
        $this->container['task_follow_up_date_before'] = $task_follow_up_date_before;

        return $this;
    }

    /**
     * Gets task_follow_up_date_after
     *
     * @return \DateTime
     */
    public function getTaskFollowUpDateAfter()
    {
        return $this->container['task_follow_up_date_after'];
    }

    /**
     * Sets task_follow_up_date_after
     *
     * @param \DateTime $task_follow_up_date_after Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setTaskFollowUpDateAfter($task_follow_up_date_after)
    {
        $this->container['task_follow_up_date_after'] = $task_follow_up_date_after;

        return $this;
    }

    /**
     * Gets started_before
     *
     * @return \DateTime
     */
    public function getStartedBefore()
    {
        return $this->container['started_before'];
    }

    /**
     * Sets started_before
     *
     * @param \DateTime $started_before Restrict to tasks that were started before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setStartedBefore($started_before)
    {
        $this->container['started_before'] = $started_before;

        return $this;
    }

    /**
     * Gets started_after
     *
     * @return \DateTime
     */
    public function getStartedAfter()
    {
        return $this->container['started_after'];
    }

    /**
     * Sets started_after
     *
     * @param \DateTime $started_after Restrict to tasks that were started after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setStartedAfter($started_after)
    {
        $this->container['started_after'] = $started_after;

        return $this;
    }

    /**
     * Gets finished_before
     *
     * @return \DateTime
     */
    public function getFinishedBefore()
    {
        return $this->container['finished_before'];
    }

    /**
     * Sets finished_before
     *
     * @param \DateTime $finished_before Restrict to tasks that were finished before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setFinishedBefore($finished_before)
    {
        $this->container['finished_before'] = $finished_before;

        return $this;
    }

    /**
     * Gets finished_after
     *
     * @return \DateTime
     */
    public function getFinishedAfter()
    {
        return $this->container['finished_after'];
    }

    /**
     * Sets finished_after
     *
     * @param \DateTime $finished_after Restrict to tasks that were finished after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.000+0200`.
     *
     * @return $this
     */
    public function setFinishedAfter($finished_after)
    {
        $this->container['finished_after'] = $finished_after;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Filter by a  list of tenant ids. A task instance must have one of the given tenant ids.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id Only include historic task instances that belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets task_variables
     *
     * @return \Swagger\Client\Model\VariableQueryParameterDto[]
     */
    public function getTaskVariables()
    {
        return $this->container['task_variables'];
    }

    /**
     * Sets task_variables
     *
     * @param \Swagger\Client\Model\VariableQueryParameterDto[] $task_variables Only include tasks that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`.  `key` and `value` may not contain underscore or comma characters.
     *
     * @return $this
     */
    public function setTaskVariables($task_variables)
    {
        $this->container['task_variables'] = $task_variables;

        return $this;
    }

    /**
     * Gets process_variables
     *
     * @return \Swagger\Client\Model\VariableQueryParameterDto[]
     */
    public function getProcessVariables()
    {
        return $this->container['process_variables'];
    }

    /**
     * Sets process_variables
     *
     * @param \Swagger\Client\Model\VariableQueryParameterDto[] $process_variables Only include tasks that belong to process instances that have variables with certain values. Variable filtering expressions are comma-separated and are structured as follows:  A valid parameter value has the form `key_operator_value`. `key` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. **Note:** Values are always treated as `String` objects on server side.   Valid operator values are: * `eq` - equal to; * `neq` - not equal to; * `gt` - greater than; * `gteq` - greater than or equal to; * `lt` - lower than; * `lteq` - lower than or equal to; * `like`; * `notLike`.  `key` and `value` may not contain underscore or comma characters.
     *
     * @return $this
     */
    public function setProcessVariables($process_variables)
    {
        $this->container['process_variables'] = $process_variables;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool $variable_names_ignore_case Match the variable name provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
     *
     * @return $this
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool $variable_values_ignore_case Match the variable value provided in `taskVariables` and `processVariables` case- insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
     *
     * @return $this
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets task_involved_user
     *
     * @return string
     */
    public function getTaskInvolvedUser()
    {
        return $this->container['task_involved_user'];
    }

    /**
     * Sets task_involved_user
     *
     * @param string $task_involved_user Restrict to tasks with a historic identity link to the given user.
     *
     * @return $this
     */
    public function setTaskInvolvedUser($task_involved_user)
    {
        $this->container['task_involved_user'] = $task_involved_user;

        return $this;
    }

    /**
     * Gets task_involved_group
     *
     * @return string
     */
    public function getTaskInvolvedGroup()
    {
        return $this->container['task_involved_group'];
    }

    /**
     * Sets task_involved_group
     *
     * @param string $task_involved_group Restrict to tasks with a historic identity link to the given group.
     *
     * @return $this
     */
    public function setTaskInvolvedGroup($task_involved_group)
    {
        $this->container['task_involved_group'] = $task_involved_group;

        return $this;
    }

    /**
     * Gets task_had_candidate_user
     *
     * @return string
     */
    public function getTaskHadCandidateUser()
    {
        return $this->container['task_had_candidate_user'];
    }

    /**
     * Sets task_had_candidate_user
     *
     * @param string $task_had_candidate_user Restrict to tasks with a historic identity link to the given candidate user.
     *
     * @return $this
     */
    public function setTaskHadCandidateUser($task_had_candidate_user)
    {
        $this->container['task_had_candidate_user'] = $task_had_candidate_user;

        return $this;
    }

    /**
     * Gets task_had_candidate_group
     *
     * @return string
     */
    public function getTaskHadCandidateGroup()
    {
        return $this->container['task_had_candidate_group'];
    }

    /**
     * Sets task_had_candidate_group
     *
     * @param string $task_had_candidate_group Restrict to tasks with a historic identity link to the given candidate group.
     *
     * @return $this
     */
    public function setTaskHadCandidateGroup($task_had_candidate_group)
    {
        $this->container['task_had_candidate_group'] = $task_had_candidate_group;

        return $this;
    }

    /**
     * Gets with_candidate_groups
     *
     * @return bool
     */
    public function getWithCandidateGroups()
    {
        return $this->container['with_candidate_groups'];
    }

    /**
     * Sets with_candidate_groups
     *
     * @param bool $with_candidate_groups Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithCandidateGroups($with_candidate_groups)
    {
        $this->container['with_candidate_groups'] = $with_candidate_groups;

        return $this;
    }

    /**
     * Gets without_candidate_groups
     *
     * @return bool
     */
    public function getWithoutCandidateGroups()
    {
        return $this->container['without_candidate_groups'];
    }

    /**
     * Sets without_candidate_groups
     *
     * @param bool $without_candidate_groups Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutCandidateGroups($without_candidate_groups)
    {
        $this->container['without_candidate_groups'] = $without_candidate_groups;

        return $this;
    }

    /**
     * Gets or_queries
     *
     * @return \Swagger\Client\Model\HistoricTaskInstanceQueryDto[]
     */
    public function getOrQueries()
    {
        return $this->container['or_queries'];
    }

    /**
     * Sets or_queries
     *
     * @param \Swagger\Client\Model\HistoricTaskInstanceQueryDto[] $or_queries A JSON array of nested historic task instance queries with OR semantics.  A task instance matches a nested query if it fulfills at least one of the query's predicates.  With multiple nested queries, a task instance must fulfill at least one predicate of each query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All task instance query properties can be used except for: `sorting`, `withCandidateGroups`, ` withoutCandidateGroups`.  See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
     *
     * @return $this
     */
    public function setOrQueries($or_queries)
    {
        $this->container['or_queries'] = $or_queries;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \Swagger\Client\Model\HistoricTaskInstanceQueryDtoSorting[]
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \Swagger\Client\Model\HistoricTaskInstanceQueryDtoSorting[] $sorting An array of criteria to sort the result by. Each element of the array is                     an object that specifies one ordering. The position in the array                     identifies the rank of an ordering, i.e., whether it is primary, secondary,                     etc. Sorting has no effect for `count` endpoints
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
