<?php
/**
 * CleanableHistoricProcessInstanceReportResultDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Model;

use \ArrayAccess;
use \Camunda\Client\ObjectSerializer;

/**
 * CleanableHistoricProcessInstanceReportResultDto Class Doc Comment
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class CleanableHistoricProcessInstanceReportResultDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $CamundaModelName = 'CleanableHistoricProcessInstanceReportResultDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaTypes = [
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_name' => 'string',
        'process_definition_version' => 'int',
        'history_time_to_live' => 'int',
        'finished_process_instance_count' => 'int',
        'cleanable_process_instance_count' => 'int',
        'tenant_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaFormats = [
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_name' => null,
        'process_definition_version' => 'int32',
        'history_time_to_live' => 'int32',
        'finished_process_instance_count' => 'int64',
        'cleanable_process_instance_count' => 'int64',
        'tenant_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaTypes()
    {
        return self::$CamundaTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaFormats()
    {
        return self::$CamundaFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_name' => 'processDefinitionName',
        'process_definition_version' => 'processDefinitionVersion',
        'history_time_to_live' => 'historyTimeToLive',
        'finished_process_instance_count' => 'finishedProcessInstanceCount',
        'cleanable_process_instance_count' => 'cleanableProcessInstanceCount',
        'tenant_id' => 'tenantId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_name' => 'setProcessDefinitionName',
        'process_definition_version' => 'setProcessDefinitionVersion',
        'history_time_to_live' => 'setHistoryTimeToLive',
        'finished_process_instance_count' => 'setFinishedProcessInstanceCount',
        'cleanable_process_instance_count' => 'setCleanableProcessInstanceCount',
        'tenant_id' => 'setTenantId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_name' => 'getProcessDefinitionName',
        'process_definition_version' => 'getProcessDefinitionVersion',
        'history_time_to_live' => 'getHistoryTimeToLive',
        'finished_process_instance_count' => 'getFinishedProcessInstanceCount',
        'cleanable_process_instance_count' => 'getCleanableProcessInstanceCount',
        'tenant_id' => 'getTenantId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$CamundaModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_name'] = isset($data['process_definition_name']) ? $data['process_definition_name'] : null;
        $this->container['process_definition_version'] = isset($data['process_definition_version']) ? $data['process_definition_version'] : null;
        $this->container['history_time_to_live'] = isset($data['history_time_to_live']) ? $data['history_time_to_live'] : null;
        $this->container['finished_process_instance_count'] = isset($data['finished_process_instance_count']) ? $data['finished_process_instance_count'] : null;
        $this->container['cleanable_process_instance_count'] = isset($data['cleanable_process_instance_count']) ? $data['cleanable_process_instance_count'] : null;
        $this->container['tenant_id'] = isset($data['tenant_id']) ? $data['tenant_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id The id of the process definition.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key The key of the process definition.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_name
     *
     * @return string
     */
    public function getProcessDefinitionName()
    {
        return $this->container['process_definition_name'];
    }

    /**
     * Sets process_definition_name
     *
     * @param string $process_definition_name The name of the process definition.
     *
     * @return $this
     */
    public function setProcessDefinitionName($process_definition_name)
    {
        $this->container['process_definition_name'] = $process_definition_name;

        return $this;
    }

    /**
     * Gets process_definition_version
     *
     * @return int
     */
    public function getProcessDefinitionVersion()
    {
        return $this->container['process_definition_version'];
    }

    /**
     * Sets process_definition_version
     *
     * @param int $process_definition_version The version of the process definition.
     *
     * @return $this
     */
    public function setProcessDefinitionVersion($process_definition_version)
    {
        $this->container['process_definition_version'] = $process_definition_version;

        return $this;
    }

    /**
     * Gets history_time_to_live
     *
     * @return int
     */
    public function getHistoryTimeToLive()
    {
        return $this->container['history_time_to_live'];
    }

    /**
     * Sets history_time_to_live
     *
     * @param int $history_time_to_live The history time to live of the process definition.
     *
     * @return $this
     */
    public function setHistoryTimeToLive($history_time_to_live)
    {
        $this->container['history_time_to_live'] = $history_time_to_live;

        return $this;
    }

    /**
     * Gets finished_process_instance_count
     *
     * @return int
     */
    public function getFinishedProcessInstanceCount()
    {
        return $this->container['finished_process_instance_count'];
    }

    /**
     * Sets finished_process_instance_count
     *
     * @param int $finished_process_instance_count The count of the finished historic process instances.
     *
     * @return $this
     */
    public function setFinishedProcessInstanceCount($finished_process_instance_count)
    {
        $this->container['finished_process_instance_count'] = $finished_process_instance_count;

        return $this;
    }

    /**
     * Gets cleanable_process_instance_count
     *
     * @return int
     */
    public function getCleanableProcessInstanceCount()
    {
        return $this->container['cleanable_process_instance_count'];
    }

    /**
     * Sets cleanable_process_instance_count
     *
     * @param int $cleanable_process_instance_count The count of the cleanable historic process instances, referring to history time to live.
     *
     * @return $this
     */
    public function setCleanableProcessInstanceCount($cleanable_process_instance_count)
    {
        $this->container['cleanable_process_instance_count'] = $cleanable_process_instance_count;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id The tenant id of the process definition.
     *
     * @return $this
     */
    public function setTenantId($tenant_id)
    {
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
