<?php
/**
 * VariableInstanceQueryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Model;

use \ArrayAccess;
use \Camunda\Client\ObjectSerializer;

/**
 * VariableInstanceQueryDto Class Doc Comment
 *
 * @category Class
 * @description A variable instance query which defines a list of variable instances
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class VariableInstanceQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $CamundaModelName = 'VariableInstanceQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaTypes = [
        'variable_name' => 'string',
        'variable_name_like' => 'string',
        'process_instance_id_in' => 'string[]',
        'execution_id_in' => 'string[]',
        'case_instance_id_in' => 'string[]',
        'case_execution_id_in' => 'string[]',
        'task_id_in' => 'string[]',
        'batch_id_in' => 'string[]',
        'activity_instance_id_in' => 'string[]',
        'tenant_id_in' => 'string[]',
        'variable_values' => '\Camunda\Client\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'variable_scope_id_in' => 'string[]',
        'sorting' => '\Camunda\Client\Model\VariableInstanceQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaFormats = [
        'variable_name' => null,
        'variable_name_like' => null,
        'process_instance_id_in' => null,
        'execution_id_in' => null,
        'case_instance_id_in' => null,
        'case_execution_id_in' => null,
        'task_id_in' => null,
        'batch_id_in' => null,
        'activity_instance_id_in' => null,
        'tenant_id_in' => null,
        'variable_values' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'variable_scope_id_in' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaTypes()
    {
        return self::$CamundaTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaFormats()
    {
        return self::$CamundaFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'variable_name' => 'variableName',
        'variable_name_like' => 'variableNameLike',
        'process_instance_id_in' => 'processInstanceIdIn',
        'execution_id_in' => 'executionIdIn',
        'case_instance_id_in' => 'caseInstanceIdIn',
        'case_execution_id_in' => 'caseExecutionIdIn',
        'task_id_in' => 'taskIdIn',
        'batch_id_in' => 'batchIdIn',
        'activity_instance_id_in' => 'activityInstanceIdIn',
        'tenant_id_in' => 'tenantIdIn',
        'variable_values' => 'variableValues',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'variable_scope_id_in' => 'variableScopeIdIn',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'variable_name' => 'setVariableName',
        'variable_name_like' => 'setVariableNameLike',
        'process_instance_id_in' => 'setProcessInstanceIdIn',
        'execution_id_in' => 'setExecutionIdIn',
        'case_instance_id_in' => 'setCaseInstanceIdIn',
        'case_execution_id_in' => 'setCaseExecutionIdIn',
        'task_id_in' => 'setTaskIdIn',
        'batch_id_in' => 'setBatchIdIn',
        'activity_instance_id_in' => 'setActivityInstanceIdIn',
        'tenant_id_in' => 'setTenantIdIn',
        'variable_values' => 'setVariableValues',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'variable_scope_id_in' => 'setVariableScopeIdIn',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'variable_name' => 'getVariableName',
        'variable_name_like' => 'getVariableNameLike',
        'process_instance_id_in' => 'getProcessInstanceIdIn',
        'execution_id_in' => 'getExecutionIdIn',
        'case_instance_id_in' => 'getCaseInstanceIdIn',
        'case_execution_id_in' => 'getCaseExecutionIdIn',
        'task_id_in' => 'getTaskIdIn',
        'batch_id_in' => 'getBatchIdIn',
        'activity_instance_id_in' => 'getActivityInstanceIdIn',
        'tenant_id_in' => 'getTenantIdIn',
        'variable_values' => 'getVariableValues',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'variable_scope_id_in' => 'getVariableScopeIdIn',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$CamundaModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['variable_name'] = isset($data['variable_name']) ? $data['variable_name'] : null;
        $this->container['variable_name_like'] = isset($data['variable_name_like']) ? $data['variable_name_like'] : null;
        $this->container['process_instance_id_in'] = isset($data['process_instance_id_in']) ? $data['process_instance_id_in'] : null;
        $this->container['execution_id_in'] = isset($data['execution_id_in']) ? $data['execution_id_in'] : null;
        $this->container['case_instance_id_in'] = isset($data['case_instance_id_in']) ? $data['case_instance_id_in'] : null;
        $this->container['case_execution_id_in'] = isset($data['case_execution_id_in']) ? $data['case_execution_id_in'] : null;
        $this->container['task_id_in'] = isset($data['task_id_in']) ? $data['task_id_in'] : null;
        $this->container['batch_id_in'] = isset($data['batch_id_in']) ? $data['batch_id_in'] : null;
        $this->container['activity_instance_id_in'] = isset($data['activity_instance_id_in']) ? $data['activity_instance_id_in'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['variable_values'] = isset($data['variable_values']) ? $data['variable_values'] : null;
        $this->container['variable_names_ignore_case'] = isset($data['variable_names_ignore_case']) ? $data['variable_names_ignore_case'] : null;
        $this->container['variable_values_ignore_case'] = isset($data['variable_values_ignore_case']) ? $data['variable_values_ignore_case'] : null;
        $this->container['variable_scope_id_in'] = isset($data['variable_scope_id_in']) ? $data['variable_scope_id_in'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variable_name
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string $variable_name Filter by variable instance name.
     *
     * @return $this
     */
    public function setVariableName($variable_name)
    {
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets variable_name_like
     *
     * @return string
     */
    public function getVariableNameLike()
    {
        return $this->container['variable_name_like'];
    }

    /**
     * Sets variable_name_like
     *
     * @param string $variable_name_like Filter by the variable instance name. The parameter can include the wildcard `%` to express like-strategy such as: starts with (`%`name), ends with (name`%`) or contains (`%`name`%`).
     *
     * @return $this
     */
    public function setVariableNameLike($variable_name_like)
    {
        $this->container['variable_name_like'] = $variable_name_like;

        return $this;
    }

    /**
     * Gets process_instance_id_in
     *
     * @return string[]
     */
    public function getProcessInstanceIdIn()
    {
        return $this->container['process_instance_id_in'];
    }

    /**
     * Sets process_instance_id_in
     *
     * @param string[] $process_instance_id_in Only include variable instances which belong to one of the passed  process instance ids.
     *
     * @return $this
     */
    public function setProcessInstanceIdIn($process_instance_id_in)
    {
        $this->container['process_instance_id_in'] = $process_instance_id_in;

        return $this;
    }

    /**
     * Gets execution_id_in
     *
     * @return string[]
     */
    public function getExecutionIdIn()
    {
        return $this->container['execution_id_in'];
    }

    /**
     * Sets execution_id_in
     *
     * @param string[] $execution_id_in Only include variable instances which belong to one of the passed  execution ids.
     *
     * @return $this
     */
    public function setExecutionIdIn($execution_id_in)
    {
        $this->container['execution_id_in'] = $execution_id_in;

        return $this;
    }

    /**
     * Gets case_instance_id_in
     *
     * @return string[]
     */
    public function getCaseInstanceIdIn()
    {
        return $this->container['case_instance_id_in'];
    }

    /**
     * Sets case_instance_id_in
     *
     * @param string[] $case_instance_id_in Only include variable instances which belong to one of the passed  case instance ids.
     *
     * @return $this
     */
    public function setCaseInstanceIdIn($case_instance_id_in)
    {
        $this->container['case_instance_id_in'] = $case_instance_id_in;

        return $this;
    }

    /**
     * Gets case_execution_id_in
     *
     * @return string[]
     */
    public function getCaseExecutionIdIn()
    {
        return $this->container['case_execution_id_in'];
    }

    /**
     * Sets case_execution_id_in
     *
     * @param string[] $case_execution_id_in Only include variable instances which belong to one of the passed  case execution ids.
     *
     * @return $this
     */
    public function setCaseExecutionIdIn($case_execution_id_in)
    {
        $this->container['case_execution_id_in'] = $case_execution_id_in;

        return $this;
    }

    /**
     * Gets task_id_in
     *
     * @return string[]
     */
    public function getTaskIdIn()
    {
        return $this->container['task_id_in'];
    }

    /**
     * Sets task_id_in
     *
     * @param string[] $task_id_in Only include variable instances which belong to one of the passed  task ids.
     *
     * @return $this
     */
    public function setTaskIdIn($task_id_in)
    {
        $this->container['task_id_in'] = $task_id_in;

        return $this;
    }

    /**
     * Gets batch_id_in
     *
     * @return string[]
     */
    public function getBatchIdIn()
    {
        return $this->container['batch_id_in'];
    }

    /**
     * Sets batch_id_in
     *
     * @param string[] $batch_id_in Only include variable instances which belong to one of the passed  batch ids.
     *
     * @return $this
     */
    public function setBatchIdIn($batch_id_in)
    {
        $this->container['batch_id_in'] = $batch_id_in;

        return $this;
    }

    /**
     * Gets activity_instance_id_in
     *
     * @return string[]
     */
    public function getActivityInstanceIdIn()
    {
        return $this->container['activity_instance_id_in'];
    }

    /**
     * Sets activity_instance_id_in
     *
     * @param string[] $activity_instance_id_in Only include variable instances which belong to one of the passed  activity instance ids.
     *
     * @return $this
     */
    public function setActivityInstanceIdIn($activity_instance_id_in)
    {
        $this->container['activity_instance_id_in'] = $activity_instance_id_in;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Only include variable instances which belong to one of the passed  tenant ids.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets variable_values
     *
     * @return \Camunda\Client\Model\VariableQueryParameterDto[]
     */
    public function getVariableValues()
    {
        return $this->container['variable_values'];
    }

    /**
     * Sets variable_values
     *
     * @param \Camunda\Client\Model\VariableQueryParameterDto[] $variable_values An array to only include variable instances that have the certain values. The array consists of objects with the three properties `name`, `operator` and `value`. `name (String)` is the variable name, `operator (String)` is the comparison operator to be used and `value` the variable value. `value` may be `String`, `Number` or `Boolean`.  Valid operator values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`
     *
     * @return $this
     */
    public function setVariableValues($variable_values)
    {
        $this->container['variable_values'] = $variable_values;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool $variable_names_ignore_case Match all variable names provided in `variableValues` case-insensitively. If set to `true` **variableName** and **variablename** are treated as equal.
     *
     * @return $this
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool $variable_values_ignore_case Match all variable values provided in `variableValues` case-insensitively. If set to `true` **variableValue** and **variablevalue** are treated as equal.
     *
     * @return $this
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets variable_scope_id_in
     *
     * @return string[]
     */
    public function getVariableScopeIdIn()
    {
        return $this->container['variable_scope_id_in'];
    }

    /**
     * Sets variable_scope_id_in
     *
     * @param string[] $variable_scope_id_in Only include variable instances which belong to one of passed scope ids.
     *
     * @return $this
     */
    public function setVariableScopeIdIn($variable_scope_id_in)
    {
        $this->container['variable_scope_id_in'] = $variable_scope_id_in;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \Camunda\Client\Model\VariableInstanceQueryDtoSorting[]
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \Camunda\Client\Model\VariableInstanceQueryDtoSorting[] $sorting An array of criteria to sort the result by. Each element of the array is an object that specifies one ordering.                       The position in the array identifies the rank of an ordering, i.e., whether it is primary, secondary, etc.                       Sorting has no effect for `count` endpoints
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
