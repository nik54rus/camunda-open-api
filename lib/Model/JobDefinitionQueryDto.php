<?php
/**
 * JobDefinitionQueryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.56
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * JobDefinitionQueryDto Class Doc Comment
 *
 * @category Class
 * @description A Job definition query which defines a list of Job definitions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JobDefinitionQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JobDefinitionQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'job_definition_id' => 'string',
        'activity_id_in' => 'string[]',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'job_type' => 'string',
        'job_configuration' => 'string',
        'active' => 'bool',
        'suspended' => 'bool',
        'with_overriding_job_priority' => 'bool',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'include_job_definitions_without_tenant_id' => 'bool',
        'sorting' => '\Swagger\Client\Model\JobDefinitionQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'job_definition_id' => null,
        'activity_id_in' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'job_type' => null,
        'job_configuration' => null,
        'active' => null,
        'suspended' => null,
        'with_overriding_job_priority' => null,
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'include_job_definitions_without_tenant_id' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'job_definition_id' => 'jobDefinitionId',
        'activity_id_in' => 'activityIdIn',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'job_type' => 'jobType',
        'job_configuration' => 'jobConfiguration',
        'active' => 'active',
        'suspended' => 'suspended',
        'with_overriding_job_priority' => 'withOverridingJobPriority',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'include_job_definitions_without_tenant_id' => 'includeJobDefinitionsWithoutTenantId',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'job_definition_id' => 'setJobDefinitionId',
        'activity_id_in' => 'setActivityIdIn',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'job_type' => 'setJobType',
        'job_configuration' => 'setJobConfiguration',
        'active' => 'setActive',
        'suspended' => 'setSuspended',
        'with_overriding_job_priority' => 'setWithOverridingJobPriority',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'include_job_definitions_without_tenant_id' => 'setIncludeJobDefinitionsWithoutTenantId',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'job_definition_id' => 'getJobDefinitionId',
        'activity_id_in' => 'getActivityIdIn',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'job_type' => 'getJobType',
        'job_configuration' => 'getJobConfiguration',
        'active' => 'getActive',
        'suspended' => 'getSuspended',
        'with_overriding_job_priority' => 'getWithOverridingJobPriority',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'include_job_definitions_without_tenant_id' => 'getIncludeJobDefinitionsWithoutTenantId',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['job_definition_id'] = isset($data['job_definition_id']) ? $data['job_definition_id'] : null;
        $this->container['activity_id_in'] = isset($data['activity_id_in']) ? $data['activity_id_in'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['job_type'] = isset($data['job_type']) ? $data['job_type'] : null;
        $this->container['job_configuration'] = isset($data['job_configuration']) ? $data['job_configuration'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['suspended'] = isset($data['suspended']) ? $data['suspended'] : null;
        $this->container['with_overriding_job_priority'] = isset($data['with_overriding_job_priority']) ? $data['with_overriding_job_priority'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : null;
        $this->container['include_job_definitions_without_tenant_id'] = isset($data['include_job_definitions_without_tenant_id']) ? $data['include_job_definitions_without_tenant_id'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets job_definition_id
     *
     * @return string
     */
    public function getJobDefinitionId()
    {
        return $this->container['job_definition_id'];
    }

    /**
     * Sets job_definition_id
     *
     * @param string $job_definition_id Filter by job definition id.
     *
     * @return $this
     */
    public function setJobDefinitionId($job_definition_id)
    {
        $this->container['job_definition_id'] = $job_definition_id;

        return $this;
    }

    /**
     * Gets activity_id_in
     *
     * @return string[]
     */
    public function getActivityIdIn()
    {
        return $this->container['activity_id_in'];
    }

    /**
     * Sets activity_id_in
     *
     * @param string[] $activity_id_in Only include job definitions which belong to one of the passed activity ids.
     *
     * @return $this
     */
    public function setActivityIdIn($activity_id_in)
    {
        $this->container['activity_id_in'] = $activity_id_in;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id Only include job definitions which exist for the given process definition id.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key Only include job definitions which exist for the given process definition key.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets job_type
     *
     * @return string
     */
    public function getJobType()
    {
        return $this->container['job_type'];
    }

    /**
     * Sets job_type
     *
     * @param string $job_type Only include job definitions which exist for the given job type. See the [User Guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/the-job-executor/#job-creation) for more information about job types.
     *
     * @return $this
     */
    public function setJobType($job_type)
    {
        $this->container['job_type'] = $job_type;

        return $this;
    }

    /**
     * Gets job_configuration
     *
     * @return string
     */
    public function getJobConfiguration()
    {
        return $this->container['job_configuration'];
    }

    /**
     * Sets job_configuration
     *
     * @param string $job_configuration Only include job definitions which exist for the given job configuration. For example: for timer jobs it is the timer configuration.
     *
     * @return $this
     */
    public function setJobConfiguration($job_configuration)
    {
        $this->container['job_configuration'] = $job_configuration;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Only include active job definitions. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool $suspended Only include suspended job definitions. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets with_overriding_job_priority
     *
     * @return bool
     */
    public function getWithOverridingJobPriority()
    {
        return $this->container['with_overriding_job_priority'];
    }

    /**
     * Sets with_overriding_job_priority
     *
     * @param bool $with_overriding_job_priority Only include job definitions that have an overriding job priority defined. The only effective value is `true`. If set to `false`, this filter is not applied.
     *
     * @return $this
     */
    public function setWithOverridingJobPriority($with_overriding_job_priority)
    {
        $this->container['with_overriding_job_priority'] = $with_overriding_job_priority;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Only include job definitions which belong to one of the passed tenant ids.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id Only include job definitions which belong to no tenant. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets include_job_definitions_without_tenant_id
     *
     * @return bool
     */
    public function getIncludeJobDefinitionsWithoutTenantId()
    {
        return $this->container['include_job_definitions_without_tenant_id'];
    }

    /**
     * Sets include_job_definitions_without_tenant_id
     *
     * @param bool $include_job_definitions_without_tenant_id Include job definitions which belong to no tenant. Can be used in combination with `tenantIdIn`. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setIncludeJobDefinitionsWithoutTenantId($include_job_definitions_without_tenant_id)
    {
        $this->container['include_job_definitions_without_tenant_id'] = $include_job_definitions_without_tenant_id;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \Swagger\Client\Model\JobDefinitionQueryDtoSorting[]
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \Swagger\Client\Model\JobDefinitionQueryDtoSorting[] $sorting An array of criteria to sort the result by. Each element of the array is                        an object that specifies one ordering. The position in the array                        identifies the rank of an ordering, i.e., whether it is primary, secondary,                        etc. Sorting has no effect for `count` endpoints.
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
