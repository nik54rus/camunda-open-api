<?php
/**
 * TaskQueryDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */

/**
 * Camunda Platform REST API
 *
 * OpenApi Spec for Camunda Platform REST API.
 *
 * OpenAPI spec version: 7.21.1-ee
 * 
 * Generated by: https://github.com/nik54rus/camunda-open-api.git
 * Camunda Codegen version: 3.0.56
 */


namespace Camunda\Client\Model;

use \ArrayAccess;
use \Camunda\Client\ObjectSerializer;

/**
 * TaskQueryDto Class Doc Comment
 *
 * @category Class
 * @description A Task query which defines a group of Tasks.
 * @package  Camunda\Client
 * @author   Nik54rus
 * @link     https://github.com/nik54rus/camunda-open-api
 */
class TaskQueryDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $CamundaModelName = 'TaskQueryDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaTypes = [
        'task_id' => 'string',
        'task_id_in' => 'string[]',
        'process_instance_id' => 'string',
        'process_instance_id_in' => 'string[]',
        'process_instance_business_key' => 'string',
        'process_instance_business_key_expression' => 'string',
        'process_instance_business_key_in' => 'string[]',
        'process_instance_business_key_like' => 'string',
        'process_instance_business_key_like_expression' => 'string',
        'process_definition_id' => 'string',
        'process_definition_key' => 'string',
        'process_definition_key_in' => 'string[]',
        'process_definition_name' => 'string',
        'process_definition_name_like' => 'string',
        'execution_id' => 'string',
        'case_instance_id' => 'string',
        'case_instance_business_key' => 'string',
        'case_instance_business_key_like' => 'string',
        'case_definition_id' => 'string',
        'case_definition_key' => 'string',
        'case_definition_name' => 'string',
        'case_definition_name_like' => 'string',
        'case_execution_id' => 'string',
        'activity_instance_id_in' => 'string[]',
        'tenant_id_in' => 'string[]',
        'without_tenant_id' => 'bool',
        'assignee' => 'string',
        'assignee_expression' => 'string',
        'assignee_like' => 'string',
        'assignee_like_expression' => 'string',
        'assignee_in' => 'string[]',
        'assignee_not_in' => 'string[]',
        'owner' => 'string',
        'owner_expression' => 'string',
        'candidate_group' => 'string',
        'candidate_group_expression' => 'string',
        'candidate_user' => 'string',
        'candidate_user_expression' => 'string',
        'include_assigned_tasks' => 'bool',
        'involved_user' => 'string',
        'involved_user_expression' => 'string',
        'assigned' => 'bool',
        'unassigned' => 'bool',
        'task_definition_key' => 'string',
        'task_definition_key_in' => 'string[]',
        'task_definition_key_like' => 'string',
        'name' => 'string',
        'name_not_equal' => 'string',
        'name_like' => 'string',
        'name_not_like' => 'string',
        'description' => 'string',
        'description_like' => 'string',
        'priority' => 'int',
        'max_priority' => 'int',
        'min_priority' => 'int',
        'due_date' => '\DateTime',
        'due_date_expression' => 'string',
        'due_after' => '\DateTime',
        'due_after_expression' => 'string',
        'due_before' => '\DateTime',
        'due_before_expression' => 'string',
        'without_due_date' => 'bool',
        'follow_up_date' => '\DateTime',
        'follow_up_date_expression' => 'string',
        'follow_up_after' => '\DateTime',
        'follow_up_after_expression' => 'string',
        'follow_up_before' => 'string',
        'follow_up_before_expression' => 'string',
        'follow_up_before_or_not_existent' => '\DateTime',
        'follow_up_before_or_not_existent_expression' => 'string',
        'created_on' => '\DateTime',
        'created_on_expression' => 'string',
        'created_after' => '\DateTime',
        'created_after_expression' => 'string',
        'created_before' => '\DateTime',
        'created_before_expression' => 'string',
        'updated_after' => '\DateTime',
        'updated_after_expression' => 'string',
        'delegation_state' => 'string',
        'candidate_groups' => 'string[]',
        'candidate_groups_expression' => 'string',
        'with_candidate_groups' => 'bool',
        'without_candidate_groups' => 'bool',
        'with_candidate_users' => 'bool',
        'without_candidate_users' => 'bool',
        'active' => 'bool',
        'suspended' => 'bool',
        'task_variables' => '\Camunda\Client\Model\VariableQueryParameterDto[]',
        'process_variables' => '\Camunda\Client\Model\VariableQueryParameterDto[]',
        'case_instance_variables' => '\Camunda\Client\Model\VariableQueryParameterDto[]',
        'variable_names_ignore_case' => 'bool',
        'variable_values_ignore_case' => 'bool',
        'parent_task_id' => 'string',
        'or_queries' => '\Camunda\Client\Model\TaskQueryDto[]',
        'sorting' => '\Camunda\Client\Model\TaskQueryDtoSorting[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $CamundaFormats = [
        'task_id' => null,
        'task_id_in' => null,
        'process_instance_id' => null,
        'process_instance_id_in' => null,
        'process_instance_business_key' => null,
        'process_instance_business_key_expression' => null,
        'process_instance_business_key_in' => null,
        'process_instance_business_key_like' => null,
        'process_instance_business_key_like_expression' => null,
        'process_definition_id' => null,
        'process_definition_key' => null,
        'process_definition_key_in' => null,
        'process_definition_name' => null,
        'process_definition_name_like' => null,
        'execution_id' => null,
        'case_instance_id' => null,
        'case_instance_business_key' => null,
        'case_instance_business_key_like' => null,
        'case_definition_id' => null,
        'case_definition_key' => null,
        'case_definition_name' => null,
        'case_definition_name_like' => null,
        'case_execution_id' => null,
        'activity_instance_id_in' => null,
        'tenant_id_in' => null,
        'without_tenant_id' => null,
        'assignee' => null,
        'assignee_expression' => null,
        'assignee_like' => null,
        'assignee_like_expression' => null,
        'assignee_in' => null,
        'assignee_not_in' => null,
        'owner' => null,
        'owner_expression' => null,
        'candidate_group' => null,
        'candidate_group_expression' => null,
        'candidate_user' => null,
        'candidate_user_expression' => null,
        'include_assigned_tasks' => null,
        'involved_user' => null,
        'involved_user_expression' => null,
        'assigned' => null,
        'unassigned' => null,
        'task_definition_key' => null,
        'task_definition_key_in' => null,
        'task_definition_key_like' => null,
        'name' => null,
        'name_not_equal' => null,
        'name_like' => null,
        'name_not_like' => null,
        'description' => null,
        'description_like' => null,
        'priority' => 'int32',
        'max_priority' => 'int32',
        'min_priority' => 'int32',
        'due_date' => 'date-time',
        'due_date_expression' => null,
        'due_after' => 'date-time',
        'due_after_expression' => null,
        'due_before' => 'date-time',
        'due_before_expression' => null,
        'without_due_date' => null,
        'follow_up_date' => 'date-time',
        'follow_up_date_expression' => null,
        'follow_up_after' => 'date-time',
        'follow_up_after_expression' => null,
        'follow_up_before' => null,
        'follow_up_before_expression' => null,
        'follow_up_before_or_not_existent' => 'date-time',
        'follow_up_before_or_not_existent_expression' => null,
        'created_on' => 'date-time',
        'created_on_expression' => null,
        'created_after' => 'date-time',
        'created_after_expression' => null,
        'created_before' => 'date-time',
        'created_before_expression' => null,
        'updated_after' => 'date-time',
        'updated_after_expression' => null,
        'delegation_state' => null,
        'candidate_groups' => null,
        'candidate_groups_expression' => null,
        'with_candidate_groups' => null,
        'without_candidate_groups' => null,
        'with_candidate_users' => null,
        'without_candidate_users' => null,
        'active' => null,
        'suspended' => null,
        'task_variables' => null,
        'process_variables' => null,
        'case_instance_variables' => null,
        'variable_names_ignore_case' => null,
        'variable_values_ignore_case' => null,
        'parent_task_id' => null,
        'or_queries' => null,
        'sorting' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaTypes()
    {
        return self::$CamundaTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function CamundaFormats()
    {
        return self::$CamundaFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_id' => 'taskId',
        'task_id_in' => 'taskIdIn',
        'process_instance_id' => 'processInstanceId',
        'process_instance_id_in' => 'processInstanceIdIn',
        'process_instance_business_key' => 'processInstanceBusinessKey',
        'process_instance_business_key_expression' => 'processInstanceBusinessKeyExpression',
        'process_instance_business_key_in' => 'processInstanceBusinessKeyIn',
        'process_instance_business_key_like' => 'processInstanceBusinessKeyLike',
        'process_instance_business_key_like_expression' => 'processInstanceBusinessKeyLikeExpression',
        'process_definition_id' => 'processDefinitionId',
        'process_definition_key' => 'processDefinitionKey',
        'process_definition_key_in' => 'processDefinitionKeyIn',
        'process_definition_name' => 'processDefinitionName',
        'process_definition_name_like' => 'processDefinitionNameLike',
        'execution_id' => 'executionId',
        'case_instance_id' => 'caseInstanceId',
        'case_instance_business_key' => 'caseInstanceBusinessKey',
        'case_instance_business_key_like' => 'caseInstanceBusinessKeyLike',
        'case_definition_id' => 'caseDefinitionId',
        'case_definition_key' => 'caseDefinitionKey',
        'case_definition_name' => 'caseDefinitionName',
        'case_definition_name_like' => 'caseDefinitionNameLike',
        'case_execution_id' => 'caseExecutionId',
        'activity_instance_id_in' => 'activityInstanceIdIn',
        'tenant_id_in' => 'tenantIdIn',
        'without_tenant_id' => 'withoutTenantId',
        'assignee' => 'assignee',
        'assignee_expression' => 'assigneeExpression',
        'assignee_like' => 'assigneeLike',
        'assignee_like_expression' => 'assigneeLikeExpression',
        'assignee_in' => 'assigneeIn',
        'assignee_not_in' => 'assigneeNotIn',
        'owner' => 'owner',
        'owner_expression' => 'ownerExpression',
        'candidate_group' => 'candidateGroup',
        'candidate_group_expression' => 'candidateGroupExpression',
        'candidate_user' => 'candidateUser',
        'candidate_user_expression' => 'candidateUserExpression',
        'include_assigned_tasks' => 'includeAssignedTasks',
        'involved_user' => 'involvedUser',
        'involved_user_expression' => 'involvedUserExpression',
        'assigned' => 'assigned',
        'unassigned' => 'unassigned',
        'task_definition_key' => 'taskDefinitionKey',
        'task_definition_key_in' => 'taskDefinitionKeyIn',
        'task_definition_key_like' => 'taskDefinitionKeyLike',
        'name' => 'name',
        'name_not_equal' => 'nameNotEqual',
        'name_like' => 'nameLike',
        'name_not_like' => 'nameNotLike',
        'description' => 'description',
        'description_like' => 'descriptionLike',
        'priority' => 'priority',
        'max_priority' => 'maxPriority',
        'min_priority' => 'minPriority',
        'due_date' => 'dueDate',
        'due_date_expression' => 'dueDateExpression',
        'due_after' => 'dueAfter',
        'due_after_expression' => 'dueAfterExpression',
        'due_before' => 'dueBefore',
        'due_before_expression' => 'dueBeforeExpression',
        'without_due_date' => 'withoutDueDate',
        'follow_up_date' => 'followUpDate',
        'follow_up_date_expression' => 'followUpDateExpression',
        'follow_up_after' => 'followUpAfter',
        'follow_up_after_expression' => 'followUpAfterExpression',
        'follow_up_before' => 'followUpBefore',
        'follow_up_before_expression' => 'followUpBeforeExpression',
        'follow_up_before_or_not_existent' => 'followUpBeforeOrNotExistent',
        'follow_up_before_or_not_existent_expression' => 'followUpBeforeOrNotExistentExpression',
        'created_on' => 'createdOn',
        'created_on_expression' => 'createdOnExpression',
        'created_after' => 'createdAfter',
        'created_after_expression' => 'createdAfterExpression',
        'created_before' => 'createdBefore',
        'created_before_expression' => 'createdBeforeExpression',
        'updated_after' => 'updatedAfter',
        'updated_after_expression' => 'updatedAfterExpression',
        'delegation_state' => 'delegationState',
        'candidate_groups' => 'candidateGroups',
        'candidate_groups_expression' => 'candidateGroupsExpression',
        'with_candidate_groups' => 'withCandidateGroups',
        'without_candidate_groups' => 'withoutCandidateGroups',
        'with_candidate_users' => 'withCandidateUsers',
        'without_candidate_users' => 'withoutCandidateUsers',
        'active' => 'active',
        'suspended' => 'suspended',
        'task_variables' => 'taskVariables',
        'process_variables' => 'processVariables',
        'case_instance_variables' => 'caseInstanceVariables',
        'variable_names_ignore_case' => 'variableNamesIgnoreCase',
        'variable_values_ignore_case' => 'variableValuesIgnoreCase',
        'parent_task_id' => 'parentTaskId',
        'or_queries' => 'orQueries',
        'sorting' => 'sorting'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_id' => 'setTaskId',
        'task_id_in' => 'setTaskIdIn',
        'process_instance_id' => 'setProcessInstanceId',
        'process_instance_id_in' => 'setProcessInstanceIdIn',
        'process_instance_business_key' => 'setProcessInstanceBusinessKey',
        'process_instance_business_key_expression' => 'setProcessInstanceBusinessKeyExpression',
        'process_instance_business_key_in' => 'setProcessInstanceBusinessKeyIn',
        'process_instance_business_key_like' => 'setProcessInstanceBusinessKeyLike',
        'process_instance_business_key_like_expression' => 'setProcessInstanceBusinessKeyLikeExpression',
        'process_definition_id' => 'setProcessDefinitionId',
        'process_definition_key' => 'setProcessDefinitionKey',
        'process_definition_key_in' => 'setProcessDefinitionKeyIn',
        'process_definition_name' => 'setProcessDefinitionName',
        'process_definition_name_like' => 'setProcessDefinitionNameLike',
        'execution_id' => 'setExecutionId',
        'case_instance_id' => 'setCaseInstanceId',
        'case_instance_business_key' => 'setCaseInstanceBusinessKey',
        'case_instance_business_key_like' => 'setCaseInstanceBusinessKeyLike',
        'case_definition_id' => 'setCaseDefinitionId',
        'case_definition_key' => 'setCaseDefinitionKey',
        'case_definition_name' => 'setCaseDefinitionName',
        'case_definition_name_like' => 'setCaseDefinitionNameLike',
        'case_execution_id' => 'setCaseExecutionId',
        'activity_instance_id_in' => 'setActivityInstanceIdIn',
        'tenant_id_in' => 'setTenantIdIn',
        'without_tenant_id' => 'setWithoutTenantId',
        'assignee' => 'setAssignee',
        'assignee_expression' => 'setAssigneeExpression',
        'assignee_like' => 'setAssigneeLike',
        'assignee_like_expression' => 'setAssigneeLikeExpression',
        'assignee_in' => 'setAssigneeIn',
        'assignee_not_in' => 'setAssigneeNotIn',
        'owner' => 'setOwner',
        'owner_expression' => 'setOwnerExpression',
        'candidate_group' => 'setCandidateGroup',
        'candidate_group_expression' => 'setCandidateGroupExpression',
        'candidate_user' => 'setCandidateUser',
        'candidate_user_expression' => 'setCandidateUserExpression',
        'include_assigned_tasks' => 'setIncludeAssignedTasks',
        'involved_user' => 'setInvolvedUser',
        'involved_user_expression' => 'setInvolvedUserExpression',
        'assigned' => 'setAssigned',
        'unassigned' => 'setUnassigned',
        'task_definition_key' => 'setTaskDefinitionKey',
        'task_definition_key_in' => 'setTaskDefinitionKeyIn',
        'task_definition_key_like' => 'setTaskDefinitionKeyLike',
        'name' => 'setName',
        'name_not_equal' => 'setNameNotEqual',
        'name_like' => 'setNameLike',
        'name_not_like' => 'setNameNotLike',
        'description' => 'setDescription',
        'description_like' => 'setDescriptionLike',
        'priority' => 'setPriority',
        'max_priority' => 'setMaxPriority',
        'min_priority' => 'setMinPriority',
        'due_date' => 'setDueDate',
        'due_date_expression' => 'setDueDateExpression',
        'due_after' => 'setDueAfter',
        'due_after_expression' => 'setDueAfterExpression',
        'due_before' => 'setDueBefore',
        'due_before_expression' => 'setDueBeforeExpression',
        'without_due_date' => 'setWithoutDueDate',
        'follow_up_date' => 'setFollowUpDate',
        'follow_up_date_expression' => 'setFollowUpDateExpression',
        'follow_up_after' => 'setFollowUpAfter',
        'follow_up_after_expression' => 'setFollowUpAfterExpression',
        'follow_up_before' => 'setFollowUpBefore',
        'follow_up_before_expression' => 'setFollowUpBeforeExpression',
        'follow_up_before_or_not_existent' => 'setFollowUpBeforeOrNotExistent',
        'follow_up_before_or_not_existent_expression' => 'setFollowUpBeforeOrNotExistentExpression',
        'created_on' => 'setCreatedOn',
        'created_on_expression' => 'setCreatedOnExpression',
        'created_after' => 'setCreatedAfter',
        'created_after_expression' => 'setCreatedAfterExpression',
        'created_before' => 'setCreatedBefore',
        'created_before_expression' => 'setCreatedBeforeExpression',
        'updated_after' => 'setUpdatedAfter',
        'updated_after_expression' => 'setUpdatedAfterExpression',
        'delegation_state' => 'setDelegationState',
        'candidate_groups' => 'setCandidateGroups',
        'candidate_groups_expression' => 'setCandidateGroupsExpression',
        'with_candidate_groups' => 'setWithCandidateGroups',
        'without_candidate_groups' => 'setWithoutCandidateGroups',
        'with_candidate_users' => 'setWithCandidateUsers',
        'without_candidate_users' => 'setWithoutCandidateUsers',
        'active' => 'setActive',
        'suspended' => 'setSuspended',
        'task_variables' => 'setTaskVariables',
        'process_variables' => 'setProcessVariables',
        'case_instance_variables' => 'setCaseInstanceVariables',
        'variable_names_ignore_case' => 'setVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'setVariableValuesIgnoreCase',
        'parent_task_id' => 'setParentTaskId',
        'or_queries' => 'setOrQueries',
        'sorting' => 'setSorting'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_id' => 'getTaskId',
        'task_id_in' => 'getTaskIdIn',
        'process_instance_id' => 'getProcessInstanceId',
        'process_instance_id_in' => 'getProcessInstanceIdIn',
        'process_instance_business_key' => 'getProcessInstanceBusinessKey',
        'process_instance_business_key_expression' => 'getProcessInstanceBusinessKeyExpression',
        'process_instance_business_key_in' => 'getProcessInstanceBusinessKeyIn',
        'process_instance_business_key_like' => 'getProcessInstanceBusinessKeyLike',
        'process_instance_business_key_like_expression' => 'getProcessInstanceBusinessKeyLikeExpression',
        'process_definition_id' => 'getProcessDefinitionId',
        'process_definition_key' => 'getProcessDefinitionKey',
        'process_definition_key_in' => 'getProcessDefinitionKeyIn',
        'process_definition_name' => 'getProcessDefinitionName',
        'process_definition_name_like' => 'getProcessDefinitionNameLike',
        'execution_id' => 'getExecutionId',
        'case_instance_id' => 'getCaseInstanceId',
        'case_instance_business_key' => 'getCaseInstanceBusinessKey',
        'case_instance_business_key_like' => 'getCaseInstanceBusinessKeyLike',
        'case_definition_id' => 'getCaseDefinitionId',
        'case_definition_key' => 'getCaseDefinitionKey',
        'case_definition_name' => 'getCaseDefinitionName',
        'case_definition_name_like' => 'getCaseDefinitionNameLike',
        'case_execution_id' => 'getCaseExecutionId',
        'activity_instance_id_in' => 'getActivityInstanceIdIn',
        'tenant_id_in' => 'getTenantIdIn',
        'without_tenant_id' => 'getWithoutTenantId',
        'assignee' => 'getAssignee',
        'assignee_expression' => 'getAssigneeExpression',
        'assignee_like' => 'getAssigneeLike',
        'assignee_like_expression' => 'getAssigneeLikeExpression',
        'assignee_in' => 'getAssigneeIn',
        'assignee_not_in' => 'getAssigneeNotIn',
        'owner' => 'getOwner',
        'owner_expression' => 'getOwnerExpression',
        'candidate_group' => 'getCandidateGroup',
        'candidate_group_expression' => 'getCandidateGroupExpression',
        'candidate_user' => 'getCandidateUser',
        'candidate_user_expression' => 'getCandidateUserExpression',
        'include_assigned_tasks' => 'getIncludeAssignedTasks',
        'involved_user' => 'getInvolvedUser',
        'involved_user_expression' => 'getInvolvedUserExpression',
        'assigned' => 'getAssigned',
        'unassigned' => 'getUnassigned',
        'task_definition_key' => 'getTaskDefinitionKey',
        'task_definition_key_in' => 'getTaskDefinitionKeyIn',
        'task_definition_key_like' => 'getTaskDefinitionKeyLike',
        'name' => 'getName',
        'name_not_equal' => 'getNameNotEqual',
        'name_like' => 'getNameLike',
        'name_not_like' => 'getNameNotLike',
        'description' => 'getDescription',
        'description_like' => 'getDescriptionLike',
        'priority' => 'getPriority',
        'max_priority' => 'getMaxPriority',
        'min_priority' => 'getMinPriority',
        'due_date' => 'getDueDate',
        'due_date_expression' => 'getDueDateExpression',
        'due_after' => 'getDueAfter',
        'due_after_expression' => 'getDueAfterExpression',
        'due_before' => 'getDueBefore',
        'due_before_expression' => 'getDueBeforeExpression',
        'without_due_date' => 'getWithoutDueDate',
        'follow_up_date' => 'getFollowUpDate',
        'follow_up_date_expression' => 'getFollowUpDateExpression',
        'follow_up_after' => 'getFollowUpAfter',
        'follow_up_after_expression' => 'getFollowUpAfterExpression',
        'follow_up_before' => 'getFollowUpBefore',
        'follow_up_before_expression' => 'getFollowUpBeforeExpression',
        'follow_up_before_or_not_existent' => 'getFollowUpBeforeOrNotExistent',
        'follow_up_before_or_not_existent_expression' => 'getFollowUpBeforeOrNotExistentExpression',
        'created_on' => 'getCreatedOn',
        'created_on_expression' => 'getCreatedOnExpression',
        'created_after' => 'getCreatedAfter',
        'created_after_expression' => 'getCreatedAfterExpression',
        'created_before' => 'getCreatedBefore',
        'created_before_expression' => 'getCreatedBeforeExpression',
        'updated_after' => 'getUpdatedAfter',
        'updated_after_expression' => 'getUpdatedAfterExpression',
        'delegation_state' => 'getDelegationState',
        'candidate_groups' => 'getCandidateGroups',
        'candidate_groups_expression' => 'getCandidateGroupsExpression',
        'with_candidate_groups' => 'getWithCandidateGroups',
        'without_candidate_groups' => 'getWithoutCandidateGroups',
        'with_candidate_users' => 'getWithCandidateUsers',
        'without_candidate_users' => 'getWithoutCandidateUsers',
        'active' => 'getActive',
        'suspended' => 'getSuspended',
        'task_variables' => 'getTaskVariables',
        'process_variables' => 'getProcessVariables',
        'case_instance_variables' => 'getCaseInstanceVariables',
        'variable_names_ignore_case' => 'getVariableNamesIgnoreCase',
        'variable_values_ignore_case' => 'getVariableValuesIgnoreCase',
        'parent_task_id' => 'getParentTaskId',
        'or_queries' => 'getOrQueries',
        'sorting' => 'getSorting'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$CamundaModelName;
    }

    const DELEGATION_STATE_PENDING = 'PENDING';
    const DELEGATION_STATE_RESOLVED = 'RESOLVED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDelegationStateAllowableValues()
    {
        return [
            self::DELEGATION_STATE_PENDING,
            self::DELEGATION_STATE_RESOLVED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['task_id_in'] = isset($data['task_id_in']) ? $data['task_id_in'] : null;
        $this->container['process_instance_id'] = isset($data['process_instance_id']) ? $data['process_instance_id'] : null;
        $this->container['process_instance_id_in'] = isset($data['process_instance_id_in']) ? $data['process_instance_id_in'] : null;
        $this->container['process_instance_business_key'] = isset($data['process_instance_business_key']) ? $data['process_instance_business_key'] : null;
        $this->container['process_instance_business_key_expression'] = isset($data['process_instance_business_key_expression']) ? $data['process_instance_business_key_expression'] : null;
        $this->container['process_instance_business_key_in'] = isset($data['process_instance_business_key_in']) ? $data['process_instance_business_key_in'] : null;
        $this->container['process_instance_business_key_like'] = isset($data['process_instance_business_key_like']) ? $data['process_instance_business_key_like'] : null;
        $this->container['process_instance_business_key_like_expression'] = isset($data['process_instance_business_key_like_expression']) ? $data['process_instance_business_key_like_expression'] : null;
        $this->container['process_definition_id'] = isset($data['process_definition_id']) ? $data['process_definition_id'] : null;
        $this->container['process_definition_key'] = isset($data['process_definition_key']) ? $data['process_definition_key'] : null;
        $this->container['process_definition_key_in'] = isset($data['process_definition_key_in']) ? $data['process_definition_key_in'] : null;
        $this->container['process_definition_name'] = isset($data['process_definition_name']) ? $data['process_definition_name'] : null;
        $this->container['process_definition_name_like'] = isset($data['process_definition_name_like']) ? $data['process_definition_name_like'] : null;
        $this->container['execution_id'] = isset($data['execution_id']) ? $data['execution_id'] : null;
        $this->container['case_instance_id'] = isset($data['case_instance_id']) ? $data['case_instance_id'] : null;
        $this->container['case_instance_business_key'] = isset($data['case_instance_business_key']) ? $data['case_instance_business_key'] : null;
        $this->container['case_instance_business_key_like'] = isset($data['case_instance_business_key_like']) ? $data['case_instance_business_key_like'] : null;
        $this->container['case_definition_id'] = isset($data['case_definition_id']) ? $data['case_definition_id'] : null;
        $this->container['case_definition_key'] = isset($data['case_definition_key']) ? $data['case_definition_key'] : null;
        $this->container['case_definition_name'] = isset($data['case_definition_name']) ? $data['case_definition_name'] : null;
        $this->container['case_definition_name_like'] = isset($data['case_definition_name_like']) ? $data['case_definition_name_like'] : null;
        $this->container['case_execution_id'] = isset($data['case_execution_id']) ? $data['case_execution_id'] : null;
        $this->container['activity_instance_id_in'] = isset($data['activity_instance_id_in']) ? $data['activity_instance_id_in'] : null;
        $this->container['tenant_id_in'] = isset($data['tenant_id_in']) ? $data['tenant_id_in'] : null;
        $this->container['without_tenant_id'] = isset($data['without_tenant_id']) ? $data['without_tenant_id'] : false;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['assignee_expression'] = isset($data['assignee_expression']) ? $data['assignee_expression'] : null;
        $this->container['assignee_like'] = isset($data['assignee_like']) ? $data['assignee_like'] : null;
        $this->container['assignee_like_expression'] = isset($data['assignee_like_expression']) ? $data['assignee_like_expression'] : null;
        $this->container['assignee_in'] = isset($data['assignee_in']) ? $data['assignee_in'] : null;
        $this->container['assignee_not_in'] = isset($data['assignee_not_in']) ? $data['assignee_not_in'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['owner_expression'] = isset($data['owner_expression']) ? $data['owner_expression'] : null;
        $this->container['candidate_group'] = isset($data['candidate_group']) ? $data['candidate_group'] : null;
        $this->container['candidate_group_expression'] = isset($data['candidate_group_expression']) ? $data['candidate_group_expression'] : null;
        $this->container['candidate_user'] = isset($data['candidate_user']) ? $data['candidate_user'] : null;
        $this->container['candidate_user_expression'] = isset($data['candidate_user_expression']) ? $data['candidate_user_expression'] : null;
        $this->container['include_assigned_tasks'] = isset($data['include_assigned_tasks']) ? $data['include_assigned_tasks'] : false;
        $this->container['involved_user'] = isset($data['involved_user']) ? $data['involved_user'] : null;
        $this->container['involved_user_expression'] = isset($data['involved_user_expression']) ? $data['involved_user_expression'] : null;
        $this->container['assigned'] = isset($data['assigned']) ? $data['assigned'] : false;
        $this->container['unassigned'] = isset($data['unassigned']) ? $data['unassigned'] : false;
        $this->container['task_definition_key'] = isset($data['task_definition_key']) ? $data['task_definition_key'] : null;
        $this->container['task_definition_key_in'] = isset($data['task_definition_key_in']) ? $data['task_definition_key_in'] : null;
        $this->container['task_definition_key_like'] = isset($data['task_definition_key_like']) ? $data['task_definition_key_like'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_not_equal'] = isset($data['name_not_equal']) ? $data['name_not_equal'] : null;
        $this->container['name_like'] = isset($data['name_like']) ? $data['name_like'] : null;
        $this->container['name_not_like'] = isset($data['name_not_like']) ? $data['name_not_like'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['description_like'] = isset($data['description_like']) ? $data['description_like'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['max_priority'] = isset($data['max_priority']) ? $data['max_priority'] : null;
        $this->container['min_priority'] = isset($data['min_priority']) ? $data['min_priority'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['due_date_expression'] = isset($data['due_date_expression']) ? $data['due_date_expression'] : null;
        $this->container['due_after'] = isset($data['due_after']) ? $data['due_after'] : null;
        $this->container['due_after_expression'] = isset($data['due_after_expression']) ? $data['due_after_expression'] : null;
        $this->container['due_before'] = isset($data['due_before']) ? $data['due_before'] : null;
        $this->container['due_before_expression'] = isset($data['due_before_expression']) ? $data['due_before_expression'] : null;
        $this->container['without_due_date'] = isset($data['without_due_date']) ? $data['without_due_date'] : false;
        $this->container['follow_up_date'] = isset($data['follow_up_date']) ? $data['follow_up_date'] : null;
        $this->container['follow_up_date_expression'] = isset($data['follow_up_date_expression']) ? $data['follow_up_date_expression'] : null;
        $this->container['follow_up_after'] = isset($data['follow_up_after']) ? $data['follow_up_after'] : null;
        $this->container['follow_up_after_expression'] = isset($data['follow_up_after_expression']) ? $data['follow_up_after_expression'] : null;
        $this->container['follow_up_before'] = isset($data['follow_up_before']) ? $data['follow_up_before'] : null;
        $this->container['follow_up_before_expression'] = isset($data['follow_up_before_expression']) ? $data['follow_up_before_expression'] : null;
        $this->container['follow_up_before_or_not_existent'] = isset($data['follow_up_before_or_not_existent']) ? $data['follow_up_before_or_not_existent'] : null;
        $this->container['follow_up_before_or_not_existent_expression'] = isset($data['follow_up_before_or_not_existent_expression']) ? $data['follow_up_before_or_not_existent_expression'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['created_on_expression'] = isset($data['created_on_expression']) ? $data['created_on_expression'] : null;
        $this->container['created_after'] = isset($data['created_after']) ? $data['created_after'] : null;
        $this->container['created_after_expression'] = isset($data['created_after_expression']) ? $data['created_after_expression'] : null;
        $this->container['created_before'] = isset($data['created_before']) ? $data['created_before'] : null;
        $this->container['created_before_expression'] = isset($data['created_before_expression']) ? $data['created_before_expression'] : null;
        $this->container['updated_after'] = isset($data['updated_after']) ? $data['updated_after'] : null;
        $this->container['updated_after_expression'] = isset($data['updated_after_expression']) ? $data['updated_after_expression'] : null;
        $this->container['delegation_state'] = isset($data['delegation_state']) ? $data['delegation_state'] : null;
        $this->container['candidate_groups'] = isset($data['candidate_groups']) ? $data['candidate_groups'] : null;
        $this->container['candidate_groups_expression'] = isset($data['candidate_groups_expression']) ? $data['candidate_groups_expression'] : null;
        $this->container['with_candidate_groups'] = isset($data['with_candidate_groups']) ? $data['with_candidate_groups'] : false;
        $this->container['without_candidate_groups'] = isset($data['without_candidate_groups']) ? $data['without_candidate_groups'] : false;
        $this->container['with_candidate_users'] = isset($data['with_candidate_users']) ? $data['with_candidate_users'] : false;
        $this->container['without_candidate_users'] = isset($data['without_candidate_users']) ? $data['without_candidate_users'] : false;
        $this->container['active'] = isset($data['active']) ? $data['active'] : false;
        $this->container['suspended'] = isset($data['suspended']) ? $data['suspended'] : false;
        $this->container['task_variables'] = isset($data['task_variables']) ? $data['task_variables'] : null;
        $this->container['process_variables'] = isset($data['process_variables']) ? $data['process_variables'] : null;
        $this->container['case_instance_variables'] = isset($data['case_instance_variables']) ? $data['case_instance_variables'] : null;
        $this->container['variable_names_ignore_case'] = isset($data['variable_names_ignore_case']) ? $data['variable_names_ignore_case'] : false;
        $this->container['variable_values_ignore_case'] = isset($data['variable_values_ignore_case']) ? $data['variable_values_ignore_case'] : false;
        $this->container['parent_task_id'] = isset($data['parent_task_id']) ? $data['parent_task_id'] : null;
        $this->container['or_queries'] = isset($data['or_queries']) ? $data['or_queries'] : null;
        $this->container['sorting'] = isset($data['sorting']) ? $data['sorting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDelegationStateAllowableValues();
        if (!is_null($this->container['delegation_state']) && !in_array($this->container['delegation_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delegation_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_id
     *
     * @return string
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param string $task_id Restrict to task with the given id.
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets task_id_in
     *
     * @return string[]
     */
    public function getTaskIdIn()
    {
        return $this->container['task_id_in'];
    }

    /**
     * Sets task_id_in
     *
     * @param string[] $task_id_in Restrict to tasks with any of the given ids.
     *
     * @return $this
     */
    public function setTaskIdIn($task_id_in)
    {
        $this->container['task_id_in'] = $task_id_in;

        return $this;
    }

    /**
     * Gets process_instance_id
     *
     * @return string
     */
    public function getProcessInstanceId()
    {
        return $this->container['process_instance_id'];
    }

    /**
     * Sets process_instance_id
     *
     * @param string $process_instance_id Restrict to tasks that belong to process instances with the given id.
     *
     * @return $this
     */
    public function setProcessInstanceId($process_instance_id)
    {
        $this->container['process_instance_id'] = $process_instance_id;

        return $this;
    }

    /**
     * Gets process_instance_id_in
     *
     * @return string[]
     */
    public function getProcessInstanceIdIn()
    {
        return $this->container['process_instance_id_in'];
    }

    /**
     * Sets process_instance_id_in
     *
     * @param string[] $process_instance_id_in Restrict to tasks that belong to process instances with the given ids.
     *
     * @return $this
     */
    public function setProcessInstanceIdIn($process_instance_id_in)
    {
        $this->container['process_instance_id_in'] = $process_instance_id_in;

        return $this;
    }

    /**
     * Gets process_instance_business_key
     *
     * @return string
     */
    public function getProcessInstanceBusinessKey()
    {
        return $this->container['process_instance_business_key'];
    }

    /**
     * Sets process_instance_business_key
     *
     * @param string $process_instance_business_key Restrict to tasks that belong to process instances with the given business key.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKey($process_instance_business_key)
    {
        $this->container['process_instance_business_key'] = $process_instance_business_key;

        return $this;
    }

    /**
     * Gets process_instance_business_key_expression
     *
     * @return string
     */
    public function getProcessInstanceBusinessKeyExpression()
    {
        return $this->container['process_instance_business_key_expression'];
    }

    /**
     * Sets process_instance_business_key_expression
     *
     * @param string $process_instance_business_key_expression Restrict to tasks that belong to process instances with the given business key which  is described by an expression. See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyExpression($process_instance_business_key_expression)
    {
        $this->container['process_instance_business_key_expression'] = $process_instance_business_key_expression;

        return $this;
    }

    /**
     * Gets process_instance_business_key_in
     *
     * @return string[]
     */
    public function getProcessInstanceBusinessKeyIn()
    {
        return $this->container['process_instance_business_key_in'];
    }

    /**
     * Sets process_instance_business_key_in
     *
     * @param string[] $process_instance_business_key_in Restrict to tasks that belong to process instances with one of the give business keys.  The keys need to be in a comma-separated list.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyIn($process_instance_business_key_in)
    {
        $this->container['process_instance_business_key_in'] = $process_instance_business_key_in;

        return $this;
    }

    /**
     * Gets process_instance_business_key_like
     *
     * @return string
     */
    public function getProcessInstanceBusinessKeyLike()
    {
        return $this->container['process_instance_business_key_like'];
    }

    /**
     * Sets process_instance_business_key_like
     *
     * @param string $process_instance_business_key_like Restrict to tasks that have a process instance business key that has the parameter  value as a substring.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyLike($process_instance_business_key_like)
    {
        $this->container['process_instance_business_key_like'] = $process_instance_business_key_like;

        return $this;
    }

    /**
     * Gets process_instance_business_key_like_expression
     *
     * @return string
     */
    public function getProcessInstanceBusinessKeyLikeExpression()
    {
        return $this->container['process_instance_business_key_like_expression'];
    }

    /**
     * Sets process_instance_business_key_like_expression
     *
     * @param string $process_instance_business_key_like_expression Restrict to tasks that have a process instance business key that has the parameter  value as a substring and is described by an expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     *
     * @return $this
     */
    public function setProcessInstanceBusinessKeyLikeExpression($process_instance_business_key_like_expression)
    {
        $this->container['process_instance_business_key_like_expression'] = $process_instance_business_key_like_expression;

        return $this;
    }

    /**
     * Gets process_definition_id
     *
     * @return string
     */
    public function getProcessDefinitionId()
    {
        return $this->container['process_definition_id'];
    }

    /**
     * Sets process_definition_id
     *
     * @param string $process_definition_id Restrict to tasks that belong to a process definition with the given id.
     *
     * @return $this
     */
    public function setProcessDefinitionId($process_definition_id)
    {
        $this->container['process_definition_id'] = $process_definition_id;

        return $this;
    }

    /**
     * Gets process_definition_key
     *
     * @return string
     */
    public function getProcessDefinitionKey()
    {
        return $this->container['process_definition_key'];
    }

    /**
     * Sets process_definition_key
     *
     * @param string $process_definition_key Restrict to tasks that belong to a process definition with the given key.
     *
     * @return $this
     */
    public function setProcessDefinitionKey($process_definition_key)
    {
        $this->container['process_definition_key'] = $process_definition_key;

        return $this;
    }

    /**
     * Gets process_definition_key_in
     *
     * @return string[]
     */
    public function getProcessDefinitionKeyIn()
    {
        return $this->container['process_definition_key_in'];
    }

    /**
     * Sets process_definition_key_in
     *
     * @param string[] $process_definition_key_in Restrict to tasks that belong to a process definition with one of the given keys. The  keys need to be in a comma-separated list.
     *
     * @return $this
     */
    public function setProcessDefinitionKeyIn($process_definition_key_in)
    {
        $this->container['process_definition_key_in'] = $process_definition_key_in;

        return $this;
    }

    /**
     * Gets process_definition_name
     *
     * @return string
     */
    public function getProcessDefinitionName()
    {
        return $this->container['process_definition_name'];
    }

    /**
     * Sets process_definition_name
     *
     * @param string $process_definition_name Restrict to tasks that belong to a process definition with the given name.
     *
     * @return $this
     */
    public function setProcessDefinitionName($process_definition_name)
    {
        $this->container['process_definition_name'] = $process_definition_name;

        return $this;
    }

    /**
     * Gets process_definition_name_like
     *
     * @return string
     */
    public function getProcessDefinitionNameLike()
    {
        return $this->container['process_definition_name_like'];
    }

    /**
     * Sets process_definition_name_like
     *
     * @param string $process_definition_name_like Restrict to tasks that have a process definition name that has the parameter value as  a substring.
     *
     * @return $this
     */
    public function setProcessDefinitionNameLike($process_definition_name_like)
    {
        $this->container['process_definition_name_like'] = $process_definition_name_like;

        return $this;
    }

    /**
     * Gets execution_id
     *
     * @return string
     */
    public function getExecutionId()
    {
        return $this->container['execution_id'];
    }

    /**
     * Sets execution_id
     *
     * @param string $execution_id Restrict to tasks that belong to an execution with the given id.
     *
     * @return $this
     */
    public function setExecutionId($execution_id)
    {
        $this->container['execution_id'] = $execution_id;

        return $this;
    }

    /**
     * Gets case_instance_id
     *
     * @return string
     */
    public function getCaseInstanceId()
    {
        return $this->container['case_instance_id'];
    }

    /**
     * Sets case_instance_id
     *
     * @param string $case_instance_id Restrict to tasks that belong to case instances with the given id.
     *
     * @return $this
     */
    public function setCaseInstanceId($case_instance_id)
    {
        $this->container['case_instance_id'] = $case_instance_id;

        return $this;
    }

    /**
     * Gets case_instance_business_key
     *
     * @return string
     */
    public function getCaseInstanceBusinessKey()
    {
        return $this->container['case_instance_business_key'];
    }

    /**
     * Sets case_instance_business_key
     *
     * @param string $case_instance_business_key Restrict to tasks that belong to case instances with the given business key.
     *
     * @return $this
     */
    public function setCaseInstanceBusinessKey($case_instance_business_key)
    {
        $this->container['case_instance_business_key'] = $case_instance_business_key;

        return $this;
    }

    /**
     * Gets case_instance_business_key_like
     *
     * @return string
     */
    public function getCaseInstanceBusinessKeyLike()
    {
        return $this->container['case_instance_business_key_like'];
    }

    /**
     * Sets case_instance_business_key_like
     *
     * @param string $case_instance_business_key_like Restrict to tasks that have a case instance business key that has the parameter value  as a substring.
     *
     * @return $this
     */
    public function setCaseInstanceBusinessKeyLike($case_instance_business_key_like)
    {
        $this->container['case_instance_business_key_like'] = $case_instance_business_key_like;

        return $this;
    }

    /**
     * Gets case_definition_id
     *
     * @return string
     */
    public function getCaseDefinitionId()
    {
        return $this->container['case_definition_id'];
    }

    /**
     * Sets case_definition_id
     *
     * @param string $case_definition_id Restrict to tasks that belong to a case definition with the given id.
     *
     * @return $this
     */
    public function setCaseDefinitionId($case_definition_id)
    {
        $this->container['case_definition_id'] = $case_definition_id;

        return $this;
    }

    /**
     * Gets case_definition_key
     *
     * @return string
     */
    public function getCaseDefinitionKey()
    {
        return $this->container['case_definition_key'];
    }

    /**
     * Sets case_definition_key
     *
     * @param string $case_definition_key Restrict to tasks that belong to a case definition with the given key.
     *
     * @return $this
     */
    public function setCaseDefinitionKey($case_definition_key)
    {
        $this->container['case_definition_key'] = $case_definition_key;

        return $this;
    }

    /**
     * Gets case_definition_name
     *
     * @return string
     */
    public function getCaseDefinitionName()
    {
        return $this->container['case_definition_name'];
    }

    /**
     * Sets case_definition_name
     *
     * @param string $case_definition_name Restrict to tasks that belong to a case definition with the given name.
     *
     * @return $this
     */
    public function setCaseDefinitionName($case_definition_name)
    {
        $this->container['case_definition_name'] = $case_definition_name;

        return $this;
    }

    /**
     * Gets case_definition_name_like
     *
     * @return string
     */
    public function getCaseDefinitionNameLike()
    {
        return $this->container['case_definition_name_like'];
    }

    /**
     * Sets case_definition_name_like
     *
     * @param string $case_definition_name_like Restrict to tasks that have a case definition name that has the parameter value as a  substring.
     *
     * @return $this
     */
    public function setCaseDefinitionNameLike($case_definition_name_like)
    {
        $this->container['case_definition_name_like'] = $case_definition_name_like;

        return $this;
    }

    /**
     * Gets case_execution_id
     *
     * @return string
     */
    public function getCaseExecutionId()
    {
        return $this->container['case_execution_id'];
    }

    /**
     * Sets case_execution_id
     *
     * @param string $case_execution_id Restrict to tasks that belong to a case execution with the given id.
     *
     * @return $this
     */
    public function setCaseExecutionId($case_execution_id)
    {
        $this->container['case_execution_id'] = $case_execution_id;

        return $this;
    }

    /**
     * Gets activity_instance_id_in
     *
     * @return string[]
     */
    public function getActivityInstanceIdIn()
    {
        return $this->container['activity_instance_id_in'];
    }

    /**
     * Sets activity_instance_id_in
     *
     * @param string[] $activity_instance_id_in Only include tasks which belong to one of the passed and comma-separated activity  instance ids.
     *
     * @return $this
     */
    public function setActivityInstanceIdIn($activity_instance_id_in)
    {
        $this->container['activity_instance_id_in'] = $activity_instance_id_in;

        return $this;
    }

    /**
     * Gets tenant_id_in
     *
     * @return string[]
     */
    public function getTenantIdIn()
    {
        return $this->container['tenant_id_in'];
    }

    /**
     * Sets tenant_id_in
     *
     * @param string[] $tenant_id_in Only include tasks which belong to one of the passed and comma-separated  tenant ids.
     *
     * @return $this
     */
    public function setTenantIdIn($tenant_id_in)
    {
        $this->container['tenant_id_in'] = $tenant_id_in;

        return $this;
    }

    /**
     * Gets without_tenant_id
     *
     * @return bool
     */
    public function getWithoutTenantId()
    {
        return $this->container['without_tenant_id'];
    }

    /**
     * Sets without_tenant_id
     *
     * @param bool $without_tenant_id Only include tasks which belong to no tenant. Value may only be `true`,  as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutTenantId($without_tenant_id)
    {
        $this->container['without_tenant_id'] = $without_tenant_id;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return string
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param string $assignee Restrict to tasks that the given user is assigned to.
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets assignee_expression
     *
     * @return string
     */
    public function getAssigneeExpression()
    {
        return $this->container['assignee_expression'];
    }

    /**
     * Sets assignee_expression
     *
     * @param string $assignee_expression Restrict to tasks that the user described by the given expression is assigned to. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     *
     * @return $this
     */
    public function setAssigneeExpression($assignee_expression)
    {
        $this->container['assignee_expression'] = $assignee_expression;

        return $this;
    }

    /**
     * Gets assignee_like
     *
     * @return string
     */
    public function getAssigneeLike()
    {
        return $this->container['assignee_like'];
    }

    /**
     * Sets assignee_like
     *
     * @param string $assignee_like Restrict to tasks that have an assignee that has the parameter  value as a substring.
     *
     * @return $this
     */
    public function setAssigneeLike($assignee_like)
    {
        $this->container['assignee_like'] = $assignee_like;

        return $this;
    }

    /**
     * Gets assignee_like_expression
     *
     * @return string
     */
    public function getAssigneeLikeExpression()
    {
        return $this->container['assignee_like_expression'];
    }

    /**
     * Sets assignee_like_expression
     *
     * @param string $assignee_like_expression Restrict to tasks that have an assignee that has the parameter value described by the  given expression as a substring. See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     *
     * @return $this
     */
    public function setAssigneeLikeExpression($assignee_like_expression)
    {
        $this->container['assignee_like_expression'] = $assignee_like_expression;

        return $this;
    }

    /**
     * Gets assignee_in
     *
     * @return string[]
     */
    public function getAssigneeIn()
    {
        return $this->container['assignee_in'];
    }

    /**
     * Sets assignee_in
     *
     * @param string[] $assignee_in Only include tasks which are assigned to one of the passed and comma-separated user ids.
     *
     * @return $this
     */
    public function setAssigneeIn($assignee_in)
    {
        $this->container['assignee_in'] = $assignee_in;

        return $this;
    }

    /**
     * Gets assignee_not_in
     *
     * @return string[]
     */
    public function getAssigneeNotIn()
    {
        return $this->container['assignee_not_in'];
    }

    /**
     * Sets assignee_not_in
     *
     * @param string[] $assignee_not_in Only include tasks which are not assigned to one of the passed and comma-separated user ids.
     *
     * @return $this
     */
    public function setAssigneeNotIn($assignee_not_in)
    {
        $this->container['assignee_not_in'] = $assignee_not_in;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner Restrict to tasks that the given user owns.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets owner_expression
     *
     * @return string
     */
    public function getOwnerExpression()
    {
        return $this->container['owner_expression'];
    }

    /**
     * Sets owner_expression
     *
     * @param string $owner_expression Restrict to tasks that the user described by the given expression owns. See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     *
     * @return $this
     */
    public function setOwnerExpression($owner_expression)
    {
        $this->container['owner_expression'] = $owner_expression;

        return $this;
    }

    /**
     * Gets candidate_group
     *
     * @return string
     */
    public function getCandidateGroup()
    {
        return $this->container['candidate_group'];
    }

    /**
     * Sets candidate_group
     *
     * @param string $candidate_group Only include tasks that are offered to the given group.
     *
     * @return $this
     */
    public function setCandidateGroup($candidate_group)
    {
        $this->container['candidate_group'] = $candidate_group;

        return $this;
    }

    /**
     * Gets candidate_group_expression
     *
     * @return string
     */
    public function getCandidateGroupExpression()
    {
        return $this->container['candidate_group_expression'];
    }

    /**
     * Sets candidate_group_expression
     *
     * @param string $candidate_group_expression Only include tasks that are offered to the group described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     *
     * @return $this
     */
    public function setCandidateGroupExpression($candidate_group_expression)
    {
        $this->container['candidate_group_expression'] = $candidate_group_expression;

        return $this;
    }

    /**
     * Gets candidate_user
     *
     * @return string
     */
    public function getCandidateUser()
    {
        return $this->container['candidate_user'];
    }

    /**
     * Sets candidate_user
     *
     * @param string $candidate_user Only include tasks that are offered to the given user or to one of his groups.
     *
     * @return $this
     */
    public function setCandidateUser($candidate_user)
    {
        $this->container['candidate_user'] = $candidate_user;

        return $this;
    }

    /**
     * Gets candidate_user_expression
     *
     * @return string
     */
    public function getCandidateUserExpression()
    {
        return $this->container['candidate_user_expression'];
    }

    /**
     * Sets candidate_user_expression
     *
     * @param string $candidate_user_expression Only include tasks that are offered to the user described by the given expression.  See the  [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions)  for more information on available functions.
     *
     * @return $this
     */
    public function setCandidateUserExpression($candidate_user_expression)
    {
        $this->container['candidate_user_expression'] = $candidate_user_expression;

        return $this;
    }

    /**
     * Gets include_assigned_tasks
     *
     * @return bool
     */
    public function getIncludeAssignedTasks()
    {
        return $this->container['include_assigned_tasks'];
    }

    /**
     * Sets include_assigned_tasks
     *
     * @param bool $include_assigned_tasks Also include tasks that are assigned to users in candidate queries. Default is to only  include tasks that are not assigned to any user if you query by candidate user or group(s).
     *
     * @return $this
     */
    public function setIncludeAssignedTasks($include_assigned_tasks)
    {
        $this->container['include_assigned_tasks'] = $include_assigned_tasks;

        return $this;
    }

    /**
     * Gets involved_user
     *
     * @return string
     */
    public function getInvolvedUser()
    {
        return $this->container['involved_user'];
    }

    /**
     * Sets involved_user
     *
     * @param string $involved_user Only include tasks that the given user is involved in. A user is involved in a task if  an identity link exists between task and user (e.g., the user is the assignee).
     *
     * @return $this
     */
    public function setInvolvedUser($involved_user)
    {
        $this->container['involved_user'] = $involved_user;

        return $this;
    }

    /**
     * Gets involved_user_expression
     *
     * @return string
     */
    public function getInvolvedUserExpression()
    {
        return $this->container['involved_user_expression'];
    }

    /**
     * Sets involved_user_expression
     *
     * @param string $involved_user_expression Only include tasks that the user described by the given expression is involved in. A user is involved in a task if an identity link exists between task and user (e.g., the user is the assignee). See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions.
     *
     * @return $this
     */
    public function setInvolvedUserExpression($involved_user_expression)
    {
        $this->container['involved_user_expression'] = $involved_user_expression;

        return $this;
    }

    /**
     * Gets assigned
     *
     * @return bool
     */
    public function getAssigned()
    {
        return $this->container['assigned'];
    }

    /**
     * Sets assigned
     *
     * @param bool $assigned If set to `true`, restricts the query to all tasks that are assigned.
     *
     * @return $this
     */
    public function setAssigned($assigned)
    {
        $this->container['assigned'] = $assigned;

        return $this;
    }

    /**
     * Gets unassigned
     *
     * @return bool
     */
    public function getUnassigned()
    {
        return $this->container['unassigned'];
    }

    /**
     * Sets unassigned
     *
     * @param bool $unassigned If set to `true`, restricts the query to all tasks that are unassigned.
     *
     * @return $this
     */
    public function setUnassigned($unassigned)
    {
        $this->container['unassigned'] = $unassigned;

        return $this;
    }

    /**
     * Gets task_definition_key
     *
     * @return string
     */
    public function getTaskDefinitionKey()
    {
        return $this->container['task_definition_key'];
    }

    /**
     * Sets task_definition_key
     *
     * @param string $task_definition_key Restrict to tasks that have the given key.
     *
     * @return $this
     */
    public function setTaskDefinitionKey($task_definition_key)
    {
        $this->container['task_definition_key'] = $task_definition_key;

        return $this;
    }

    /**
     * Gets task_definition_key_in
     *
     * @return string[]
     */
    public function getTaskDefinitionKeyIn()
    {
        return $this->container['task_definition_key_in'];
    }

    /**
     * Sets task_definition_key_in
     *
     * @param string[] $task_definition_key_in Restrict to tasks that have one of the given keys. The keys need to be in a comma-separated list.
     *
     * @return $this
     */
    public function setTaskDefinitionKeyIn($task_definition_key_in)
    {
        $this->container['task_definition_key_in'] = $task_definition_key_in;

        return $this;
    }

    /**
     * Gets task_definition_key_like
     *
     * @return string
     */
    public function getTaskDefinitionKeyLike()
    {
        return $this->container['task_definition_key_like'];
    }

    /**
     * Sets task_definition_key_like
     *
     * @param string $task_definition_key_like Restrict to tasks that have a key that has the parameter value as a substring.
     *
     * @return $this
     */
    public function setTaskDefinitionKeyLike($task_definition_key_like)
    {
        $this->container['task_definition_key_like'] = $task_definition_key_like;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Restrict to tasks that have the given name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_not_equal
     *
     * @return string
     */
    public function getNameNotEqual()
    {
        return $this->container['name_not_equal'];
    }

    /**
     * Sets name_not_equal
     *
     * @param string $name_not_equal Restrict to tasks that do not have the given name.
     *
     * @return $this
     */
    public function setNameNotEqual($name_not_equal)
    {
        $this->container['name_not_equal'] = $name_not_equal;

        return $this;
    }

    /**
     * Gets name_like
     *
     * @return string
     */
    public function getNameLike()
    {
        return $this->container['name_like'];
    }

    /**
     * Sets name_like
     *
     * @param string $name_like Restrict to tasks that have a name with the given parameter value as substring.
     *
     * @return $this
     */
    public function setNameLike($name_like)
    {
        $this->container['name_like'] = $name_like;

        return $this;
    }

    /**
     * Gets name_not_like
     *
     * @return string
     */
    public function getNameNotLike()
    {
        return $this->container['name_not_like'];
    }

    /**
     * Sets name_not_like
     *
     * @param string $name_not_like Restrict to tasks that do not have a name with the given parameter value as substring.
     *
     * @return $this
     */
    public function setNameNotLike($name_not_like)
    {
        $this->container['name_not_like'] = $name_not_like;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Restrict to tasks that have the given description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_like
     *
     * @return string
     */
    public function getDescriptionLike()
    {
        return $this->container['description_like'];
    }

    /**
     * Sets description_like
     *
     * @param string $description_like Restrict to tasks that have a description that has the parameter value as a substring.
     *
     * @return $this
     */
    public function setDescriptionLike($description_like)
    {
        $this->container['description_like'] = $description_like;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Restrict to tasks that have the given priority.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets max_priority
     *
     * @return int
     */
    public function getMaxPriority()
    {
        return $this->container['max_priority'];
    }

    /**
     * Sets max_priority
     *
     * @param int $max_priority Restrict to tasks that have a lower or equal priority.
     *
     * @return $this
     */
    public function setMaxPriority($max_priority)
    {
        $this->container['max_priority'] = $max_priority;

        return $this;
    }

    /**
     * Gets min_priority
     *
     * @return int
     */
    public function getMinPriority()
    {
        return $this->container['min_priority'];
    }

    /**
     * Sets min_priority
     *
     * @param int $min_priority Restrict to tasks that have a higher or equal priority.
     *
     * @return $this
     */
    public function setMinPriority($min_priority)
    {
        $this->container['min_priority'] = $min_priority;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date Restrict to tasks that are due on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.546+0200`.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets due_date_expression
     *
     * @return string
     */
    public function getDueDateExpression()
    {
        return $this->container['due_date_expression'];
    }

    /**
     * Sets due_date_expression
     *
     * @param string $due_date_expression Restrict to tasks that are due on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setDueDateExpression($due_date_expression)
    {
        $this->container['due_date_expression'] = $due_date_expression;

        return $this;
    }

    /**
     * Gets due_after
     *
     * @return \DateTime
     */
    public function getDueAfter()
    {
        return $this->container['due_after'];
    }

    /**
     * Sets due_after
     *
     * @param \DateTime $due_after Restrict to tasks that are due after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.435+0200`.
     *
     * @return $this
     */
    public function setDueAfter($due_after)
    {
        $this->container['due_after'] = $due_after;

        return $this;
    }

    /**
     * Gets due_after_expression
     *
     * @return string
     */
    public function getDueAfterExpression()
    {
        return $this->container['due_after_expression'];
    }

    /**
     * Sets due_after_expression
     *
     * @param string $due_after_expression Restrict to tasks that are due after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setDueAfterExpression($due_after_expression)
    {
        $this->container['due_after_expression'] = $due_after_expression;

        return $this;
    }

    /**
     * Gets due_before
     *
     * @return \DateTime
     */
    public function getDueBefore()
    {
        return $this->container['due_before'];
    }

    /**
     * Sets due_before
     *
     * @param \DateTime $due_before Restrict to tasks that are due before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.243+0200`.
     *
     * @return $this
     */
    public function setDueBefore($due_before)
    {
        $this->container['due_before'] = $due_before;

        return $this;
    }

    /**
     * Gets due_before_expression
     *
     * @return string
     */
    public function getDueBeforeExpression()
    {
        return $this->container['due_before_expression'];
    }

    /**
     * Sets due_before_expression
     *
     * @param string $due_before_expression Restrict to tasks that are due before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setDueBeforeExpression($due_before_expression)
    {
        $this->container['due_before_expression'] = $due_before_expression;

        return $this;
    }

    /**
     * Gets without_due_date
     *
     * @return bool
     */
    public function getWithoutDueDate()
    {
        return $this->container['without_due_date'];
    }

    /**
     * Sets without_due_date
     *
     * @param bool $without_due_date Only include tasks which have no due date. Value may only be `true`,  as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutDueDate($without_due_date)
    {
        $this->container['without_due_date'] = $without_due_date;

        return $this;
    }

    /**
     * Gets follow_up_date
     *
     * @return \DateTime
     */
    public function getFollowUpDate()
    {
        return $this->container['follow_up_date'];
    }

    /**
     * Sets follow_up_date
     *
     * @param \DateTime $follow_up_date Restrict to tasks that have a followUp date on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     *
     * @return $this
     */
    public function setFollowUpDate($follow_up_date)
    {
        $this->container['follow_up_date'] = $follow_up_date;

        return $this;
    }

    /**
     * Gets follow_up_date_expression
     *
     * @return string
     */
    public function getFollowUpDateExpression()
    {
        return $this->container['follow_up_date_expression'];
    }

    /**
     * Sets follow_up_date_expression
     *
     * @param string $follow_up_date_expression Restrict to tasks that have a followUp date on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setFollowUpDateExpression($follow_up_date_expression)
    {
        $this->container['follow_up_date_expression'] = $follow_up_date_expression;

        return $this;
    }

    /**
     * Gets follow_up_after
     *
     * @return \DateTime
     */
    public function getFollowUpAfter()
    {
        return $this->container['follow_up_after'];
    }

    /**
     * Sets follow_up_after
     *
     * @param \DateTime $follow_up_after Restrict to tasks that have a followUp date after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.542+0200`.
     *
     * @return $this
     */
    public function setFollowUpAfter($follow_up_after)
    {
        $this->container['follow_up_after'] = $follow_up_after;

        return $this;
    }

    /**
     * Gets follow_up_after_expression
     *
     * @return string
     */
    public function getFollowUpAfterExpression()
    {
        return $this->container['follow_up_after_expression'];
    }

    /**
     * Sets follow_up_after_expression
     *
     * @param string $follow_up_after_expression Restrict to tasks that have a followUp date after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setFollowUpAfterExpression($follow_up_after_expression)
    {
        $this->container['follow_up_after_expression'] = $follow_up_after_expression;

        return $this;
    }

    /**
     * Gets follow_up_before
     *
     * @return string
     */
    public function getFollowUpBefore()
    {
        return $this->container['follow_up_before'];
    }

    /**
     * Sets follow_up_before
     *
     * @param string $follow_up_before Restrict to tasks that have a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.234+0200`.
     *
     * @return $this
     */
    public function setFollowUpBefore($follow_up_before)
    {
        $this->container['follow_up_before'] = $follow_up_before;

        return $this;
    }

    /**
     * Gets follow_up_before_expression
     *
     * @return string
     */
    public function getFollowUpBeforeExpression()
    {
        return $this->container['follow_up_before_expression'];
    }

    /**
     * Sets follow_up_before_expression
     *
     * @param string $follow_up_before_expression Restrict to tasks that have a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setFollowUpBeforeExpression($follow_up_before_expression)
    {
        $this->container['follow_up_before_expression'] = $follow_up_before_expression;

        return $this;
    }

    /**
     * Gets follow_up_before_or_not_existent
     *
     * @return \DateTime
     */
    public function getFollowUpBeforeOrNotExistent()
    {
        return $this->container['follow_up_before_or_not_existent'];
    }

    /**
     * Sets follow_up_before_or_not_existent
     *
     * @param \DateTime $follow_up_before_or_not_existent Restrict to tasks that have no followUp date or a followUp date before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.432+0200`. The typical use case is to query all `active` tasks for a user for a given date.
     *
     * @return $this
     */
    public function setFollowUpBeforeOrNotExistent($follow_up_before_or_not_existent)
    {
        $this->container['follow_up_before_or_not_existent'] = $follow_up_before_or_not_existent;

        return $this;
    }

    /**
     * Gets follow_up_before_or_not_existent_expression
     *
     * @return string
     */
    public function getFollowUpBeforeOrNotExistentExpression()
    {
        return $this->container['follow_up_before_or_not_existent_expression'];
    }

    /**
     * Sets follow_up_before_or_not_existent_expression
     *
     * @param string $follow_up_before_or_not_existent_expression Restrict to tasks that have no followUp date or a followUp date before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setFollowUpBeforeOrNotExistentExpression($follow_up_before_or_not_existent_expression)
    {
        $this->container['follow_up_before_or_not_existent_expression'] = $follow_up_before_or_not_existent_expression;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on Restrict to tasks that were created on the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.324+0200`.
     *
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_on_expression
     *
     * @return string
     */
    public function getCreatedOnExpression()
    {
        return $this->container['created_on_expression'];
    }

    /**
     * Sets created_on_expression
     *
     * @param string $created_on_expression Restrict to tasks that were created on the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setCreatedOnExpression($created_on_expression)
    {
        $this->container['created_on_expression'] = $created_on_expression;

        return $this;
    }

    /**
     * Gets created_after
     *
     * @return \DateTime
     */
    public function getCreatedAfter()
    {
        return $this->container['created_after'];
    }

    /**
     * Sets created_after
     *
     * @param \DateTime $created_after Restrict to tasks that were created after the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.342+0200`.
     *
     * @return $this
     */
    public function setCreatedAfter($created_after)
    {
        $this->container['created_after'] = $created_after;

        return $this;
    }

    /**
     * Gets created_after_expression
     *
     * @return string
     */
    public function getCreatedAfterExpression()
    {
        return $this->container['created_after_expression'];
    }

    /**
     * Sets created_after_expression
     *
     * @param string $created_after_expression Restrict to tasks that were created after the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setCreatedAfterExpression($created_after_expression)
    {
        $this->container['created_after_expression'] = $created_after_expression;

        return $this;
    }

    /**
     * Gets created_before
     *
     * @return \DateTime
     */
    public function getCreatedBefore()
    {
        return $this->container['created_before'];
    }

    /**
     * Sets created_before
     *
     * @param \DateTime $created_before Restrict to tasks that were created before the given date. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
     *
     * @return $this
     */
    public function setCreatedBefore($created_before)
    {
        $this->container['created_before'] = $created_before;

        return $this;
    }

    /**
     * Gets created_before_expression
     *
     * @return string
     */
    public function getCreatedBeforeExpression()
    {
        return $this->container['created_before_expression'];
    }

    /**
     * Sets created_before_expression
     *
     * @param string $created_before_expression Restrict to tasks that were created before the date described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setCreatedBeforeExpression($created_before_expression)
    {
        $this->container['created_before_expression'] = $created_before_expression;

        return $this;
    }

    /**
     * Gets updated_after
     *
     * @return \DateTime
     */
    public function getUpdatedAfter()
    {
        return $this->container['updated_after'];
    }

    /**
     * Sets updated_after
     *
     * @param \DateTime $updated_after Restrict to tasks that were updated after the given date. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.21/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. By [default](https://docs.camunda.org/manual/7.21/reference/rest/overview/date-format/), the date must have the format `yyyy-MM-dd'T'HH:mm:ss.SSSZ`, e.g., `2013-01-23T14:42:45.332+0200`.
     *
     * @return $this
     */
    public function setUpdatedAfter($updated_after)
    {
        $this->container['updated_after'] = $updated_after;

        return $this;
    }

    /**
     * Gets updated_after_expression
     *
     * @return string
     */
    public function getUpdatedAfterExpression()
    {
        return $this->container['updated_after_expression'];
    }

    /**
     * Sets updated_after_expression
     *
     * @param string $updated_after_expression Restrict to tasks that were updated after the date described by the given expression. Every action that fires  a [task update event](https://docs.camunda.org/manual/7.21/user-guide/process-engine/delegation-code/#task-listener-event-lifecycle) is considered as updating the task. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to a `java.util.Date` or `org.joda.time.DateTime` object.
     *
     * @return $this
     */
    public function setUpdatedAfterExpression($updated_after_expression)
    {
        $this->container['updated_after_expression'] = $updated_after_expression;

        return $this;
    }

    /**
     * Gets delegation_state
     *
     * @return string
     */
    public function getDelegationState()
    {
        return $this->container['delegation_state'];
    }

    /**
     * Sets delegation_state
     *
     * @param string $delegation_state Restrict to tasks that are in the given delegation state. Valid values are `PENDING` and `RESOLVED`.
     *
     * @return $this
     */
    public function setDelegationState($delegation_state)
    {
        $allowedValues = $this->getDelegationStateAllowableValues();
        if (!is_null($delegation_state) && !in_array($delegation_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delegation_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delegation_state'] = $delegation_state;

        return $this;
    }

    /**
     * Gets candidate_groups
     *
     * @return string[]
     */
    public function getCandidateGroups()
    {
        return $this->container['candidate_groups'];
    }

    /**
     * Sets candidate_groups
     *
     * @param string[] $candidate_groups Restrict to tasks that are offered to any of the given candidate groups. Takes a comma-separated list of group names, so for example `developers,support,sales`.
     *
     * @return $this
     */
    public function setCandidateGroups($candidate_groups)
    {
        $this->container['candidate_groups'] = $candidate_groups;

        return $this;
    }

    /**
     * Gets candidate_groups_expression
     *
     * @return string
     */
    public function getCandidateGroupsExpression()
    {
        return $this->container['candidate_groups_expression'];
    }

    /**
     * Sets candidate_groups_expression
     *
     * @param string $candidate_groups_expression Restrict to tasks that are offered to any of the candidate groups described by the given expression. See the [user guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/expression-language/#internal-context-functions) for more information on available functions. The expression must evaluate to `java.util.List` of Strings.
     *
     * @return $this
     */
    public function setCandidateGroupsExpression($candidate_groups_expression)
    {
        $this->container['candidate_groups_expression'] = $candidate_groups_expression;

        return $this;
    }

    /**
     * Gets with_candidate_groups
     *
     * @return bool
     */
    public function getWithCandidateGroups()
    {
        return $this->container['with_candidate_groups'];
    }

    /**
     * Sets with_candidate_groups
     *
     * @param bool $with_candidate_groups Only include tasks which have a candidate group. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithCandidateGroups($with_candidate_groups)
    {
        $this->container['with_candidate_groups'] = $with_candidate_groups;

        return $this;
    }

    /**
     * Gets without_candidate_groups
     *
     * @return bool
     */
    public function getWithoutCandidateGroups()
    {
        return $this->container['without_candidate_groups'];
    }

    /**
     * Sets without_candidate_groups
     *
     * @param bool $without_candidate_groups Only include tasks which have no candidate group. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutCandidateGroups($without_candidate_groups)
    {
        $this->container['without_candidate_groups'] = $without_candidate_groups;

        return $this;
    }

    /**
     * Gets with_candidate_users
     *
     * @return bool
     */
    public function getWithCandidateUsers()
    {
        return $this->container['with_candidate_users'];
    }

    /**
     * Sets with_candidate_users
     *
     * @param bool $with_candidate_users Only include tasks which have a candidate user. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithCandidateUsers($with_candidate_users)
    {
        $this->container['with_candidate_users'] = $with_candidate_users;

        return $this;
    }

    /**
     * Gets without_candidate_users
     *
     * @return bool
     */
    public function getWithoutCandidateUsers()
    {
        return $this->container['without_candidate_users'];
    }

    /**
     * Sets without_candidate_users
     *
     * @param bool $without_candidate_users Only include tasks which have no candidate users. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setWithoutCandidateUsers($without_candidate_users)
    {
        $this->container['without_candidate_users'] = $without_candidate_users;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Only include active tasks. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets suspended
     *
     * @return bool
     */
    public function getSuspended()
    {
        return $this->container['suspended'];
    }

    /**
     * Sets suspended
     *
     * @param bool $suspended Only include suspended tasks. Value may only be `true`, as `false` is the default behavior.
     *
     * @return $this
     */
    public function setSuspended($suspended)
    {
        $this->container['suspended'] = $suspended;

        return $this;
    }

    /**
     * Gets task_variables
     *
     * @return \Camunda\Client\Model\VariableQueryParameterDto[]
     */
    public function getTaskVariables()
    {
        return $this->container['task_variables'];
    }

    /**
     * Sets task_variables
     *
     * @param \Camunda\Client\Model\VariableQueryParameterDto[] $task_variables A JSON array to only include tasks that have variables with certain values. The array consists of JSON objects with three properties `name`, `operator` and `value`. `name` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     *
     * @return $this
     */
    public function setTaskVariables($task_variables)
    {
        $this->container['task_variables'] = $task_variables;

        return $this;
    }

    /**
     * Gets process_variables
     *
     * @return \Camunda\Client\Model\VariableQueryParameterDto[]
     */
    public function getProcessVariables()
    {
        return $this->container['process_variables'];
    }

    /**
     * Sets process_variables
     *
     * @param \Camunda\Client\Model\VariableQueryParameterDto[] $process_variables A JSON array to only include tasks that belong to a process instance with variables with certain values. The array consists of JSON objects with three properties `name`, `operator` and `value`. `name` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`; `notLike`. `key` and `value` may not contain underscore or comma characters.
     *
     * @return $this
     */
    public function setProcessVariables($process_variables)
    {
        $this->container['process_variables'] = $process_variables;

        return $this;
    }

    /**
     * Gets case_instance_variables
     *
     * @return \Camunda\Client\Model\VariableQueryParameterDto[]
     */
    public function getCaseInstanceVariables()
    {
        return $this->container['case_instance_variables'];
    }

    /**
     * Sets case_instance_variables
     *
     * @param \Camunda\Client\Model\VariableQueryParameterDto[] $case_instance_variables A JSON array to only include tasks that belong to a case instance with variables with certain values. The array consists of JSON objects with three properties `name`, `operator` and `value`. `name` is the variable name, `operator` is the comparison operator to be used and `value` the variable value. `value` may be of type `String`, `Number` or `Boolean`.  Valid `operator` values are: `eq` - equal to; `neq` - not equal to; `gt` - greater than; `gteq` - greater than or equal to; `lt` - lower than; `lteq` - lower than or equal to; `like`. `key` and `value` may not contain underscore or comma characters.
     *
     * @return $this
     */
    public function setCaseInstanceVariables($case_instance_variables)
    {
        $this->container['case_instance_variables'] = $case_instance_variables;

        return $this;
    }

    /**
     * Gets variable_names_ignore_case
     *
     * @return bool
     */
    public function getVariableNamesIgnoreCase()
    {
        return $this->container['variable_names_ignore_case'];
    }

    /**
     * Sets variable_names_ignore_case
     *
     * @param bool $variable_names_ignore_case Match all variable names in this query case-insensitively. If set `variableName` and `variablename` are treated as equal.
     *
     * @return $this
     */
    public function setVariableNamesIgnoreCase($variable_names_ignore_case)
    {
        $this->container['variable_names_ignore_case'] = $variable_names_ignore_case;

        return $this;
    }

    /**
     * Gets variable_values_ignore_case
     *
     * @return bool
     */
    public function getVariableValuesIgnoreCase()
    {
        return $this->container['variable_values_ignore_case'];
    }

    /**
     * Sets variable_values_ignore_case
     *
     * @param bool $variable_values_ignore_case Match all variable values in this query case-insensitively. If set `variableValue` and `variablevalue` are treated as equal.
     *
     * @return $this
     */
    public function setVariableValuesIgnoreCase($variable_values_ignore_case)
    {
        $this->container['variable_values_ignore_case'] = $variable_values_ignore_case;

        return $this;
    }

    /**
     * Gets parent_task_id
     *
     * @return string
     */
    public function getParentTaskId()
    {
        return $this->container['parent_task_id'];
    }

    /**
     * Sets parent_task_id
     *
     * @param string $parent_task_id Restrict query to all tasks that are sub tasks of the given task. Takes a task id.
     *
     * @return $this
     */
    public function setParentTaskId($parent_task_id)
    {
        $this->container['parent_task_id'] = $parent_task_id;

        return $this;
    }

    /**
     * Gets or_queries
     *
     * @return \Camunda\Client\Model\TaskQueryDto[]
     */
    public function getOrQueries()
    {
        return $this->container['or_queries'];
    }

    /**
     * Sets or_queries
     *
     * @param \Camunda\Client\Model\TaskQueryDto[] $or_queries A JSON array of nested task queries with OR semantics. A task matches a nested query if it fulfills *at least one* of the query's predicates. With multiple nested queries, a task must fulfill at least one predicate of *each* query ([Conjunctive Normal Form](https://en.wikipedia.org/wiki/Conjunctive_normal_form)).  All task query properties can be used except for: `sorting`, `withCandidateGroups`, `withoutCandidateGroups`, `withCandidateUsers`, `withoutCandidateUsers`  See the [User guide](https://docs.camunda.org/manual/7.21/user-guide/process-engine/process-engine-api/#or-queries) for more information about OR queries.
     *
     * @return $this
     */
    public function setOrQueries($or_queries)
    {
        $this->container['or_queries'] = $or_queries;

        return $this;
    }

    /**
     * Gets sorting
     *
     * @return \Camunda\Client\Model\TaskQueryDtoSorting[]
     */
    public function getSorting()
    {
        return $this->container['sorting'];
    }

    /**
     * Sets sorting
     *
     * @param \Camunda\Client\Model\TaskQueryDtoSorting[] $sorting Apply sorting of the result
     *
     * @return $this
     */
    public function setSorting($sorting)
    {
        $this->container['sorting'] = $sorting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
